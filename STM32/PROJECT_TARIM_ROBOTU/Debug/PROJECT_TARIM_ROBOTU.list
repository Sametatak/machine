
PROJECT_TARIM_ROBOTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008134  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800831c  0800831c  0000931c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800859c  0800859c  0000a180  2**0
                  CONTENTS
  4 .ARM          00000008  0800859c  0800859c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085a4  080085a4  0000a180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085a4  080085a4  000095a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085a8  080085a8  000095a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080085ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002470  20000180  0800872c  0000a180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025f0  0800872c  0000a5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017646  00000000  00000000  0000a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d6  00000000  00000000  000217ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00024fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001119  00000000  00000000  000265b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217e2  00000000  00000000  000276c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a70a  00000000  00000000  00048eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b97c4  00000000  00000000  000635b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011cd79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d78  00000000  00000000  0011cdbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00122b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000180 	.word	0x20000180
 8000204:	00000000 	.word	0x00000000
 8000208:	08008304 	.word	0x08008304

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000184 	.word	0x20000184
 8000224:	08008304 	.word	0x08008304

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000238:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800023c:	f000 b968 	b.w	8000510 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	460c      	mov	r4, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14e      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000264:	4694      	mov	ip, r2
 8000266:	458c      	cmp	ip, r1
 8000268:	4686      	mov	lr, r0
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	d962      	bls.n	8000336 <__udivmoddi4+0xde>
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0320 	rsb	r3, r2, #32
 8000276:	4091      	lsls	r1, r2
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	4319      	orrs	r1, r3
 8000282:	fa00 fe02 	lsl.w	lr, r0, r2
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fbb1 f4f7 	udiv	r4, r1, r7
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb04 f106 	mul.w	r1, r4, r6
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002ae:	f080 8110 	bcs.w	80004d2 <__udivmoddi4+0x27a>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 810d 	bls.w	80004d2 <__udivmoddi4+0x27a>
 80002b8:	3c02      	subs	r4, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a59      	subs	r1, r3, r1
 80002be:	fbb1 f0f7 	udiv	r0, r1, r7
 80002c2:	fb07 1110 	mls	r1, r7, r0, r1
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d2:	429e      	cmp	r6, r3
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x94>
 80002d6:	eb1c 0303 	adds.w	r3, ip, r3
 80002da:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002de:	f080 80fa 	bcs.w	80004d6 <__udivmoddi4+0x27e>
 80002e2:	429e      	cmp	r6, r3
 80002e4:	f240 80f7 	bls.w	80004d6 <__udivmoddi4+0x27e>
 80002e8:	4463      	add	r3, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	2100      	movs	r1, #0
 80002ee:	1b9b      	subs	r3, r3, r6
 80002f0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0xa6>
 80002f6:	40d3      	lsrs	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	e9c5 3200 	strd	r3, r2, [r5]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d905      	bls.n	8000312 <__udivmoddi4+0xba>
 8000306:	b10d      	cbz	r5, 800030c <__udivmoddi4+0xb4>
 8000308:	e9c5 0100 	strd	r0, r1, [r5]
 800030c:	2100      	movs	r1, #0
 800030e:	4608      	mov	r0, r1
 8000310:	e7f5      	b.n	80002fe <__udivmoddi4+0xa6>
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d146      	bne.n	80003a8 <__udivmoddi4+0x150>
 800031a:	42a3      	cmp	r3, r4
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xcc>
 800031e:	4290      	cmp	r0, r2
 8000320:	f0c0 80ee 	bcc.w	8000500 <__udivmoddi4+0x2a8>
 8000324:	1a86      	subs	r6, r0, r2
 8000326:	eb64 0303 	sbc.w	r3, r4, r3
 800032a:	2001      	movs	r0, #1
 800032c:	2d00      	cmp	r5, #0
 800032e:	d0e6      	beq.n	80002fe <__udivmoddi4+0xa6>
 8000330:	e9c5 6300 	strd	r6, r3, [r5]
 8000334:	e7e3      	b.n	80002fe <__udivmoddi4+0xa6>
 8000336:	2a00      	cmp	r2, #0
 8000338:	f040 808f 	bne.w	800045a <__udivmoddi4+0x202>
 800033c:	eba1 040c 	sub.w	r4, r1, ip
 8000340:	2101      	movs	r1, #1
 8000342:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000346:	fa1f f78c 	uxth.w	r7, ip
 800034a:	fbb4 f6f8 	udiv	r6, r4, r8
 800034e:	fb08 4416 	mls	r4, r8, r6, r4
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	4298      	cmp	r0, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x11c>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x11a>
 800036c:	4298      	cmp	r0, r3
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b0>
 8000372:	4626      	mov	r6, r4
 8000374:	1a1c      	subs	r4, r3, r0
 8000376:	fbb4 f0f8 	udiv	r0, r4, r8
 800037a:	fb08 4410 	mls	r4, r8, r0, r4
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038a:	429f      	cmp	r7, r3
 800038c:	d908      	bls.n	80003a0 <__udivmoddi4+0x148>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x146>
 8000398:	429f      	cmp	r7, r3
 800039a:	f200 80ae 	bhi.w	80004fa <__udivmoddi4+0x2a2>
 800039e:	4620      	mov	r0, r4
 80003a0:	1bdb      	subs	r3, r3, r7
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0x9c>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa24 f607 	lsr.w	r6, r4, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fbb6 f8f9 	udiv	r8, r6, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 6618 	mls	r6, r9, r8, r6
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	408c      	lsls	r4, r1
 80003d0:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	431c      	orrs	r4, r3
 80003da:	0c23      	lsrs	r3, r4, #16
 80003dc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003e0:	4298      	cmp	r0, r3
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90a      	bls.n	80003fe <__udivmoddi4+0x1a6>
 80003e8:	eb1c 0303 	adds.w	r3, ip, r3
 80003ec:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 80003f0:	f080 8081 	bcs.w	80004f6 <__udivmoddi4+0x29e>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	d97e      	bls.n	80004f6 <__udivmoddi4+0x29e>
 80003f8:	f1a8 0802 	sub.w	r8, r8, #2
 80003fc:	4463      	add	r3, ip
 80003fe:	1a1e      	subs	r6, r3, r0
 8000400:	fbb6 f3f9 	udiv	r3, r6, r9
 8000404:	fb09 6613 	mls	r6, r9, r3, r6
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	b2a4      	uxth	r4, r4
 800040e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000412:	45a6      	cmp	lr, r4
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x1d0>
 8000416:	eb1c 0404 	adds.w	r4, ip, r4
 800041a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800041e:	d266      	bcs.n	80004ee <__udivmoddi4+0x296>
 8000420:	45a6      	cmp	lr, r4
 8000422:	d964      	bls.n	80004ee <__udivmoddi4+0x296>
 8000424:	3b02      	subs	r3, #2
 8000426:	4464      	add	r4, ip
 8000428:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042c:	fba0 8302 	umull	r8, r3, r0, r2
 8000430:	eba4 040e 	sub.w	r4, r4, lr
 8000434:	429c      	cmp	r4, r3
 8000436:	46c6      	mov	lr, r8
 8000438:	461e      	mov	r6, r3
 800043a:	d350      	bcc.n	80004de <__udivmoddi4+0x286>
 800043c:	d04d      	beq.n	80004da <__udivmoddi4+0x282>
 800043e:	b155      	cbz	r5, 8000456 <__udivmoddi4+0x1fe>
 8000440:	ebba 030e 	subs.w	r3, sl, lr
 8000444:	eb64 0406 	sbc.w	r4, r4, r6
 8000448:	fa04 f707 	lsl.w	r7, r4, r7
 800044c:	40cb      	lsrs	r3, r1
 800044e:	431f      	orrs	r7, r3
 8000450:	40cc      	lsrs	r4, r1
 8000452:	e9c5 7400 	strd	r7, r4, [r5]
 8000456:	2100      	movs	r1, #0
 8000458:	e751      	b.n	80002fe <__udivmoddi4+0xa6>
 800045a:	fa0c fc02 	lsl.w	ip, ip, r2
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d9      	lsrs	r1, r3
 8000464:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000468:	fa20 f303 	lsr.w	r3, r0, r3
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fbb1 f0f8 	udiv	r0, r1, r8
 8000474:	fb08 1110 	mls	r1, r8, r0, r1
 8000478:	4094      	lsls	r4, r2
 800047a:	431c      	orrs	r4, r3
 800047c:	fa1f f78c 	uxth.w	r7, ip
 8000480:	0c23      	lsrs	r3, r4, #16
 8000482:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000486:	fb00 f107 	mul.w	r1, r0, r7
 800048a:	4299      	cmp	r1, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x248>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000496:	d22c      	bcs.n	80004f2 <__udivmoddi4+0x29a>
 8000498:	4299      	cmp	r1, r3
 800049a:	d92a      	bls.n	80004f2 <__udivmoddi4+0x29a>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1a5b      	subs	r3, r3, r1
 80004a2:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a6:	fb08 3311 	mls	r3, r8, r1, r3
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b0:	fb01 f307 	mul.w	r3, r1, r7
 80004b4:	42a3      	cmp	r3, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x272>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004c0:	d213      	bcs.n	80004ea <__udivmoddi4+0x292>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d911      	bls.n	80004ea <__udivmoddi4+0x292>
 80004c6:	3902      	subs	r1, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	1ae4      	subs	r4, r4, r3
 80004cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d0:	e73b      	b.n	800034a <__udivmoddi4+0xf2>
 80004d2:	4604      	mov	r4, r0
 80004d4:	e6f2      	b.n	80002bc <__udivmoddi4+0x64>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e708      	b.n	80002ec <__udivmoddi4+0x94>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2af      	bcs.n	800043e <__udivmoddi4+0x1e6>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb63 060c 	sbc.w	r6, r3, ip
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7a9      	b.n	800043e <__udivmoddi4+0x1e6>
 80004ea:	4631      	mov	r1, r6
 80004ec:	e7ed      	b.n	80004ca <__udivmoddi4+0x272>
 80004ee:	4603      	mov	r3, r0
 80004f0:	e79a      	b.n	8000428 <__udivmoddi4+0x1d0>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e7d4      	b.n	80004a0 <__udivmoddi4+0x248>
 80004f6:	46b0      	mov	r8, r6
 80004f8:	e781      	b.n	80003fe <__udivmoddi4+0x1a6>
 80004fa:	4463      	add	r3, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e74f      	b.n	80003a0 <__udivmoddi4+0x148>
 8000500:	4606      	mov	r6, r0
 8000502:	4623      	mov	r3, r4
 8000504:	4608      	mov	r0, r1
 8000506:	e711      	b.n	800032c <__udivmoddi4+0xd4>
 8000508:	3e02      	subs	r6, #2
 800050a:	4463      	add	r3, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x11c>
 800050e:	bf00      	nop

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <PIDController_init>:
    double integral;
    double prev_error;
} PIDController;

// Function to initialize the PIDController
void PIDController_init(PIDController *pid, double kp, double ki, double kd) {
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	e9c7 2300 	strd	r2, r3, [r7]
    pid->kp = kp;
 8000520:	68f9      	ldr	r1, [r7, #12]
 8000522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000526:	e9c1 2300 	strd	r2, r3, [r1]
    pid->ki = ki;
 800052a:	68f9      	ldr	r1, [r7, #12]
 800052c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000530:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->kd = kd;
 8000534:	68f9      	ldr	r1, [r7, #12]
 8000536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800053a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->integral = 0.0;
 800053e:	68f9      	ldr	r1, [r7, #12]
 8000540:	f04f 0200 	mov.w	r2, #0
 8000544:	f04f 0300 	mov.w	r3, #0
 8000548:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->prev_error = 0.0;
 800054c:	68f9      	ldr	r1, [r7, #12]
 800054e:	f04f 0200 	mov.w	r2, #0
 8000552:	f04f 0300 	mov.w	r3, #0
 8000556:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <calculateCRC>:
#define ROM_START_ADDRESS 0x08010000
#define PAGE_SIZE ((uint32_t)FLASH_PAGE_SIZE)
#define PACKET_SIZE sizeof(ModbusDevice)

/* CRC Calculation Function */
uint16_t calculateCRC(uint8_t *buffer, uint16_t length) {
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000570:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000574:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < length; ++i) {
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	e011      	b.n	80005a0 <calculateCRC+0x3c>
        crc = (crc >> 8) ^ crcTable[(crc & 0xFF) ^ buffer[i]];
 800057c:	89fb      	ldrh	r3, [r7, #14]
 800057e:	0a1b      	lsrs	r3, r3, #8
 8000580:	b29a      	uxth	r2, r3
 8000582:	89fb      	ldrh	r3, [r7, #14]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	4401      	add	r1, r0
 800058c:	7809      	ldrb	r1, [r1, #0]
 800058e:	404b      	eors	r3, r1
 8000590:	4908      	ldr	r1, [pc, #32]	@ (80005b4 <calculateCRC+0x50>)
 8000592:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000596:	4053      	eors	r3, r2
 8000598:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < length; ++i) {
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	3301      	adds	r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbe9      	blt.n	800057c <calculateCRC+0x18>
    }
    return crc;
 80005a8:	89fb      	ldrh	r3, [r7, #14]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	08008364 	.word	0x08008364

080005b8 <CDC_ReceiveCallback>:
uint16_t target_vel= 0;
uint16_t starting_address = 0;
uint8_t slave_address = 0;
uint16_t crc = 0xFFFF;
uint16_t default_pwm = 1005;
void CDC_ReceiveCallback(uint8_t *buf, uint32_t len) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
    // Callback function called when data is received over USB

    slave_address = buf[0];
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	4b34      	ldr	r3, [pc, #208]	@ (8000698 <CDC_ReceiveCallback+0xe0>)
 80005c8:	701a      	strb	r2, [r3, #0]
    function_code = buf[1];
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3301      	adds	r3, #1
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b32      	ldr	r3, [pc, #200]	@ (800069c <CDC_ReceiveCallback+0xe4>)
 80005d4:	801a      	strh	r2, [r3, #0]
    starting_address = (buf[2] << 8) | buf[3];
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3302      	adds	r3, #2
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b21a      	sxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3303      	adds	r3, #3
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <CDC_ReceiveCallback+0xe8>)
 80005f0:	801a      	strh	r2, [r3, #0]
    length = (buf[4] << 8) | buf[5];
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3304      	adds	r3, #4
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3305      	adds	r3, #5
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <CDC_ReceiveCallback+0xec>)
 800060c:	801a      	strh	r2, [r3, #0]
    new_data_received = 1;
 800060e:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <CDC_ReceiveCallback+0xf0>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
    crc = calculateCRC(buf, len);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b29b      	uxth	r3, r3
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ffa2 	bl	8000564 <calculateCRC>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <CDC_ReceiveCallback+0xf4>)
 8000626:	801a      	strh	r2, [r3, #0]

    if (function_code == 16 && len >= 9 + length) {
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <CDC_ReceiveCallback+0xe4>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	2b10      	cmp	r3, #16
 800062e:	d12e      	bne.n	800068e <CDC_ReceiveCallback+0xd6>
 8000630:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <CDC_ReceiveCallback+0xec>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	3309      	adds	r3, #9
 8000636:	461a      	mov	r2, r3
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	4293      	cmp	r3, r2
 800063c:	d327      	bcc.n	800068e <CDC_ReceiveCallback+0xd6>
    	number_of_bytes= buf[6];
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	799a      	ldrb	r2, [r3, #6]
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <CDC_ReceiveCallback+0xf8>)
 8000644:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < number_of_bytes; i+=2) {
 8000646:	2300      	movs	r3, #0
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e01b      	b.n	8000684 <CDC_ReceiveCallback+0xcc>
            value[i/2] =(buf[7+i] << 8) | buf[8+i];
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	3307      	adds	r3, #7
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	b21a      	sxth	r2, r3
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	3308      	adds	r3, #8
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	440b      	add	r3, r1
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b21b      	sxth	r3, r3
 800066a:	4313      	orrs	r3, r2
 800066c:	b219      	sxth	r1, r3
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	085b      	lsrs	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	b289      	uxth	r1, r1
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <CDC_ReceiveCallback+0xfc>)
 800067a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint8_t i = 0; i < number_of_bytes; i+=2) {
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3302      	adds	r3, #2
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <CDC_ReceiveCallback+0xf8>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	7bfa      	ldrb	r2, [r7, #15]
 800068a:	429a      	cmp	r2, r3
 800068c:	d3de      	bcc.n	800064c <CDC_ReceiveCallback+0x94>
        }
    }
}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20001226 	.word	0x20001226
 800069c:	20001212 	.word	0x20001212
 80006a0:	20001224 	.word	0x20001224
 80006a4:	20001210 	.word	0x20001210
 80006a8:	20001214 	.word	0x20001214
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20001220 	.word	0x20001220
 80006b4:	20001218 	.word	0x20001218

080006b8 <initialize_device>:

void initialize_device(uint8_t slave_address) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
    for (uint16_t i = 0; i < 300; i++) {
 80006c2:	2300      	movs	r3, #0
 80006c4:	81fb      	strh	r3, [r7, #14]
 80006c6:	e00a      	b.n	80006de <initialize_device+0x26>
        modbusDevices[slave_address].data[i] = 0;
 80006c8:	79fa      	ldrb	r2, [r7, #7]
 80006ca:	89fb      	ldrh	r3, [r7, #14]
 80006cc:	4909      	ldr	r1, [pc, #36]	@ (80006f4 <initialize_device+0x3c>)
 80006ce:	01d2      	lsls	r2, r2, #7
 80006d0:	4413      	add	r3, r2
 80006d2:	2200      	movs	r2, #0
 80006d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint16_t i = 0; i < 300; i++) {
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	3301      	adds	r3, #1
 80006dc:	81fb      	strh	r3, [r7, #14]
 80006de:	89fb      	ldrh	r3, [r7, #14]
 80006e0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80006e4:	d3f0      	bcc.n	80006c8 <initialize_device+0x10>
    }
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000310 	.word	0x20000310

080006f8 <write_command>:


void write_command(uint8_t slave_address, uint16_t starting_address, uint16_t length) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	460b      	mov	r3, r1
 8000704:	80bb      	strh	r3, [r7, #4]
 8000706:	4613      	mov	r3, r2
 8000708:	807b      	strh	r3, [r7, #2]
	modbusDevices[slave_address].data[starting_address] = length;
 800070a:	79fa      	ldrb	r2, [r7, #7]
 800070c:	88bb      	ldrh	r3, [r7, #4]
 800070e:	4907      	ldr	r1, [pc, #28]	@ (800072c <write_command+0x34>)
 8000710:	01d2      	lsls	r2, r2, #7
 8000712:	4413      	add	r3, r2
 8000714:	887a      	ldrh	r2, [r7, #2]
 8000716:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	target_vel = length;
 800071a:	4a05      	ldr	r2, [pc, #20]	@ (8000730 <write_command+0x38>)
 800071c:	887b      	ldrh	r3, [r7, #2]
 800071e:	8013      	strh	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000310 	.word	0x20000310
 8000730:	20001222 	.word	0x20001222

08000734 <write_multiple_command>:
void write_multiple_command(uint8_t slave_address, uint16_t starting_address, uint16_t length, uint16_t* value) {
 8000734:	b480      	push	{r7}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4603      	mov	r3, r0
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	460b      	mov	r3, r1
 8000742:	81bb      	strh	r3, [r7, #12]
 8000744:	4613      	mov	r3, r2
 8000746:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < number_of_bytes/2; i++) {
 8000748:	2300      	movs	r3, #0
 800074a:	82fb      	strh	r3, [r7, #22]
 800074c:	e011      	b.n	8000772 <write_multiple_command+0x3e>
        modbusDevices[slave_address].data[starting_address + i] = value[i];
 800074e:	8afb      	ldrh	r3, [r7, #22]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	18d1      	adds	r1, r2, r3
 8000756:	7bfa      	ldrb	r2, [r7, #15]
 8000758:	89b8      	ldrh	r0, [r7, #12]
 800075a:	8afb      	ldrh	r3, [r7, #22]
 800075c:	4403      	add	r3, r0
 800075e:	8808      	ldrh	r0, [r1, #0]
 8000760:	490b      	ldr	r1, [pc, #44]	@ (8000790 <write_multiple_command+0x5c>)
 8000762:	01d2      	lsls	r2, r2, #7
 8000764:	4413      	add	r3, r2
 8000766:	4602      	mov	r2, r0
 8000768:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint16_t i = 0; i < number_of_bytes/2; i++) {
 800076c:	8afb      	ldrh	r3, [r7, #22]
 800076e:	3301      	adds	r3, #1
 8000770:	82fb      	strh	r3, [r7, #22]
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <write_multiple_command+0x60>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	085b      	lsrs	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	8afb      	ldrh	r3, [r7, #22]
 800077e:	4293      	cmp	r3, r2
 8000780:	d3e5      	bcc.n	800074e <write_multiple_command+0x1a>
        //CDC_Transmit_FS(modbusDevices[slave_address].data, 10);
    }

}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	371c      	adds	r7, #28
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000310 	.word	0x20000310
 8000794:	20001220 	.word	0x20001220

08000798 <read_command>:
void read_command(uint8_t slave_address, uint16_t starting_address, uint16_t length, uint16_t crc) {
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b0a5      	sub	sp, #148	@ 0x94
 800079c:	af00      	add	r7, sp, #0
 800079e:	4604      	mov	r4, r0
 80007a0:	4608      	mov	r0, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	461a      	mov	r2, r3
 80007a6:	4623      	mov	r3, r4
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	4603      	mov	r3, r0
 80007ac:	80bb      	strh	r3, [r7, #4]
 80007ae:	460b      	mov	r3, r1
 80007b0:	807b      	strh	r3, [r7, #2]
 80007b2:	4613      	mov	r3, r2
 80007b4:	803b      	strh	r3, [r7, #0]
    uint8_t response[128] = {0};
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	227c      	movs	r2, #124	@ 0x7c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f007 fd72 	bl	80082ac <memset>
    uint8_t response_length = 3 + length * 2 + 2;
 80007c8:	887b      	ldrh	r3, [r7, #2]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	3305      	adds	r3, #5
 80007d2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    if (starting_address + length <= 128) {
 80007d6:	88ba      	ldrh	r2, [r7, #4]
 80007d8:	887b      	ldrh	r3, [r7, #2]
 80007da:	4413      	add	r3, r2
 80007dc:	2b80      	cmp	r3, #128	@ 0x80
 80007de:	dc69      	bgt.n	80008b4 <read_command+0x11c>
        response[0] = slave_address;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	733b      	strb	r3, [r7, #12]
        response[1] = 0x03;
 80007e4:	2303      	movs	r3, #3
 80007e6:	737b      	strb	r3, [r7, #13]
        response[2] = length * 2;
 80007e8:	887b      	ldrh	r3, [r7, #2]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	73bb      	strb	r3, [r7, #14]

        for (uint8_t i = 0; i < length; i++) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80007f8:	e02c      	b.n	8000854 <read_command+0xbc>
            response[3 + i * 2] = modbusDevices[slave_address].data[starting_address + i] >> 8;
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	88b9      	ldrh	r1, [r7, #4]
 80007fe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000802:	440b      	add	r3, r1
 8000804:	492d      	ldr	r1, [pc, #180]	@ (80008bc <read_command+0x124>)
 8000806:	01d2      	lsls	r2, r2, #7
 8000808:	4413      	add	r3, r2
 800080a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	b29a      	uxth	r2, r3
 8000812:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	3303      	adds	r3, #3
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	3390      	adds	r3, #144	@ 0x90
 800081e:	443b      	add	r3, r7
 8000820:	f803 2c84 	strb.w	r2, [r3, #-132]
            response[3 + i * 2 + 1] = modbusDevices[slave_address].data[starting_address + i] & 0xFF;
 8000824:	79fa      	ldrb	r2, [r7, #7]
 8000826:	88b9      	ldrh	r1, [r7, #4]
 8000828:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800082c:	440b      	add	r3, r1
 800082e:	4923      	ldr	r1, [pc, #140]	@ (80008bc <read_command+0x124>)
 8000830:	01d2      	lsls	r2, r2, #7
 8000832:	4413      	add	r3, r2
 8000834:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8000838:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800083c:	3302      	adds	r3, #2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	3390      	adds	r3, #144	@ 0x90
 8000844:	443b      	add	r3, r7
 8000846:	f803 2c84 	strb.w	r2, [r3, #-132]
        for (uint8_t i = 0; i < length; i++) {
 800084a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800084e:	3301      	adds	r3, #1
 8000850:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8000854:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000858:	b29b      	uxth	r3, r3
 800085a:	887a      	ldrh	r2, [r7, #2]
 800085c:	429a      	cmp	r2, r3
 800085e:	d8cc      	bhi.n	80007fa <read_command+0x62>
        }

        crc = calculateCRC(response, response_length - 2);
 8000860:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8000864:	b29b      	uxth	r3, r3
 8000866:	3b02      	subs	r3, #2
 8000868:	b29a      	uxth	r2, r3
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fe77 	bl	8000564 <calculateCRC>
 8000876:	4603      	mov	r3, r0
 8000878:	803b      	strh	r3, [r7, #0]
        response[response_length - 2] = crc & 0xFF;
 800087a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800087e:	3b02      	subs	r3, #2
 8000880:	883a      	ldrh	r2, [r7, #0]
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	3390      	adds	r3, #144	@ 0x90
 8000886:	443b      	add	r3, r7
 8000888:	f803 2c84 	strb.w	r2, [r3, #-132]
        response[response_length - 1] = crc >> 8;
 800088c:	883b      	ldrh	r3, [r7, #0]
 800088e:	0a1b      	lsrs	r3, r3, #8
 8000890:	b29a      	uxth	r2, r3
 8000892:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8000896:	3b01      	subs	r3, #1
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	3390      	adds	r3, #144	@ 0x90
 800089c:	443b      	add	r3, r7
 800089e:	f803 2c84 	strb.w	r2, [r3, #-132]

        CDC_Transmit_FS(response, response_length);
 80008a2:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f007 f8f4 	bl	8007a9c <CDC_Transmit_FS>
    }
}
 80008b4:	bf00      	nop
 80008b6:	3794      	adds	r7, #148	@ 0x94
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	20000310 	.word	0x20000310

080008c0 <user_pwm_setvalue_mosfet4>:
mosfet_3_B_L	 Timer 4 Channel 2
mosfet_4_A_L	 Timer 4 Channel 3
mosfet_4_B_L	 Timer 4 Channel 4
*/

bool user_pwm_setvalue_mosfet4(int16_t new_target_value, int16_t limit) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b092      	sub	sp, #72	@ 0x48
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	80fb      	strh	r3, [r7, #6]
 80008cc:	4613      	mov	r3, r2
 80008ce:	80bb      	strh	r3, [r7, #4]
    static int16_t previous_value = 0;
    int16_t step_size = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    new_target_value = modbusDevices[01].data[0] * 2 - limit;
 80008d6:	4b77      	ldr	r3, [pc, #476]	@ (8000ab4 <user_pwm_setvalue_mosfet4+0x1f4>)
 80008d8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	b29a      	uxth	r2, r3
 80008e0:	88bb      	ldrh	r3, [r7, #4]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	80fb      	strh	r3, [r7, #6]
    new_target_value = (new_target_value < limit) ? new_target_value : limit;
 80008e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f0:	4293      	cmp	r3, r2
 80008f2:	bfa8      	it	ge
 80008f4:	4613      	movge	r3, r2
 80008f6:	80fb      	strh	r3, [r7, #6]
    new_target_value = (new_target_value > -limit) ? new_target_value : -limit;
 80008f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008fc:	425a      	negs	r2, r3
 80008fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000902:	4293      	cmp	r3, r2
 8000904:	bfb8      	it	lt
 8000906:	4613      	movlt	r3, r2
 8000908:	80fb      	strh	r3, [r7, #6]
    if(previous_value == new_target_value){
 800090a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ab8 <user_pwm_setvalue_mosfet4+0x1f8>)
 800090c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000910:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000914:	429a      	cmp	r2, r3
 8000916:	d101      	bne.n	800091c <user_pwm_setvalue_mosfet4+0x5c>
    	return false;
 8000918:	2300      	movs	r3, #0
 800091a:	e0c6      	b.n	8000aaa <user_pwm_setvalue_mosfet4+0x1ea>
    }
    int16_t difference = new_target_value - previous_value;
 800091c:	88fa      	ldrh	r2, [r7, #6]
 800091e:	4b66      	ldr	r3, [pc, #408]	@ (8000ab8 <user_pwm_setvalue_mosfet4+0x1f8>)
 8000920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000924:	b29b      	uxth	r3, r3
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	b29b      	uxth	r3, r3
 800092a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    if (difference > step_size) {
 800092e:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8000932:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000936:	429a      	cmp	r2, r3
 8000938:	dd0b      	ble.n	8000952 <user_pwm_setvalue_mosfet4+0x92>
        previous_value += step_size;
 800093a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab8 <user_pwm_setvalue_mosfet4+0x1f8>)
 800093c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000940:	b29a      	uxth	r2, r3
 8000942:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000946:	4413      	add	r3, r2
 8000948:	b29b      	uxth	r3, r3
 800094a:	b21a      	sxth	r2, r3
 800094c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ab8 <user_pwm_setvalue_mosfet4+0x1f8>)
 800094e:	801a      	strh	r2, [r3, #0]
 8000950:	e015      	b.n	800097e <user_pwm_setvalue_mosfet4+0xbe>
    } else if (difference < -step_size) {
 8000952:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8000956:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800095a:	425b      	negs	r3, r3
 800095c:	429a      	cmp	r2, r3
 800095e:	da0b      	bge.n	8000978 <user_pwm_setvalue_mosfet4+0xb8>
        previous_value -= step_size;
 8000960:	4b55      	ldr	r3, [pc, #340]	@ (8000ab8 <user_pwm_setvalue_mosfet4+0x1f8>)
 8000962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000966:	b29a      	uxth	r2, r3
 8000968:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	b29b      	uxth	r3, r3
 8000970:	b21a      	sxth	r2, r3
 8000972:	4b51      	ldr	r3, [pc, #324]	@ (8000ab8 <user_pwm_setvalue_mosfet4+0x1f8>)
 8000974:	801a      	strh	r2, [r3, #0]
 8000976:	e002      	b.n	800097e <user_pwm_setvalue_mosfet4+0xbe>
    } else {
        previous_value = new_target_value;
 8000978:	4a4f      	ldr	r2, [pc, #316]	@ (8000ab8 <user_pwm_setvalue_mosfet4+0x1f8>)
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	8013      	strh	r3, [r2, #0]
    }

    if (modbusDevices[01].data[0] == 0) {
 800097e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab4 <user_pwm_setvalue_mosfet4+0x1f4>)
 8000980:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <user_pwm_setvalue_mosfet4+0xce>
        previous_value = 0;
 8000988:	4b4b      	ldr	r3, [pc, #300]	@ (8000ab8 <user_pwm_setvalue_mosfet4+0x1f8>)
 800098a:	2200      	movs	r2, #0
 800098c:	801a      	strh	r2, [r3, #0]
    }

    int16_t pwm_value = previous_value;
 800098e:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab8 <user_pwm_setvalue_mosfet4+0x1f8>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    pwm_value = (pwm_value < limit) ? pwm_value : limit;
 8000996:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800099a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800099e:	4293      	cmp	r3, r2
 80009a0:	bfa8      	it	ge
 80009a2:	4613      	movge	r3, r2
 80009a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    pwm_value = (pwm_value > -limit) ? pwm_value : -limit;
 80009a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009ac:	425a      	negs	r2, r3
 80009ae:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80009b2:	4293      	cmp	r3, r2
 80009b4:	bfb8      	it	lt
 80009b6:	4613      	movlt	r3, r2
 80009b8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (pwm_value > 0) {
 80009bc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	dd0c      	ble.n	80009de <user_pwm_setvalue_mosfet4+0x11e>
        HAL_GPIO_WritePin(MOSFET_4_A_H_GPIO_Port, MOSFET_4_A_H_Pin, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ca:	483c      	ldr	r0, [pc, #240]	@ (8000abc <user_pwm_setvalue_mosfet4+0x1fc>)
 80009cc:	f001 fbc0 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_4_B_H_GPIO_Port, MOSFET_4_B_H_Pin, 1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009d6:	4839      	ldr	r0, [pc, #228]	@ (8000abc <user_pwm_setvalue_mosfet4+0x1fc>)
 80009d8:	f001 fbba 	bl	8002150 <HAL_GPIO_WritePin>
 80009dc:	e01c      	b.n	8000a18 <user_pwm_setvalue_mosfet4+0x158>
    } else if (pwm_value < 0) {
 80009de:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da0c      	bge.n	8000a00 <user_pwm_setvalue_mosfet4+0x140>
        HAL_GPIO_WritePin(MOSFET_4_A_H_GPIO_Port, MOSFET_4_A_H_Pin, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ec:	4833      	ldr	r0, [pc, #204]	@ (8000abc <user_pwm_setvalue_mosfet4+0x1fc>)
 80009ee:	f001 fbaf 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_4_B_H_GPIO_Port, MOSFET_4_B_H_Pin, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009f8:	4830      	ldr	r0, [pc, #192]	@ (8000abc <user_pwm_setvalue_mosfet4+0x1fc>)
 80009fa:	f001 fba9 	bl	8002150 <HAL_GPIO_WritePin>
 80009fe:	e00b      	b.n	8000a18 <user_pwm_setvalue_mosfet4+0x158>
    } else {
        HAL_GPIO_WritePin(MOSFET_4_A_H_GPIO_Port, MOSFET_4_A_H_Pin, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a06:	482d      	ldr	r0, [pc, #180]	@ (8000abc <user_pwm_setvalue_mosfet4+0x1fc>)
 8000a08:	f001 fba2 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_4_B_H_GPIO_Port, MOSFET_4_B_H_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a12:	482a      	ldr	r0, [pc, #168]	@ (8000abc <user_pwm_setvalue_mosfet4+0x1fc>)
 8000a14:	f001 fb9c 	bl	8002150 <HAL_GPIO_WritePin>
    }

    TIM_OC_InitTypeDef sConfigOC;
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a18:	2360      	movs	r3, #96	@ 0x60
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.Pulse = (pwm_value > 0) ? default_pwm : -pwm_value;
 8000a24:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	dd02      	ble.n	8000a32 <user_pwm_setvalue_mosfet4+0x172>
 8000a2c:	4b24      	ldr	r3, [pc, #144]	@ (8000ac0 <user_pwm_setvalue_mosfet4+0x200>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	e002      	b.n	8000a38 <user_pwm_setvalue_mosfet4+0x178>
 8000a32:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000a36:	425b      	negs	r3, r3
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3e:	2208      	movs	r2, #8
 8000a40:	4619      	mov	r1, r3
 8000a42:	4820      	ldr	r0, [pc, #128]	@ (8000ac4 <user_pwm_setvalue_mosfet4+0x204>)
 8000a44:	f003 fd82 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a48:	2108      	movs	r1, #8
 8000a4a:	481e      	ldr	r0, [pc, #120]	@ (8000ac4 <user_pwm_setvalue_mosfet4+0x204>)
 8000a4c:	f003 fcd4 	bl	80043f8 <HAL_TIM_PWM_Start>


    TIM_OC_InitTypeDef sConfigOC2;
    sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8000a50:	2360      	movs	r3, #96	@ 0x60
 8000a52:	60bb      	str	r3, [r7, #8]
    sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
    sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
    sConfigOC2.Pulse = (pwm_value >= 0) ? pwm_value : default_pwm;
 8000a5c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db02      	blt.n	8000a6a <user_pwm_setvalue_mosfet4+0x1aa>
 8000a64:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000a68:	e001      	b.n	8000a6e <user_pwm_setvalue_mosfet4+0x1ae>
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <user_pwm_setvalue_mosfet4+0x200>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	60fb      	str	r3, [r7, #12]

    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC2, TIM_CHANNEL_4);
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	220c      	movs	r2, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	4812      	ldr	r0, [pc, #72]	@ (8000ac4 <user_pwm_setvalue_mosfet4+0x204>)
 8000a7a:	f003 fd67 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a7e:	210c      	movs	r1, #12
 8000a80:	4810      	ldr	r0, [pc, #64]	@ (8000ac4 <user_pwm_setvalue_mosfet4+0x204>)
 8000a82:	f003 fcb9 	bl	80043f8 <HAL_TIM_PWM_Start>

    modbusDevices[01].data[4] = pwm_value + 300;
 8000a86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000a8a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <user_pwm_setvalue_mosfet4+0x1f4>)
 8000a92:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    return previous_value != new_target_value;
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <user_pwm_setvalue_mosfet4+0x1f8>)
 8000a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	bf14      	ite	ne
 8000aa4:	2301      	movne	r3, #1
 8000aa6:	2300      	moveq	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3748      	adds	r7, #72	@ 0x48
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000310 	.word	0x20000310
 8000ab8:	20001228 	.word	0x20001228
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	20000002 	.word	0x20000002
 8000ac4:	20000280 	.word	0x20000280

08000ac8 <user_pwm_setvalue_mosfet3>:


bool user_pwm_setvalue_mosfet3(int16_t new_target_value, int16_t limit) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b092      	sub	sp, #72	@ 0x48
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	80fb      	strh	r3, [r7, #6]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	80bb      	strh	r3, [r7, #4]
    static int16_t previous_value = 0;
    int16_t step_size = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    new_target_value = modbusDevices[01].data[1] * 2 - limit;
 8000ade:	4b77      	ldr	r3, [pc, #476]	@ (8000cbc <user_pwm_setvalue_mosfet3+0x1f4>)
 8000ae0:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	80fb      	strh	r3, [r7, #6]
    new_target_value = (new_target_value < limit) ? new_target_value : limit;
 8000af0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af8:	4293      	cmp	r3, r2
 8000afa:	bfa8      	it	ge
 8000afc:	4613      	movge	r3, r2
 8000afe:	80fb      	strh	r3, [r7, #6]
    new_target_value = (new_target_value > -limit) ? new_target_value : -limit;
 8000b00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b04:	425a      	negs	r2, r3
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	bfb8      	it	lt
 8000b0e:	4613      	movlt	r3, r2
 8000b10:	80fb      	strh	r3, [r7, #6]
    if(previous_value == new_target_value){
 8000b12:	4b6b      	ldr	r3, [pc, #428]	@ (8000cc0 <user_pwm_setvalue_mosfet3+0x1f8>)
 8000b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d101      	bne.n	8000b24 <user_pwm_setvalue_mosfet3+0x5c>
        return false;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e0c6      	b.n	8000cb2 <user_pwm_setvalue_mosfet3+0x1ea>
    }
    int16_t difference = new_target_value - previous_value;
 8000b24:	88fa      	ldrh	r2, [r7, #6]
 8000b26:	4b66      	ldr	r3, [pc, #408]	@ (8000cc0 <user_pwm_setvalue_mosfet3+0x1f8>)
 8000b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    if (difference > step_size) {
 8000b36:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8000b3a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	dd0b      	ble.n	8000b5a <user_pwm_setvalue_mosfet3+0x92>
        previous_value += step_size;
 8000b42:	4b5f      	ldr	r3, [pc, #380]	@ (8000cc0 <user_pwm_setvalue_mosfet3+0x1f8>)
 8000b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000b4e:	4413      	add	r3, r2
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	4b5a      	ldr	r3, [pc, #360]	@ (8000cc0 <user_pwm_setvalue_mosfet3+0x1f8>)
 8000b56:	801a      	strh	r2, [r3, #0]
 8000b58:	e015      	b.n	8000b86 <user_pwm_setvalue_mosfet3+0xbe>
    } else if (difference < -step_size) {
 8000b5a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8000b5e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000b62:	425b      	negs	r3, r3
 8000b64:	429a      	cmp	r2, r3
 8000b66:	da0b      	bge.n	8000b80 <user_pwm_setvalue_mosfet3+0xb8>
        previous_value -= step_size;
 8000b68:	4b55      	ldr	r3, [pc, #340]	@ (8000cc0 <user_pwm_setvalue_mosfet3+0x1f8>)
 8000b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	4b51      	ldr	r3, [pc, #324]	@ (8000cc0 <user_pwm_setvalue_mosfet3+0x1f8>)
 8000b7c:	801a      	strh	r2, [r3, #0]
 8000b7e:	e002      	b.n	8000b86 <user_pwm_setvalue_mosfet3+0xbe>
    } else {
        previous_value = new_target_value;
 8000b80:	4a4f      	ldr	r2, [pc, #316]	@ (8000cc0 <user_pwm_setvalue_mosfet3+0x1f8>)
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	8013      	strh	r3, [r2, #0]
    }

    if (modbusDevices[01].data[1] == 0) {
 8000b86:	4b4d      	ldr	r3, [pc, #308]	@ (8000cbc <user_pwm_setvalue_mosfet3+0x1f4>)
 8000b88:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <user_pwm_setvalue_mosfet3+0xce>
        previous_value = 0;
 8000b90:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc0 <user_pwm_setvalue_mosfet3+0x1f8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	801a      	strh	r2, [r3, #0]
    }

    int16_t pwm_value = previous_value;
 8000b96:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc0 <user_pwm_setvalue_mosfet3+0x1f8>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    pwm_value = (pwm_value < limit) ? pwm_value : limit;
 8000b9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ba2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	bfa8      	it	ge
 8000baa:	4613      	movge	r3, r2
 8000bac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    pwm_value = (pwm_value > -limit) ? pwm_value : -limit;
 8000bb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bb4:	425a      	negs	r2, r3
 8000bb6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	bfb8      	it	lt
 8000bbe:	4613      	movlt	r3, r2
 8000bc0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (pwm_value > 0) {
 8000bc4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dd0c      	ble.n	8000be6 <user_pwm_setvalue_mosfet3+0x11e>
        HAL_GPIO_WritePin(MOSFET_3_A_H_GPIO_Port, MOSFET_3_A_H_Pin, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd2:	483c      	ldr	r0, [pc, #240]	@ (8000cc4 <user_pwm_setvalue_mosfet3+0x1fc>)
 8000bd4:	f001 fabc 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_3_B_H_GPIO_Port, MOSFET_3_B_H_Pin, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bde:	4839      	ldr	r0, [pc, #228]	@ (8000cc4 <user_pwm_setvalue_mosfet3+0x1fc>)
 8000be0:	f001 fab6 	bl	8002150 <HAL_GPIO_WritePin>
 8000be4:	e01c      	b.n	8000c20 <user_pwm_setvalue_mosfet3+0x158>
    } else if (pwm_value < 0) {
 8000be6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da0c      	bge.n	8000c08 <user_pwm_setvalue_mosfet3+0x140>
        HAL_GPIO_WritePin(MOSFET_3_A_H_GPIO_Port, MOSFET_3_A_H_Pin, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bf4:	4833      	ldr	r0, [pc, #204]	@ (8000cc4 <user_pwm_setvalue_mosfet3+0x1fc>)
 8000bf6:	f001 faab 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_3_B_H_GPIO_Port, MOSFET_3_B_H_Pin, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c00:	4830      	ldr	r0, [pc, #192]	@ (8000cc4 <user_pwm_setvalue_mosfet3+0x1fc>)
 8000c02:	f001 faa5 	bl	8002150 <HAL_GPIO_WritePin>
 8000c06:	e00b      	b.n	8000c20 <user_pwm_setvalue_mosfet3+0x158>
    } else {
        HAL_GPIO_WritePin(MOSFET_3_A_H_GPIO_Port, MOSFET_3_A_H_Pin, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c0e:	482d      	ldr	r0, [pc, #180]	@ (8000cc4 <user_pwm_setvalue_mosfet3+0x1fc>)
 8000c10:	f001 fa9e 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_3_B_H_GPIO_Port, MOSFET_3_B_H_Pin, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c1a:	482a      	ldr	r0, [pc, #168]	@ (8000cc4 <user_pwm_setvalue_mosfet3+0x1fc>)
 8000c1c:	f001 fa98 	bl	8002150 <HAL_GPIO_WritePin>
    }

    TIM_OC_InitTypeDef sConfigOC;
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c20:	2360      	movs	r3, #96	@ 0x60
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.Pulse = (pwm_value > 0) ? default_pwm : -pwm_value;
 8000c2c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	dd02      	ble.n	8000c3a <user_pwm_setvalue_mosfet3+0x172>
 8000c34:	4b24      	ldr	r3, [pc, #144]	@ (8000cc8 <user_pwm_setvalue_mosfet3+0x200>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	e002      	b.n	8000c40 <user_pwm_setvalue_mosfet3+0x178>
 8000c3a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000c3e:	425b      	negs	r3, r3
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8000c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c46:	2200      	movs	r2, #0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4820      	ldr	r0, [pc, #128]	@ (8000ccc <user_pwm_setvalue_mosfet3+0x204>)
 8000c4c:	f003 fc7e 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c50:	2100      	movs	r1, #0
 8000c52:	481e      	ldr	r0, [pc, #120]	@ (8000ccc <user_pwm_setvalue_mosfet3+0x204>)
 8000c54:	f003 fbd0 	bl	80043f8 <HAL_TIM_PWM_Start>

    TIM_OC_InitTypeDef sConfigOC2;
    sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8000c58:	2360      	movs	r3, #96	@ 0x60
 8000c5a:	60bb      	str	r3, [r7, #8]
    sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
    sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
    sConfigOC2.Pulse = (pwm_value >= 0) ? pwm_value : default_pwm;
 8000c64:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db02      	blt.n	8000c72 <user_pwm_setvalue_mosfet3+0x1aa>
 8000c6c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000c70:	e001      	b.n	8000c76 <user_pwm_setvalue_mosfet3+0x1ae>
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <user_pwm_setvalue_mosfet3+0x200>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	60fb      	str	r3, [r7, #12]

    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC2, TIM_CHANNEL_2);
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4812      	ldr	r0, [pc, #72]	@ (8000ccc <user_pwm_setvalue_mosfet3+0x204>)
 8000c82:	f003 fc63 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c86:	2104      	movs	r1, #4
 8000c88:	4810      	ldr	r0, [pc, #64]	@ (8000ccc <user_pwm_setvalue_mosfet3+0x204>)
 8000c8a:	f003 fbb5 	bl	80043f8 <HAL_TIM_PWM_Start>

    modbusDevices[01].data[5] = pwm_value + 300;
 8000c8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000c92:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <user_pwm_setvalue_mosfet3+0x1f4>)
 8000c9a:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
    return previous_value != new_target_value;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <user_pwm_setvalue_mosfet3+0x1f8>)
 8000ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3748      	adds	r7, #72	@ 0x48
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000310 	.word	0x20000310
 8000cc0:	2000122a 	.word	0x2000122a
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	20000002 	.word	0x20000002
 8000ccc:	20000280 	.word	0x20000280

08000cd0 <user_pwm_setvalue_mosfet1>:

bool user_pwm_setvalue_mosfet1(int16_t new_target_value, int16_t limit) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b092      	sub	sp, #72	@ 0x48
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	80fb      	strh	r3, [r7, #6]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	80bb      	strh	r3, [r7, #4]
    static int16_t previous_value = 0;
    int16_t step_size = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    new_target_value = modbusDevices[01].data[3] * 2 - limit;
 8000ce6:	4b74      	ldr	r3, [pc, #464]	@ (8000eb8 <user_pwm_setvalue_mosfet1+0x1e8>)
 8000ce8:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	88bb      	ldrh	r3, [r7, #4]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	80fb      	strh	r3, [r7, #6]
    new_target_value = (new_target_value < limit) ? new_target_value : limit;
 8000cf8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d00:	4293      	cmp	r3, r2
 8000d02:	bfa8      	it	ge
 8000d04:	4613      	movge	r3, r2
 8000d06:	80fb      	strh	r3, [r7, #6]
    new_target_value = (new_target_value > -limit) ? new_target_value : -limit;
 8000d08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d0c:	425a      	negs	r2, r3
 8000d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d12:	4293      	cmp	r3, r2
 8000d14:	bfb8      	it	lt
 8000d16:	4613      	movlt	r3, r2
 8000d18:	80fb      	strh	r3, [r7, #6]
    if(previous_value == new_target_value){
 8000d1a:	4b68      	ldr	r3, [pc, #416]	@ (8000ebc <user_pwm_setvalue_mosfet1+0x1ec>)
 8000d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d101      	bne.n	8000d2c <user_pwm_setvalue_mosfet1+0x5c>
        return false;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e0c0      	b.n	8000eae <user_pwm_setvalue_mosfet1+0x1de>
    }
    int16_t difference = new_target_value - previous_value;
 8000d2c:	88fa      	ldrh	r2, [r7, #6]
 8000d2e:	4b63      	ldr	r3, [pc, #396]	@ (8000ebc <user_pwm_setvalue_mosfet1+0x1ec>)
 8000d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    if (difference > step_size) {
 8000d3e:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8000d42:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dd0b      	ble.n	8000d62 <user_pwm_setvalue_mosfet1+0x92>
        previous_value += step_size;
 8000d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8000ebc <user_pwm_setvalue_mosfet1+0x1ec>)
 8000d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000d56:	4413      	add	r3, r2
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	4b57      	ldr	r3, [pc, #348]	@ (8000ebc <user_pwm_setvalue_mosfet1+0x1ec>)
 8000d5e:	801a      	strh	r2, [r3, #0]
 8000d60:	e015      	b.n	8000d8e <user_pwm_setvalue_mosfet1+0xbe>
    } else if (difference < -step_size) {
 8000d62:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8000d66:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	da0b      	bge.n	8000d88 <user_pwm_setvalue_mosfet1+0xb8>
        previous_value -= step_size;
 8000d70:	4b52      	ldr	r3, [pc, #328]	@ (8000ebc <user_pwm_setvalue_mosfet1+0x1ec>)
 8000d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	4b4e      	ldr	r3, [pc, #312]	@ (8000ebc <user_pwm_setvalue_mosfet1+0x1ec>)
 8000d84:	801a      	strh	r2, [r3, #0]
 8000d86:	e002      	b.n	8000d8e <user_pwm_setvalue_mosfet1+0xbe>
    } else {
        previous_value = new_target_value;
 8000d88:	4a4c      	ldr	r2, [pc, #304]	@ (8000ebc <user_pwm_setvalue_mosfet1+0x1ec>)
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	8013      	strh	r3, [r2, #0]
    }

    if (modbusDevices[01].data[3] == 0) {
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000eb8 <user_pwm_setvalue_mosfet1+0x1e8>)
 8000d90:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <user_pwm_setvalue_mosfet1+0xce>
        previous_value = 0;
 8000d98:	4b48      	ldr	r3, [pc, #288]	@ (8000ebc <user_pwm_setvalue_mosfet1+0x1ec>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	801a      	strh	r2, [r3, #0]
    }

    int16_t pwm_value = previous_value;
 8000d9e:	4b47      	ldr	r3, [pc, #284]	@ (8000ebc <user_pwm_setvalue_mosfet1+0x1ec>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    pwm_value = (pwm_value < limit) ? pwm_value : limit;
 8000da6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000daa:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000dae:	4293      	cmp	r3, r2
 8000db0:	bfa8      	it	ge
 8000db2:	4613      	movge	r3, r2
 8000db4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    pwm_value = (pwm_value > -limit) ? pwm_value : -limit;
 8000db8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dbc:	425a      	negs	r2, r3
 8000dbe:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	bfb8      	it	lt
 8000dc6:	4613      	movlt	r3, r2
 8000dc8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (pwm_value > 0) {
 8000dcc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dd0a      	ble.n	8000dea <user_pwm_setvalue_mosfet1+0x11a>
        HAL_GPIO_WritePin(MOSFET_1_A_H_GPIO_Port, MOSFET_1_A_H_Pin, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	4839      	ldr	r0, [pc, #228]	@ (8000ec0 <user_pwm_setvalue_mosfet1+0x1f0>)
 8000dda:	f001 f9b9 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_1_B_H_GPIO_Port, MOSFET_1_B_H_Pin, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2104      	movs	r1, #4
 8000de2:	4837      	ldr	r0, [pc, #220]	@ (8000ec0 <user_pwm_setvalue_mosfet1+0x1f0>)
 8000de4:	f001 f9b4 	bl	8002150 <HAL_GPIO_WritePin>
 8000de8:	e018      	b.n	8000e1c <user_pwm_setvalue_mosfet1+0x14c>
    } else if (pwm_value < 0) {
 8000dea:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	da0a      	bge.n	8000e08 <user_pwm_setvalue_mosfet1+0x138>
        HAL_GPIO_WritePin(MOSFET_1_A_H_GPIO_Port, MOSFET_1_A_H_Pin, 1);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2108      	movs	r1, #8
 8000df6:	4832      	ldr	r0, [pc, #200]	@ (8000ec0 <user_pwm_setvalue_mosfet1+0x1f0>)
 8000df8:	f001 f9aa 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_1_B_H_GPIO_Port, MOSFET_1_B_H_Pin, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2104      	movs	r1, #4
 8000e00:	482f      	ldr	r0, [pc, #188]	@ (8000ec0 <user_pwm_setvalue_mosfet1+0x1f0>)
 8000e02:	f001 f9a5 	bl	8002150 <HAL_GPIO_WritePin>
 8000e06:	e009      	b.n	8000e1c <user_pwm_setvalue_mosfet1+0x14c>
    } else {
        HAL_GPIO_WritePin(MOSFET_1_A_H_GPIO_Port, MOSFET_1_A_H_Pin, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	482c      	ldr	r0, [pc, #176]	@ (8000ec0 <user_pwm_setvalue_mosfet1+0x1f0>)
 8000e0e:	f001 f99f 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_1_B_H_GPIO_Port, MOSFET_1_B_H_Pin, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2104      	movs	r1, #4
 8000e16:	482a      	ldr	r0, [pc, #168]	@ (8000ec0 <user_pwm_setvalue_mosfet1+0x1f0>)
 8000e18:	f001 f99a 	bl	8002150 <HAL_GPIO_WritePin>
    }

    TIM_OC_InitTypeDef sConfigOC;
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1c:	2360      	movs	r3, #96	@ 0x60
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.Pulse = (pwm_value > 0) ? default_pwm : -pwm_value;
 8000e28:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dd02      	ble.n	8000e36 <user_pwm_setvalue_mosfet1+0x166>
 8000e30:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <user_pwm_setvalue_mosfet1+0x1f4>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	e002      	b.n	8000e3c <user_pwm_setvalue_mosfet1+0x16c>
 8000e36:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	2200      	movs	r2, #0
 8000e44:	4619      	mov	r1, r3
 8000e46:	4820      	ldr	r0, [pc, #128]	@ (8000ec8 <user_pwm_setvalue_mosfet1+0x1f8>)
 8000e48:	f003 fb80 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	481e      	ldr	r0, [pc, #120]	@ (8000ec8 <user_pwm_setvalue_mosfet1+0x1f8>)
 8000e50:	f003 fad2 	bl	80043f8 <HAL_TIM_PWM_Start>

    TIM_OC_InitTypeDef sConfigOC2;
    sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8000e54:	2360      	movs	r3, #96	@ 0x60
 8000e56:	60bb      	str	r3, [r7, #8]
    sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
    sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
    sConfigOC2.Pulse = (pwm_value >= 0) ? pwm_value : default_pwm;
 8000e60:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db02      	blt.n	8000e6e <user_pwm_setvalue_mosfet1+0x19e>
 8000e68:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000e6c:	e001      	b.n	8000e72 <user_pwm_setvalue_mosfet1+0x1a2>
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <user_pwm_setvalue_mosfet1+0x1f4>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]

    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_2);
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4812      	ldr	r0, [pc, #72]	@ (8000ec8 <user_pwm_setvalue_mosfet1+0x1f8>)
 8000e7e:	f003 fb65 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e82:	2104      	movs	r1, #4
 8000e84:	4810      	ldr	r0, [pc, #64]	@ (8000ec8 <user_pwm_setvalue_mosfet1+0x1f8>)
 8000e86:	f003 fab7 	bl	80043f8 <HAL_TIM_PWM_Start>

    modbusDevices[01].data[7] = pwm_value + 300;
 8000e8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e8e:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <user_pwm_setvalue_mosfet1+0x1e8>)
 8000e96:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
    return previous_value != new_target_value;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <user_pwm_setvalue_mosfet1+0x1ec>)
 8000e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	bf14      	ite	ne
 8000ea8:	2301      	movne	r3, #1
 8000eaa:	2300      	moveq	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3748      	adds	r7, #72	@ 0x48
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000310 	.word	0x20000310
 8000ebc:	2000122c 	.word	0x2000122c
 8000ec0:	40011000 	.word	0x40011000
 8000ec4:	20000002 	.word	0x20000002
 8000ec8:	200001f0 	.word	0x200001f0

08000ecc <user_pwm_setvalue_mosfet2>:

bool user_pwm_setvalue_mosfet2(int16_t new_target_value, int16_t limit) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b092      	sub	sp, #72	@ 0x48
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	80fb      	strh	r3, [r7, #6]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	80bb      	strh	r3, [r7, #4]
    static int16_t previous_value = 0;
    int16_t step_size = 2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    new_target_value = modbusDevices[01].data[2] * 2 - limit;
 8000ee2:	4b74      	ldr	r3, [pc, #464]	@ (80010b4 <user_pwm_setvalue_mosfet2+0x1e8>)
 8000ee4:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	88bb      	ldrh	r3, [r7, #4]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	80fb      	strh	r3, [r7, #6]
    new_target_value = (new_target_value < limit) ? new_target_value : limit;
 8000ef4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efc:	4293      	cmp	r3, r2
 8000efe:	bfa8      	it	ge
 8000f00:	4613      	movge	r3, r2
 8000f02:	80fb      	strh	r3, [r7, #6]
    new_target_value = (new_target_value > -limit) ? new_target_value : -limit;
 8000f04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f08:	425a      	negs	r2, r3
 8000f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	bfb8      	it	lt
 8000f12:	4613      	movlt	r3, r2
 8000f14:	80fb      	strh	r3, [r7, #6]
    if(previous_value == new_target_value){
 8000f16:	4b68      	ldr	r3, [pc, #416]	@ (80010b8 <user_pwm_setvalue_mosfet2+0x1ec>)
 8000f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d101      	bne.n	8000f28 <user_pwm_setvalue_mosfet2+0x5c>
        return false;
 8000f24:	2300      	movs	r3, #0
 8000f26:	e0c0      	b.n	80010aa <user_pwm_setvalue_mosfet2+0x1de>
    }
    int16_t difference = new_target_value - previous_value;
 8000f28:	88fa      	ldrh	r2, [r7, #6]
 8000f2a:	4b63      	ldr	r3, [pc, #396]	@ (80010b8 <user_pwm_setvalue_mosfet2+0x1ec>)
 8000f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    if (difference > step_size) {
 8000f3a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8000f3e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dd0b      	ble.n	8000f5e <user_pwm_setvalue_mosfet2+0x92>
        previous_value += step_size;
 8000f46:	4b5c      	ldr	r3, [pc, #368]	@ (80010b8 <user_pwm_setvalue_mosfet2+0x1ec>)
 8000f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000f52:	4413      	add	r3, r2
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	4b57      	ldr	r3, [pc, #348]	@ (80010b8 <user_pwm_setvalue_mosfet2+0x1ec>)
 8000f5a:	801a      	strh	r2, [r3, #0]
 8000f5c:	e015      	b.n	8000f8a <user_pwm_setvalue_mosfet2+0xbe>
    } else if (difference < -step_size) {
 8000f5e:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8000f62:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000f66:	425b      	negs	r3, r3
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	da0b      	bge.n	8000f84 <user_pwm_setvalue_mosfet2+0xb8>
        previous_value -= step_size;
 8000f6c:	4b52      	ldr	r3, [pc, #328]	@ (80010b8 <user_pwm_setvalue_mosfet2+0x1ec>)
 8000f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80010b8 <user_pwm_setvalue_mosfet2+0x1ec>)
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	e002      	b.n	8000f8a <user_pwm_setvalue_mosfet2+0xbe>
    } else {
        previous_value = new_target_value;
 8000f84:	4a4c      	ldr	r2, [pc, #304]	@ (80010b8 <user_pwm_setvalue_mosfet2+0x1ec>)
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	8013      	strh	r3, [r2, #0]
    }

    if (modbusDevices[01].data[2] == 0) {
 8000f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80010b4 <user_pwm_setvalue_mosfet2+0x1e8>)
 8000f8c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <user_pwm_setvalue_mosfet2+0xce>
        previous_value = 0;
 8000f94:	4b48      	ldr	r3, [pc, #288]	@ (80010b8 <user_pwm_setvalue_mosfet2+0x1ec>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	801a      	strh	r2, [r3, #0]
    }

    int16_t pwm_value = previous_value;
 8000f9a:	4b47      	ldr	r3, [pc, #284]	@ (80010b8 <user_pwm_setvalue_mosfet2+0x1ec>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    pwm_value = (pwm_value < limit) ? pwm_value : limit;
 8000fa2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fa6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000faa:	4293      	cmp	r3, r2
 8000fac:	bfa8      	it	ge
 8000fae:	4613      	movge	r3, r2
 8000fb0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    pwm_value = (pwm_value > -limit) ? pwm_value : -limit;
 8000fb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fb8:	425a      	negs	r2, r3
 8000fba:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	bfb8      	it	lt
 8000fc2:	4613      	movlt	r3, r2
 8000fc4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (pwm_value > 0) {
 8000fc8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dd0a      	ble.n	8000fe6 <user_pwm_setvalue_mosfet2+0x11a>
        HAL_GPIO_WritePin(MOSFET_2_A_H_GPIO_Port, MOSFET_2_A_H_Pin, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4839      	ldr	r0, [pc, #228]	@ (80010bc <user_pwm_setvalue_mosfet2+0x1f0>)
 8000fd6:	f001 f8bb 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_2_B_H_GPIO_Port, MOSFET_2_B_H_Pin, 1);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4837      	ldr	r0, [pc, #220]	@ (80010bc <user_pwm_setvalue_mosfet2+0x1f0>)
 8000fe0:	f001 f8b6 	bl	8002150 <HAL_GPIO_WritePin>
 8000fe4:	e018      	b.n	8001018 <user_pwm_setvalue_mosfet2+0x14c>
    } else if (pwm_value < 0) {
 8000fe6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da0a      	bge.n	8001004 <user_pwm_setvalue_mosfet2+0x138>
        HAL_GPIO_WritePin(MOSFET_2_A_H_GPIO_Port, MOSFET_2_A_H_Pin, 1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	4832      	ldr	r0, [pc, #200]	@ (80010bc <user_pwm_setvalue_mosfet2+0x1f0>)
 8000ff4:	f001 f8ac 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_2_B_H_GPIO_Port, MOSFET_2_B_H_Pin, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	482f      	ldr	r0, [pc, #188]	@ (80010bc <user_pwm_setvalue_mosfet2+0x1f0>)
 8000ffe:	f001 f8a7 	bl	8002150 <HAL_GPIO_WritePin>
 8001002:	e009      	b.n	8001018 <user_pwm_setvalue_mosfet2+0x14c>
    } else {
        HAL_GPIO_WritePin(MOSFET_2_A_H_GPIO_Port, MOSFET_2_A_H_Pin, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2102      	movs	r1, #2
 8001008:	482c      	ldr	r0, [pc, #176]	@ (80010bc <user_pwm_setvalue_mosfet2+0x1f0>)
 800100a:	f001 f8a1 	bl	8002150 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOSFET_2_B_H_GPIO_Port, MOSFET_2_B_H_Pin, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2101      	movs	r1, #1
 8001012:	482a      	ldr	r0, [pc, #168]	@ (80010bc <user_pwm_setvalue_mosfet2+0x1f0>)
 8001014:	f001 f89c 	bl	8002150 <HAL_GPIO_WritePin>
    }

    TIM_OC_InitTypeDef sConfigOC;
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001018:	2360      	movs	r3, #96	@ 0x60
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.Pulse = (pwm_value > 0) ? default_pwm : -pwm_value;
 8001024:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001028:	2b00      	cmp	r3, #0
 800102a:	dd02      	ble.n	8001032 <user_pwm_setvalue_mosfet2+0x166>
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <user_pwm_setvalue_mosfet2+0x1f4>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	e002      	b.n	8001038 <user_pwm_setvalue_mosfet2+0x16c>
 8001032:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001036:	425b      	negs	r3, r3
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2208      	movs	r2, #8
 8001040:	4619      	mov	r1, r3
 8001042:	4820      	ldr	r0, [pc, #128]	@ (80010c4 <user_pwm_setvalue_mosfet2+0x1f8>)
 8001044:	f003 fa82 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001048:	2108      	movs	r1, #8
 800104a:	481e      	ldr	r0, [pc, #120]	@ (80010c4 <user_pwm_setvalue_mosfet2+0x1f8>)
 800104c:	f003 f9d4 	bl	80043f8 <HAL_TIM_PWM_Start>

    TIM_OC_InitTypeDef sConfigOC2;
    sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8001050:	2360      	movs	r3, #96	@ 0x60
 8001052:	60bb      	str	r3, [r7, #8]
    sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
    sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
    sConfigOC2.Pulse = (pwm_value >= 0) ? pwm_value : default_pwm;
 800105c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001060:	2b00      	cmp	r3, #0
 8001062:	db02      	blt.n	800106a <user_pwm_setvalue_mosfet2+0x19e>
 8001064:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001068:	e001      	b.n	800106e <user_pwm_setvalue_mosfet2+0x1a2>
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <user_pwm_setvalue_mosfet2+0x1f4>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	60fb      	str	r3, [r7, #12]

    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_4);
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	220c      	movs	r2, #12
 8001076:	4619      	mov	r1, r3
 8001078:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <user_pwm_setvalue_mosfet2+0x1f8>)
 800107a:	f003 fa67 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800107e:	210c      	movs	r1, #12
 8001080:	4810      	ldr	r0, [pc, #64]	@ (80010c4 <user_pwm_setvalue_mosfet2+0x1f8>)
 8001082:	f003 f9b9 	bl	80043f8 <HAL_TIM_PWM_Start>

    modbusDevices[01].data[6] = pwm_value + 300;
 8001086:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800108a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <user_pwm_setvalue_mosfet2+0x1e8>)
 8001092:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
    return previous_value != new_target_value;
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <user_pwm_setvalue_mosfet2+0x1ec>)
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3748      	adds	r7, #72	@ 0x48
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000310 	.word	0x20000310
 80010b8:	2000122e 	.word	0x2000122e
 80010bc:	40011000 	.word	0x40011000
 80010c0:	20000002 	.word	0x20000002
 80010c4:	200001f0 	.word	0x200001f0

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b090      	sub	sp, #64	@ 0x40
 80010cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f000 fd27 	bl	8001b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 f8a1 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f000 fab3 	bl	8001640 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010da:	f000 f92f 	bl	800133c <MX_TIM2_Init>
  MX_TIM3_Init();
 80010de:	f000 f9a7 	bl	8001430 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010e2:	f000 fa09 	bl	80014f8 <MX_TIM4_Init>
  MX_I2C2_Init();
 80010e6:	f000 f8fb 	bl	80012e0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80010ea:	f000 fa7f 	bl	80015ec <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80010ee:	f006 fc11 	bl	8007914 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  initialize_device(1);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff fae0 	bl	80006b8 <initialize_device>
  PIDController controller;
  PIDController_init(&controller, 2.5, 0.1, 0.01);
 80010f8:	4639      	mov	r1, r7
 80010fa:	a339      	add	r3, pc, #228	@ (adr r3, 80011e0 <main+0x118>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001104:	a338      	add	r3, pc, #224	@ (adr r3, 80011e8 <main+0x120>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	e9cd 2300 	strd	r2, r3, [sp]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b37      	ldr	r3, [pc, #220]	@ (80011f0 <main+0x128>)
 8001114:	4608      	mov	r0, r1
 8001116:	f7ff f9fd 	bl	8000514 <PIDController_init>
  uint8_t velocity= 0;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint16_t limit= 600;
 8001120:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001124:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_WritePin(FREN_GPIO_Port, FREN_Pin, 1);
 8001126:	2201      	movs	r2, #1
 8001128:	2120      	movs	r1, #32
 800112a:	4832      	ldr	r0, [pc, #200]	@ (80011f4 <main+0x12c>)
 800112c:	f001 f810 	bl	8002150 <HAL_GPIO_WritePin>
  fren = 1;
 8001130:	4b31      	ldr	r3, [pc, #196]	@ (80011f8 <main+0x130>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
  while (1) {//loopp

	  //velocity = update_vexlocity(velocity, target_vel, alpha);
	  //HAL_Delay(100);

	  user_pwm_setvalue_mosfet1(velocity,limit);
 8001136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800113a:	b21b      	sxth	r3, r3
 800113c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fdc4 	bl	8000cd0 <user_pwm_setvalue_mosfet1>
	  user_pwm_setvalue_mosfet2(velocity,limit);
 8001148:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800114c:	b21b      	sxth	r3, r3
 800114e:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff feb9 	bl	8000ecc <user_pwm_setvalue_mosfet2>
	  user_pwm_setvalue_mosfet3(velocity,limit);
 800115a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800115e:	b21b      	sxth	r3, r3
 8001160:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fcae 	bl	8000ac8 <user_pwm_setvalue_mosfet3>
	  user_pwm_setvalue_mosfet4(velocity,limit);
 800116c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001170:	b21b      	sxth	r3, r3
 8001172:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fba1 	bl	80008c0 <user_pwm_setvalue_mosfet4>
      if (new_data_received) {
 800117e:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <main+0x134>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d028      	beq.n	80011d8 <main+0x110>
    	  if(function_code == 6) {
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <main+0x138>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	2b06      	cmp	r3, #6
 800118c:	d109      	bne.n	80011a2 <main+0xda>
    		  write_command(slave_address, starting_address, length);
 800118e:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <main+0x13c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	4a1d      	ldr	r2, [pc, #116]	@ (8001208 <main+0x140>)
 8001194:	8811      	ldrh	r1, [r2, #0]
 8001196:	4a1d      	ldr	r2, [pc, #116]	@ (800120c <main+0x144>)
 8001198:	8812      	ldrh	r2, [r2, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff faac 	bl	80006f8 <write_command>
 80011a0:	e017      	b.n	80011d2 <main+0x10a>
          } else if(function_code == 16) {
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <main+0x138>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	d109      	bne.n	80011be <main+0xf6>
        	  write_multiple_command(slave_address, starting_address, length,value);
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <main+0x13c>)
 80011ac:	7818      	ldrb	r0, [r3, #0]
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <main+0x140>)
 80011b0:	8819      	ldrh	r1, [r3, #0]
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <main+0x144>)
 80011b4:	881a      	ldrh	r2, [r3, #0]
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <main+0x148>)
 80011b8:	f7ff fabc 	bl	8000734 <write_multiple_command>
 80011bc:	e009      	b.n	80011d2 <main+0x10a>
          }else {
        	  read_command(slave_address, starting_address, length, crc);
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <main+0x13c>)
 80011c0:	7818      	ldrb	r0, [r3, #0]
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <main+0x140>)
 80011c4:	8819      	ldrh	r1, [r3, #0]
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <main+0x144>)
 80011c8:	881a      	ldrh	r2, [r3, #0]
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <main+0x14c>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	f7ff fae3 	bl	8000798 <read_command>
    	  }
          new_data_received = 0;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <main+0x134>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10);
 80011d8:	200a      	movs	r0, #10
 80011da:	f000 fd03 	bl	8001be4 <HAL_Delay>
	  user_pwm_setvalue_mosfet1(velocity,limit);
 80011de:	e7aa      	b.n	8001136 <main+0x6e>
 80011e0:	47ae147b 	.word	0x47ae147b
 80011e4:	3f847ae1 	.word	0x3f847ae1
 80011e8:	9999999a 	.word	0x9999999a
 80011ec:	3fb99999 	.word	0x3fb99999
 80011f0:	40040000 	.word	0x40040000
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	20001215 	.word	0x20001215
 80011fc:	20001214 	.word	0x20001214
 8001200:	20001212 	.word	0x20001212
 8001204:	20001226 	.word	0x20001226
 8001208:	20001224 	.word	0x20001224
 800120c:	20001210 	.word	0x20001210
 8001210:	20001218 	.word	0x20001218
 8001214:	20000000 	.word	0x20000000

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b09c      	sub	sp, #112	@ 0x70
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001222:	2238      	movs	r2, #56	@ 0x38
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f007 f840 	bl	80082ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2220      	movs	r2, #32
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f007 f832 	bl	80082ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001248:	2301      	movs	r3, #1
 800124a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001250:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001256:	2301      	movs	r3, #1
 8001258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800125a:	2300      	movs	r3, #0
 800125c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001266:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001268:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800126c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800126e:	2300      	movs	r3, #0
 8001270:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001276:	4618      	mov	r0, r3
 8001278:	f002 f9f8 	bl	800366c <HAL_RCC_OscConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001282:	f000 fa6f 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	230f      	movs	r3, #15
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128a:	2302      	movs	r3, #2
 800128c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001296:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800129c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a0:	2102      	movs	r1, #2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fcf8 	bl	8003c98 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ae:	f000 fa59 	bl	8001764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012b2:	2310      	movs	r3, #16
 80012b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 ff19 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012c8:	f000 fa4c 	bl	8001764 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <SystemClock_Config+0xc4>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	3770      	adds	r7, #112	@ 0x70
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	42420070 	.word	0x42420070

080012e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <MX_I2C2_Init+0x50>)
 80012e6:	4a13      	ldr	r2, [pc, #76]	@ (8001334 <MX_I2C2_Init+0x54>)
 80012e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <MX_I2C2_Init+0x50>)
 80012ec:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <MX_I2C2_Init+0x58>)
 80012ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <MX_I2C2_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <MX_I2C2_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <MX_I2C2_Init+0x50>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001302:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <MX_I2C2_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <MX_I2C2_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <MX_I2C2_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <MX_I2C2_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <MX_I2C2_Init+0x50>)
 800131e:	f000 ff2f 	bl	8002180 <HAL_I2C_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001328:	f000 fa1c 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000019c 	.word	0x2000019c
 8001334:	40005800 	.word	0x40005800
 8001338:	000186a0 	.word	0x000186a0

0800133c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800135e:	4b33      	ldr	r3, [pc, #204]	@ (800142c <MX_TIM2_Init+0xf0>)
 8001360:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001364:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001366:	4b31      	ldr	r3, [pc, #196]	@ (800142c <MX_TIM2_Init+0xf0>)
 8001368:	2264      	movs	r2, #100	@ 0x64
 800136a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <MX_TIM2_Init+0xf0>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001372:	4b2e      	ldr	r3, [pc, #184]	@ (800142c <MX_TIM2_Init+0xf0>)
 8001374:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001378:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <MX_TIM2_Init+0xf0>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001380:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <MX_TIM2_Init+0xf0>)
 8001382:	2280      	movs	r2, #128	@ 0x80
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001386:	4829      	ldr	r0, [pc, #164]	@ (800142c <MX_TIM2_Init+0xf0>)
 8001388:	f002 ffe6 	bl	8004358 <HAL_TIM_PWM_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001392:	f000 f9e7 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	4619      	mov	r1, r3
 80013a4:	4821      	ldr	r0, [pc, #132]	@ (800142c <MX_TIM2_Init+0xf0>)
 80013a6:	f003 fbab 	bl	8004b00 <HAL_TIMEx_MasterConfigSynchronization>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013b0:	f000 f9d8 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b4:	2360      	movs	r3, #96	@ 0x60
 80013b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	4619      	mov	r1, r3
 80013ca:	4818      	ldr	r0, [pc, #96]	@ (800142c <MX_TIM2_Init+0xf0>)
 80013cc:	f003 f8be 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013d6:	f000 f9c5 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2204      	movs	r2, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4812      	ldr	r0, [pc, #72]	@ (800142c <MX_TIM2_Init+0xf0>)
 80013e2:	f003 f8b3 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013ec:	f000 f9ba 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2208      	movs	r2, #8
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_TIM2_Init+0xf0>)
 80013f8:	f003 f8a8 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001402:	f000 f9af 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	220c      	movs	r2, #12
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	@ (800142c <MX_TIM2_Init+0xf0>)
 800140e:	f003 f89d 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001418:	f000 f9a4 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800141c:	4803      	ldr	r0, [pc, #12]	@ (800142c <MX_TIM2_Init+0xf0>)
 800141e:	f000 fa5d 	bl	80018dc <HAL_TIM_MspPostInit>

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	@ 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200001f0 	.word	0x200001f0

08001430 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001452:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 8001454:	4a27      	ldr	r2, [pc, #156]	@ (80014f4 <MX_TIM3_Init+0xc4>)
 8001456:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001458:	4b25      	ldr	r3, [pc, #148]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001464:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 8001466:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800146a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001478:	481d      	ldr	r0, [pc, #116]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 800147a:	f002 ff6d 	bl	8004358 <HAL_TIM_PWM_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001484:	f000 f96e 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	4619      	mov	r1, r3
 8001496:	4816      	ldr	r0, [pc, #88]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 8001498:	f003 fb32 	bl	8004b00 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014a2:	f000 f95f 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a6:	2360      	movs	r3, #96	@ 0x60
 80014a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 80014be:	f003 f845 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014c8:	f000 f94c 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2204      	movs	r2, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 80014d4:	f003 f83a 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014de:	f000 f941 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014e2:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <MX_TIM3_Init+0xc0>)
 80014e4:	f000 f9fa 	bl	80018dc <HAL_TIM_MspPostInit>

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	@ 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000238 	.word	0x20000238
 80014f4:	40000400 	.word	0x40000400

080014f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151a:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <MX_TIM4_Init+0xec>)
 800151c:	4a32      	ldr	r2, [pc, #200]	@ (80015e8 <MX_TIM4_Init+0xf0>)
 800151e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 8001520:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <MX_TIM4_Init+0xec>)
 8001522:	2264      	movs	r2, #100	@ 0x64
 8001524:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <MX_TIM4_Init+0xec>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800152c:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <MX_TIM4_Init+0xec>)
 800152e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001532:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <MX_TIM4_Init+0xec>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800153a:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <MX_TIM4_Init+0xec>)
 800153c:	2280      	movs	r2, #128	@ 0x80
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001540:	4828      	ldr	r0, [pc, #160]	@ (80015e4 <MX_TIM4_Init+0xec>)
 8001542:	f002 ff09 	bl	8004358 <HAL_TIM_PWM_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800154c:	f000 f90a 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	4619      	mov	r1, r3
 800155e:	4821      	ldr	r0, [pc, #132]	@ (80015e4 <MX_TIM4_Init+0xec>)
 8001560:	f003 face 	bl	8004b00 <HAL_TIMEx_MasterConfigSynchronization>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800156a:	f000 f8fb 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156e:	2360      	movs	r3, #96	@ 0x60
 8001570:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	4619      	mov	r1, r3
 8001584:	4817      	ldr	r0, [pc, #92]	@ (80015e4 <MX_TIM4_Init+0xec>)
 8001586:	f002 ffe1 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001590:	f000 f8e8 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2204      	movs	r2, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4812      	ldr	r0, [pc, #72]	@ (80015e4 <MX_TIM4_Init+0xec>)
 800159c:	f002 ffd6 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015a6:	f000 f8dd 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2208      	movs	r2, #8
 80015ae:	4619      	mov	r1, r3
 80015b0:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <MX_TIM4_Init+0xec>)
 80015b2:	f002 ffcb 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80015bc:	f000 f8d2 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	220c      	movs	r2, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <MX_TIM4_Init+0xec>)
 80015c8:	f002 ffc0 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80015d2:	f000 f8c7 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015d6:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <MX_TIM4_Init+0xec>)
 80015d8:	f000 f980 	bl	80018dc <HAL_TIM_MspPostInit>

}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	@ 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000280 	.word	0x20000280
 80015e8:	40000800 	.word	0x40000800

080015ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <MX_USART1_UART_Init+0x50>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 8001624:	f003 fad2 	bl	8004bcc <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800162e:	f000 f899 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002c8 	.word	0x200002c8
 800163c:	40013800 	.word	0x40013800

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001654:	4b3f      	ldr	r3, [pc, #252]	@ (8001754 <MX_GPIO_Init+0x114>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a3e      	ldr	r2, [pc, #248]	@ (8001754 <MX_GPIO_Init+0x114>)
 800165a:	f043 0320 	orr.w	r3, r3, #32
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b3c      	ldr	r3, [pc, #240]	@ (8001754 <MX_GPIO_Init+0x114>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166c:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <MX_GPIO_Init+0x114>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a38      	ldr	r2, [pc, #224]	@ (8001754 <MX_GPIO_Init+0x114>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b36      	ldr	r3, [pc, #216]	@ (8001754 <MX_GPIO_Init+0x114>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <MX_GPIO_Init+0x114>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a32      	ldr	r2, [pc, #200]	@ (8001754 <MX_GPIO_Init+0x114>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <MX_GPIO_Init+0x114>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b2d      	ldr	r3, [pc, #180]	@ (8001754 <MX_GPIO_Init+0x114>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001754 <MX_GPIO_Init+0x114>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <MX_GPIO_Init+0x114>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOSFET_2_B_H_Pin|MOSFET_2_A_H_Pin|MOSFET_1_B_H_Pin|MOSFET_1_A_H_Pin
 80016b4:	2200      	movs	r2, #0
 80016b6:	f240 210f 	movw	r1, #527	@ 0x20f
 80016ba:	4827      	ldr	r0, [pc, #156]	@ (8001758 <MX_GPIO_Init+0x118>)
 80016bc:	f000 fd48 	bl	8002150 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOSFET_4_B_H_Pin|MOSFET_4_A_H_Pin|MOSFET_3_B_H_Pin|MOSFET_3_A_H_Pin
 80016c0:	2200      	movs	r2, #0
 80016c2:	f24f 0120 	movw	r1, #61472	@ 0xf020
 80016c6:	4825      	ldr	r0, [pc, #148]	@ (800175c <MX_GPIO_Init+0x11c>)
 80016c8:	f000 fd42 	bl	8002150 <HAL_GPIO_WritePin>
                          |FREN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MOSFET_2_B_H_Pin MOSFET_2_A_H_Pin MOSFET_1_B_H_Pin MOSFET_1_A_H_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = MOSFET_2_B_H_Pin|MOSFET_2_A_H_Pin|MOSFET_1_B_H_Pin|MOSFET_1_A_H_Pin
 80016cc:	f240 230f 	movw	r3, #527	@ 0x20f
 80016d0:	613b      	str	r3, [r7, #16]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2302      	movs	r3, #2
 80016dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	4619      	mov	r1, r3
 80016e4:	481c      	ldr	r0, [pc, #112]	@ (8001758 <MX_GPIO_Init+0x118>)
 80016e6:	f000 fbaf 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ea:	2303      	movs	r3, #3
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ee:	2303      	movs	r3, #3
 80016f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4619      	mov	r1, r3
 80016f8:	4818      	ldr	r0, [pc, #96]	@ (800175c <MX_GPIO_Init+0x11c>)
 80016fa:	f000 fba5 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_BTN_Pin SONAR_DATA_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin|SONAR_DATA_Pin;
 80016fe:	2314      	movs	r3, #20
 8001700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4619      	mov	r1, r3
 8001710:	4812      	ldr	r0, [pc, #72]	@ (800175c <MX_GPIO_Init+0x11c>)
 8001712:	f000 fb99 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOSFET_4_B_H_Pin MOSFET_4_A_H_Pin MOSFET_3_B_H_Pin MOSFET_3_A_H_Pin
                           FREN_Pin */
  GPIO_InitStruct.Pin = MOSFET_4_B_H_Pin|MOSFET_4_A_H_Pin|MOSFET_3_B_H_Pin|MOSFET_3_A_H_Pin
 8001716:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800171a:	613b      	str	r3, [r7, #16]
                          |FREN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2302      	movs	r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4619      	mov	r1, r3
 800172e:	480b      	ldr	r0, [pc, #44]	@ (800175c <MX_GPIO_Init+0x11c>)
 8001730:	f000 fb8a 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001734:	2308      	movs	r3, #8
 8001736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_GPIO_Init+0x120>)
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <MX_GPIO_Init+0x11c>)
 8001748:	f000 fb7e 	bl	8001e48 <HAL_GPIO_Init>

}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	40011000 	.word	0x40011000
 800175c:	40010c00 	.word	0x40010c00
 8001760:	10110000 	.word	0x10110000

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <Error_Handler+0x8>

08001770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_MspInit+0x5c>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <HAL_MspInit+0x5c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_MspInit+0x5c>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <HAL_MspInit+0x5c>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a0e      	ldr	r2, [pc, #56]	@ (80017cc <HAL_MspInit+0x5c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <HAL_MspInit+0x5c>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_MspInit+0x60>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4a04      	ldr	r2, [pc, #16]	@ (80017d0 <HAL_MspInit+0x60>)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000

080017d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a16      	ldr	r2, [pc, #88]	@ (8001848 <HAL_I2C_MspInit+0x74>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d124      	bne.n	800183e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_I2C_MspInit+0x78>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a14      	ldr	r2, [pc, #80]	@ (800184c <HAL_I2C_MspInit+0x78>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_I2C_MspInit+0x78>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800180c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001810:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	4619      	mov	r1, r3
 8001820:	480b      	ldr	r0, [pc, #44]	@ (8001850 <HAL_I2C_MspInit+0x7c>)
 8001822:	f000 fb11 	bl	8001e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_I2C_MspInit+0x78>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a08      	ldr	r2, [pc, #32]	@ (800184c <HAL_I2C_MspInit+0x78>)
 800182c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_I2C_MspInit+0x78>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40005800 	.word	0x40005800
 800184c:	40021000 	.word	0x40021000
 8001850:	40010c00 	.word	0x40010c00

08001854 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001864:	d10c      	bne.n	8001880 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <HAL_TIM_PWM_MspInit+0x7c>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <HAL_TIM_PWM_MspInit+0x7c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <HAL_TIM_PWM_MspInit+0x7c>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800187e:	e022      	b.n	80018c6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <HAL_TIM_PWM_MspInit+0x80>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10c      	bne.n	80018a4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <HAL_TIM_PWM_MspInit+0x7c>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a10      	ldr	r2, [pc, #64]	@ (80018d0 <HAL_TIM_PWM_MspInit+0x7c>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <HAL_TIM_PWM_MspInit+0x7c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
}
 80018a2:	e010      	b.n	80018c6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0b      	ldr	r2, [pc, #44]	@ (80018d8 <HAL_TIM_PWM_MspInit+0x84>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10b      	bne.n	80018c6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ae:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <HAL_TIM_PWM_MspInit+0x7c>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a07      	ldr	r2, [pc, #28]	@ (80018d0 <HAL_TIM_PWM_MspInit+0x7c>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <HAL_TIM_PWM_MspInit+0x7c>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40000400 	.word	0x40000400
 80018d8:	40000800 	.word	0x40000800

080018dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018fa:	d118      	bne.n	800192e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b2c      	ldr	r3, [pc, #176]	@ (80019b0 <HAL_TIM_MspPostInit+0xd4>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a2b      	ldr	r2, [pc, #172]	@ (80019b0 <HAL_TIM_MspPostInit+0xd4>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b29      	ldr	r3, [pc, #164]	@ (80019b0 <HAL_TIM_MspPostInit+0xd4>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001914:	230f      	movs	r3, #15
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2302      	movs	r3, #2
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	4619      	mov	r1, r3
 8001926:	4823      	ldr	r0, [pc, #140]	@ (80019b4 <HAL_TIM_MspPostInit+0xd8>)
 8001928:	f000 fa8e 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800192c:	e03b      	b.n	80019a6 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a21      	ldr	r2, [pc, #132]	@ (80019b8 <HAL_TIM_MspPostInit+0xdc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d118      	bne.n	800196a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <HAL_TIM_MspPostInit+0xd4>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a1c      	ldr	r2, [pc, #112]	@ (80019b0 <HAL_TIM_MspPostInit+0xd4>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <HAL_TIM_MspPostInit+0xd4>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001950:	23c0      	movs	r3, #192	@ 0xc0
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2302      	movs	r3, #2
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	4619      	mov	r1, r3
 8001962:	4814      	ldr	r0, [pc, #80]	@ (80019b4 <HAL_TIM_MspPostInit+0xd8>)
 8001964:	f000 fa70 	bl	8001e48 <HAL_GPIO_Init>
}
 8001968:	e01d      	b.n	80019a6 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM4)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a13      	ldr	r2, [pc, #76]	@ (80019bc <HAL_TIM_MspPostInit+0xe0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d118      	bne.n	80019a6 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <HAL_TIM_MspPostInit+0xd4>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a0d      	ldr	r2, [pc, #52]	@ (80019b0 <HAL_TIM_MspPostInit+0xd4>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <HAL_TIM_MspPostInit+0xd4>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800198c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2302      	movs	r3, #2
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	4619      	mov	r1, r3
 80019a0:	4807      	ldr	r0, [pc, #28]	@ (80019c0 <HAL_TIM_MspPostInit+0xe4>)
 80019a2:	f000 fa51 	bl	8001e48 <HAL_GPIO_Init>
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	@ 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010800 	.word	0x40010800
 80019b8:	40000400 	.word	0x40000400
 80019bc:	40000800 	.word	0x40000800
 80019c0:	40010c00 	.word	0x40010c00

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a1c      	ldr	r2, [pc, #112]	@ (8001a50 <HAL_UART_MspInit+0x8c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d131      	bne.n	8001a48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_UART_MspInit+0x90>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a54 <HAL_UART_MspInit+0x90>)
 80019ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_UART_MspInit+0x90>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_UART_MspInit+0x90>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a14      	ldr	r2, [pc, #80]	@ (8001a54 <HAL_UART_MspInit+0x90>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_UART_MspInit+0x90>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	4619      	mov	r1, r3
 8001a28:	480b      	ldr	r0, [pc, #44]	@ (8001a58 <HAL_UART_MspInit+0x94>)
 8001a2a:	f000 fa0d 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <HAL_UART_MspInit+0x94>)
 8001a44:	f000 fa00 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40013800 	.word	0x40013800
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010800 	.word	0x40010800

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <NMI_Handler+0x4>

08001a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <MemManage_Handler+0x4>

08001a74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aac:	f000 f87e 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <OTG_FS_IRQHandler+0x10>)
 8001aba:	f000 fde4 	bl	8002686 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20001ecc 	.word	0x20001ecc

08001ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad4:	f7ff fff8 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad8:	480b      	ldr	r0, [pc, #44]	@ (8001b08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ada:	490c      	ldr	r1, [pc, #48]	@ (8001b0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001adc:	4a0c      	ldr	r2, [pc, #48]	@ (8001b10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a09      	ldr	r2, [pc, #36]	@ (8001b14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001af0:	4c09      	ldr	r4, [pc, #36]	@ (8001b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001afe:	f006 fbdd 	bl	80082bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b02:	f7ff fae1 	bl	80010c8 <main>
  bx lr
 8001b06:	4770      	bx	lr
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001b10:	080085ac 	.word	0x080085ac
  ldr r2, =_sbss
 8001b14:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001b18:	200025f0 	.word	0x200025f0

08001b1c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC1_2_IRQHandler>
	...

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <HAL_Init+0x28>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	@ (8001b48 <HAL_Init+0x28>)
 8001b2a:	f043 0310 	orr.w	r3, r3, #16
 8001b2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f947 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	200f      	movs	r0, #15
 8001b38:	f000 f808 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fe18 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40022000 	.word	0x40022000

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_InitTick+0x54>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_InitTick+0x58>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f95f 	bl	8001e2e <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00e      	b.n	8001b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d80a      	bhi.n	8001b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b88:	f000 f927 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ba8 <HAL_InitTick+0x5c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000008 	.word	0x20000008

08001bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_IncTick+0x1c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_IncTick+0x20>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a03      	ldr	r2, [pc, #12]	@ (8001bcc <HAL_IncTick+0x20>)
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	2000000c 	.word	0x2000000c
 8001bcc:	20001230 	.word	0x20001230

08001bd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	@ (8001be0 <HAL_GetTick+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20001230 	.word	0x20001230

08001be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff fff0 	bl	8001bd0 <HAL_GetTick>
 8001bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bfc:	d005      	beq.n	8001c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_Delay+0x44>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c0a:	bf00      	nop
 8001c0c:	f7ff ffe0 	bl	8001bd0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d8f7      	bhi.n	8001c0c <HAL_Delay+0x28>
  {
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000000c 	.word	0x2000000c

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	@ (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4906      	ldr	r1, [pc, #24]	@ (8001cc4 <__NVIC_EnableIRQ+0x34>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	@ (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	@ (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
         );
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	@ 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001da4:	f7ff ff90 	bl	8001cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff2d 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff42 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff90 	bl	8001d1c <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5f 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff35 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b08b      	sub	sp, #44	@ 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	e169      	b.n	8002130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8158 	bne.w	800212a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a9a      	ldr	r2, [pc, #616]	@ (80020e8 <HAL_GPIO_Init+0x2a0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d05e      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e84:	4a98      	ldr	r2, [pc, #608]	@ (80020e8 <HAL_GPIO_Init+0x2a0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d875      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e8a:	4a98      	ldr	r2, [pc, #608]	@ (80020ec <HAL_GPIO_Init+0x2a4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d058      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e90:	4a96      	ldr	r2, [pc, #600]	@ (80020ec <HAL_GPIO_Init+0x2a4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d86f      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e96:	4a96      	ldr	r2, [pc, #600]	@ (80020f0 <HAL_GPIO_Init+0x2a8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d052      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a94      	ldr	r2, [pc, #592]	@ (80020f0 <HAL_GPIO_Init+0x2a8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d869      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ea2:	4a94      	ldr	r2, [pc, #592]	@ (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d04c      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a92      	ldr	r2, [pc, #584]	@ (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d863      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eae:	4a92      	ldr	r2, [pc, #584]	@ (80020f8 <HAL_GPIO_Init+0x2b0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d046      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001eb4:	4a90      	ldr	r2, [pc, #576]	@ (80020f8 <HAL_GPIO_Init+0x2b0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d85d      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d82a      	bhi.n	8001f14 <HAL_GPIO_Init+0xcc>
 8001ebe:	2b12      	cmp	r3, #18
 8001ec0:	d859      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <HAL_GPIO_Init+0x80>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f1d 	.word	0x08001f1d
 8001ed0:	08001f2f 	.word	0x08001f2f
 8001ed4:	08001f71 	.word	0x08001f71
 8001ed8:	08001f77 	.word	0x08001f77
 8001edc:	08001f77 	.word	0x08001f77
 8001ee0:	08001f77 	.word	0x08001f77
 8001ee4:	08001f77 	.word	0x08001f77
 8001ee8:	08001f77 	.word	0x08001f77
 8001eec:	08001f77 	.word	0x08001f77
 8001ef0:	08001f77 	.word	0x08001f77
 8001ef4:	08001f77 	.word	0x08001f77
 8001ef8:	08001f77 	.word	0x08001f77
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f77 	.word	0x08001f77
 8001f04:	08001f77 	.word	0x08001f77
 8001f08:	08001f77 	.word	0x08001f77
 8001f0c:	08001f25 	.word	0x08001f25
 8001f10:	08001f39 	.word	0x08001f39
 8001f14:	4a79      	ldr	r2, [pc, #484]	@ (80020fc <HAL_GPIO_Init+0x2b4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f1a:	e02c      	b.n	8001f76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e029      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e024      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	3308      	adds	r3, #8
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e01f      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	330c      	adds	r3, #12
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e01a      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e013      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	611a      	str	r2, [r3, #16]
          break;
 8001f62:	e009      	b.n	8001f78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f64:	2308      	movs	r3, #8
 8001f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	615a      	str	r2, [r3, #20]
          break;
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          break;
 8001f76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2bff      	cmp	r3, #255	@ 0xff
 8001f7c:	d801      	bhi.n	8001f82 <HAL_GPIO_Init+0x13a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	e001      	b.n	8001f86 <HAL_GPIO_Init+0x13e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2bff      	cmp	r3, #255	@ 0xff
 8001f8c:	d802      	bhi.n	8001f94 <HAL_GPIO_Init+0x14c>
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x152>
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	3b08      	subs	r3, #8
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80b1 	beq.w	800212a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002100 <HAL_GPIO_Init+0x2b8>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002100 <HAL_GPIO_Init+0x2b8>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002100 <HAL_GPIO_Init+0x2b8>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fe0:	4a48      	ldr	r2, [pc, #288]	@ (8002104 <HAL_GPIO_Init+0x2bc>)
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a40      	ldr	r2, [pc, #256]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <HAL_GPIO_Init+0x1ec>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3f      	ldr	r2, [pc, #252]	@ (800210c <HAL_GPIO_Init+0x2c4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00d      	beq.n	8002030 <HAL_GPIO_Init+0x1e8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3e      	ldr	r2, [pc, #248]	@ (8002110 <HAL_GPIO_Init+0x2c8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <HAL_GPIO_Init+0x1e4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3d      	ldr	r2, [pc, #244]	@ (8002114 <HAL_GPIO_Init+0x2cc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d101      	bne.n	8002028 <HAL_GPIO_Init+0x1e0>
 8002024:	2303      	movs	r3, #3
 8002026:	e006      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 8002028:	2304      	movs	r3, #4
 800202a:	e004      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 800202c:	2302      	movs	r3, #2
 800202e:	e002      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 8002034:	2300      	movs	r3, #0
 8002036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002038:	f002 0203 	and.w	r2, r2, #3
 800203c:	0092      	lsls	r2, r2, #2
 800203e:	4093      	lsls	r3, r2
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002046:	492f      	ldr	r1, [pc, #188]	@ (8002104 <HAL_GPIO_Init+0x2bc>)
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002060:	4b2d      	ldr	r3, [pc, #180]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	492c      	ldr	r1, [pc, #176]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800206e:	4b2a      	ldr	r3, [pc, #168]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	43db      	mvns	r3, r3
 8002076:	4928      	ldr	r1, [pc, #160]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 8002078:	4013      	ands	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002088:	4b23      	ldr	r3, [pc, #140]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	4922      	ldr	r1, [pc, #136]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	60cb      	str	r3, [r1, #12]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002096:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	491e      	ldr	r1, [pc, #120]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b0:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4918      	ldr	r1, [pc, #96]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4914      	ldr	r1, [pc, #80]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d021      	beq.n	800211c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	490e      	ldr	r1, [pc, #56]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]
 80020e4:	e021      	b.n	800212a <HAL_GPIO_Init+0x2e2>
 80020e6:	bf00      	nop
 80020e8:	10320000 	.word	0x10320000
 80020ec:	10310000 	.word	0x10310000
 80020f0:	10220000 	.word	0x10220000
 80020f4:	10210000 	.word	0x10210000
 80020f8:	10120000 	.word	0x10120000
 80020fc:	10110000 	.word	0x10110000
 8002100:	40021000 	.word	0x40021000
 8002104:	40010000 	.word	0x40010000
 8002108:	40010800 	.word	0x40010800
 800210c:	40010c00 	.word	0x40010c00
 8002110:	40011000 	.word	0x40011000
 8002114:	40011400 	.word	0x40011400
 8002118:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_GPIO_Init+0x304>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	43db      	mvns	r3, r3
 8002124:	4909      	ldr	r1, [pc, #36]	@ (800214c <HAL_GPIO_Init+0x304>)
 8002126:	4013      	ands	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	3301      	adds	r3, #1
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	f47f ae8e 	bne.w	8001e5c <HAL_GPIO_Init+0x14>
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	372c      	adds	r7, #44	@ 0x2c
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	40010400 	.word	0x40010400

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e12b      	b.n	80023ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fb14 	bl	80017d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	@ 0x24
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e4:	f001 ff40 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80021e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4a81      	ldr	r2, [pc, #516]	@ (80023f4 <HAL_I2C_Init+0x274>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d807      	bhi.n	8002204 <HAL_I2C_Init+0x84>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a80      	ldr	r2, [pc, #512]	@ (80023f8 <HAL_I2C_Init+0x278>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	bf94      	ite	ls
 80021fc:	2301      	movls	r3, #1
 80021fe:	2300      	movhi	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e006      	b.n	8002212 <HAL_I2C_Init+0x92>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a7d      	ldr	r2, [pc, #500]	@ (80023fc <HAL_I2C_Init+0x27c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	bf94      	ite	ls
 800220c:	2301      	movls	r3, #1
 800220e:	2300      	movhi	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0e7      	b.n	80023ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a78      	ldr	r2, [pc, #480]	@ (8002400 <HAL_I2C_Init+0x280>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a6a      	ldr	r2, [pc, #424]	@ (80023f4 <HAL_I2C_Init+0x274>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d802      	bhi.n	8002254 <HAL_I2C_Init+0xd4>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3301      	adds	r3, #1
 8002252:	e009      	b.n	8002268 <HAL_I2C_Init+0xe8>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	4a69      	ldr	r2, [pc, #420]	@ (8002404 <HAL_I2C_Init+0x284>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	3301      	adds	r3, #1
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	430b      	orrs	r3, r1
 800226e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800227a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	495c      	ldr	r1, [pc, #368]	@ (80023f4 <HAL_I2C_Init+0x274>)
 8002284:	428b      	cmp	r3, r1
 8002286:	d819      	bhi.n	80022bc <HAL_I2C_Init+0x13c>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e59      	subs	r1, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fbb1 f3f3 	udiv	r3, r1, r3
 8002296:	1c59      	adds	r1, r3, #1
 8002298:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800229c:	400b      	ands	r3, r1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_I2C_Init+0x138>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1e59      	subs	r1, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b6:	e051      	b.n	800235c <HAL_I2C_Init+0x1dc>
 80022b8:	2304      	movs	r3, #4
 80022ba:	e04f      	b.n	800235c <HAL_I2C_Init+0x1dc>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d111      	bne.n	80022e8 <HAL_I2C_Init+0x168>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e58      	subs	r0, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e012      	b.n	800230e <HAL_I2C_Init+0x18e>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	0099      	lsls	r1, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x196>
 8002312:	2301      	movs	r3, #1
 8002314:	e022      	b.n	800235c <HAL_I2C_Init+0x1dc>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10e      	bne.n	800233c <HAL_I2C_Init+0x1bc>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e58      	subs	r0, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	440b      	add	r3, r1
 800232c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800233a:	e00f      	b.n	800235c <HAL_I2C_Init+0x1dc>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e58      	subs	r0, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	0099      	lsls	r1, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	6809      	ldr	r1, [r1, #0]
 8002360:	4313      	orrs	r3, r2
 8002362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800238a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6911      	ldr	r1, [r2, #16]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	4311      	orrs	r1, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	430b      	orrs	r3, r1
 800239e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	000186a0 	.word	0x000186a0
 80023f8:	001e847f 	.word	0x001e847f
 80023fc:	003d08ff 	.word	0x003d08ff
 8002400:	431bde83 	.word	0x431bde83
 8002404:	10624dd3 	.word	0x10624dd3

08002408 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240a:	b08f      	sub	sp, #60	@ 0x3c
 800240c:	af0a      	add	r7, sp, #40	@ 0x28
 800240e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e10f      	b.n	800263a <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f005 fc65 	bl	8007d04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2203      	movs	r2, #3
 800243e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f002 fd63 	bl	8004f24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	687e      	ldr	r6, [r7, #4]
 8002466:	466d      	mov	r5, sp
 8002468:	f106 0410 	add.w	r4, r6, #16
 800246c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002474:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002478:	e885 0003 	stmia.w	r5, {r0, r1}
 800247c:	1d33      	adds	r3, r6, #4
 800247e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002480:	6838      	ldr	r0, [r7, #0]
 8002482:	f002 fc81 	bl	8004d88 <USB_CoreInit>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0d0      	b.n	800263a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 fd50 	bl	8004f44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e04a      	b.n	8002540 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	333d      	adds	r3, #61	@ 0x3d
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	333c      	adds	r3, #60	@ 0x3c
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	b298      	uxth	r0, r3
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3356      	adds	r3, #86	@ 0x56
 80024e6:	4602      	mov	r2, r0
 80024e8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3340      	adds	r3, #64	@ 0x40
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3344      	adds	r3, #68	@ 0x44
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3348      	adds	r3, #72	@ 0x48
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	334c      	adds	r3, #76	@ 0x4c
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	3301      	adds	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d3af      	bcc.n	80024aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e044      	b.n	80025da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	3301      	adds	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3b5      	bcc.n	8002550 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	687e      	ldr	r6, [r7, #4]
 80025ec:	466d      	mov	r5, sp
 80025ee:	f106 0410 	add.w	r4, r6, #16
 80025f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002602:	1d33      	adds	r3, r6, #4
 8002604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002606:	6838      	ldr	r0, [r7, #0]
 8002608:	f002 fce8 	bl	8004fdc <USB_DevInit>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00d      	b.n	800263a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fc72 	bl	8005f1c <USB_DevDisconnect>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002642 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_PCD_Start+0x16>
 8002654:	2302      	movs	r3, #2
 8002656:	e012      	b.n	800267e <HAL_PCD_Start+0x3c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f002 fc4d 	bl	8004f04 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 fc34 	bl	8005edc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002686:	b590      	push	{r4, r7, lr}
 8002688:	b08d      	sub	sp, #52	@ 0x34
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f003 fceb 	bl	8006078 <USB_GetMode>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 8443 	bne.w	8002f30 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fc54 	bl	8005f5c <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8439 	beq.w	8002f2e <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 fc41 	bl	8005f5c <USB_ReadInterrupts>
 80026da:	4603      	mov	r3, r0
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d107      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f002 0202 	and.w	r2, r2, #2
 80026f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 fc2f 	bl	8005f5c <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b10      	cmp	r3, #16
 8002706:	d161      	bne.n	80027cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0210 	bic.w	r2, r2, #16
 8002716:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f003 020f 	and.w	r2, r3, #15
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	0c5b      	lsrs	r3, r3, #17
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	2b02      	cmp	r3, #2
 8002742:	d124      	bne.n	800278e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d035      	beq.n	80027bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800275a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800275e:	b29b      	uxth	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	6a38      	ldr	r0, [r7, #32]
 8002764:	f003 fa6c 	bl	8005c40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002774:	441a      	add	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002786:	441a      	add	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	615a      	str	r2, [r3, #20]
 800278c:	e016      	b.n	80027bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	0c5b      	lsrs	r3, r3, #17
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	2b06      	cmp	r3, #6
 8002798:	d110      	bne.n	80027bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80027a0:	2208      	movs	r2, #8
 80027a2:	4619      	mov	r1, r3
 80027a4:	6a38      	ldr	r0, [r7, #32]
 80027a6:	f003 fa4b 	bl	8005c40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027b6:	441a      	add	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0210 	orr.w	r2, r2, #16
 80027ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 fbc3 	bl	8005f5c <USB_ReadInterrupts>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027e0:	f040 80a7 	bne.w	8002932 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fbc7 	bl	8005f80 <USB_ReadDevAllOutEpInterrupt>
 80027f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027f4:	e099      	b.n	800292a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 808e 	beq.w	800291e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f003 fbe9 	bl	8005fe4 <USB_ReadDevOutEPInterrupt>
 8002812:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00c      	beq.n	8002838 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800282a:	461a      	mov	r2, r3
 800282c:	2301      	movs	r3, #1
 800282e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002830:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fe42 	bl	80034bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800284e:	461a      	mov	r2, r3
 8002850:	2308      	movs	r3, #8
 8002852:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002854:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fe7e 	bl	8003558 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002872:	461a      	mov	r2, r3
 8002874:	2310      	movs	r3, #16
 8002876:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d030      	beq.n	80028e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288a:	2b80      	cmp	r3, #128	@ 0x80
 800288c:	d109      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800289c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	78db      	ldrb	r3, [r3, #3]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d108      	bne.n	80028d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2200      	movs	r2, #0
 80028c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	4619      	mov	r1, r3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f005 fae5 	bl	8007e9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028de:	461a      	mov	r2, r3
 80028e0:	2302      	movs	r3, #2
 80028e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d008      	beq.n	8002900 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fa:	461a      	mov	r2, r3
 80028fc:	2320      	movs	r3, #32
 80028fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800291c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	3301      	adds	r3, #1
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	f47f af62 	bne.w	80027f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fb10 	bl	8005f5c <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002942:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002946:	f040 80a4 	bne.w	8002a92 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 fb2f 	bl	8005fb2 <USB_ReadDevAllInEpInterrupt>
 8002954:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800295a:	e096      	b.n	8002a8a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 808b 	beq.w	8002a7e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f003 fb53 	bl	800601e <USB_ReadDevInEPInterrupt>
 8002978:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	2201      	movs	r2, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43db      	mvns	r3, r3
 800299e:	69f9      	ldr	r1, [r7, #28]
 80029a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80029a4:	4013      	ands	r3, r2
 80029a6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029b4:	461a      	mov	r2, r3
 80029b6:	2301      	movs	r3, #1
 80029b8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f005 f9f0 	bl	8007da6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029dc:	461a      	mov	r2, r3
 80029de:	2308      	movs	r3, #8
 80029e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029f8:	461a      	mov	r2, r3
 80029fa:	2310      	movs	r3, #16
 80029fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a14:	461a      	mov	r2, r3
 8002a16:	2340      	movs	r3, #64	@ 0x40
 8002a18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d023      	beq.n	8002a6c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a26:	6a38      	ldr	r0, [r7, #32]
 8002a28:	f002 fbfa 	bl	8005220 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	3338      	adds	r3, #56	@ 0x38
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	78db      	ldrb	r3, [r3, #3]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d108      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f005 fa33 	bl	8007ec0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a66:	461a      	mov	r2, r3
 8002a68:	2302      	movs	r3, #2
 8002a6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fc96 	bl	80033aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	3301      	adds	r3, #1
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f47f af65 	bne.w	800295c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 fa60 	bl	8005f5c <USB_ReadInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aa6:	d114      	bne.n	8002ad2 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f005 f9df 	bl	8007e80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 fa40 	bl	8005f5c <USB_ReadInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ae6:	d112      	bne.n	8002b0e <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d102      	bne.n	8002afe <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f005 f99b 	bl	8007e34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b0c:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 fa22 	bl	8005f5c <USB_ReadInterrupts>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b22:	f040 80b5 	bne.w	8002c90 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2110      	movs	r1, #16
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 fb6d 	bl	8005220 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b4a:	e046      	b.n	8002bda <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b70:	0151      	lsls	r1, r2, #5
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	440a      	add	r2, r1
 8002b76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b92:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ba4:	0151      	lsls	r1, r2, #5
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	440a      	add	r2, r1
 8002baa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bc4:	0151      	lsls	r1, r2, #5
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	440a      	add	r2, r1
 8002bca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bd2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d3b3      	bcc.n	8002b4c <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bf2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002bf6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d016      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c10:	f043 030b 	orr.w	r3, r3, #11
 8002c14:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c26:	f043 030b 	orr.w	r3, r3, #11
 8002c2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2c:	e015      	b.n	8002c5a <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c40:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002c44:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c54:	f043 030b 	orr.w	r3, r3, #11
 8002c58:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c68:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c6c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	f003 fa2c 	bl	80060d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f003 f961 	bl	8005f5c <USB_ReadInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca4:	d124      	bne.n	8002cf0 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 f9f1 	bl	8006092 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 fb2f 	bl	8005318 <USB_GetDevSpeed>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681c      	ldr	r4, [r3, #0]
 8002cc6:	f001 f9c5 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8002cca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f002 f879 	bl	8004dcc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f005 f88b 	bl	8007df6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 f931 	bl	8005f5c <USB_ReadInterrupts>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d10a      	bne.n	8002d1a <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f005 f868 	bl	8007dda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f002 0208 	and.w	r2, r2, #8
 8002d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 f91c 	bl	8005f5c <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2a:	2b80      	cmp	r3, #128	@ 0x80
 8002d2c:	d122      	bne.n	8002d74 <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3e:	e014      	b.n	8002d6a <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 faf2 	bl	8003348 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	3301      	adds	r3, #1
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d3e5      	bcc.n	8002d40 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 f8ef 	bl	8005f5c <USB_ReadInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d88:	d13b      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d8e:	e02b      	b.n	8002de8 <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3340      	adds	r3, #64	@ 0x40
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d115      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002db6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	da12      	bge.n	8002de2 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	333f      	adds	r3, #63	@ 0x3f
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fab3 	bl	8003348 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	3301      	adds	r3, #1
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d3ce      	bcc.n	8002d90 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 f8a8 	bl	8005f5c <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e16:	d155      	bne.n	8002ec4 <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e18:	2301      	movs	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1c:	e045      	b.n	8002eaa <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d12e      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	da2b      	bge.n	8002ea4 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8002e58:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d121      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ea0:	6053      	str	r3, [r2, #4]
            break;
 8002ea2:	e007      	b.n	8002eb4 <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d3b4      	bcc.n	8002e1e <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 f847 	bl	8005f5c <USB_ReadInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f005 f802 	bl	8007ee4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f003 f831 	bl	8005f5c <USB_ReadInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d115      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f004 fff2 	bl	8007f00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6859      	ldr	r1, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	e000      	b.n	8002f30 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8002f2e:	bf00      	nop
    }
  }
}
 8002f30:	3734      	adds	r7, #52	@ 0x34
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}

08002f36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_PCD_SetAddress+0x1a>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e013      	b.n	8002f78 <HAL_PCD_SetAddress+0x42>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f002 ff92 	bl	8005e92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	4608      	mov	r0, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	70fb      	strb	r3, [r7, #3]
 8002f92:	460b      	mov	r3, r1
 8002f94:	803b      	strh	r3, [r7, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	da0f      	bge.n	8002fc6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	3338      	adds	r3, #56	@ 0x38
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	705a      	strb	r2, [r3, #1]
 8002fc4:	e00f      	b.n	8002fe6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 020f 	and.w	r2, r3, #15
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	3304      	adds	r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ff2:	883a      	ldrh	r2, [r7, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	78ba      	ldrb	r2, [r7, #2]
 8002ffc:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d004      	beq.n	8003010 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003010:	78bb      	ldrb	r3, [r7, #2]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d102      	bne.n	800301c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_PCD_EP_Open+0xaa>
 8003026:	2302      	movs	r3, #2
 8003028:	e00e      	b.n	8003048 <HAL_PCD_EP_Open+0xc8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68f9      	ldr	r1, [r7, #12]
 8003038:	4618      	mov	r0, r3
 800303a:	f002 f98b 	bl	8005354 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003046:	7afb      	ldrb	r3, [r7, #11]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800305c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003060:	2b00      	cmp	r3, #0
 8003062:	da0f      	bge.n	8003084 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 020f 	and.w	r2, r3, #15
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	3338      	adds	r3, #56	@ 0x38
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4413      	add	r3, r2
 8003078:	3304      	adds	r3, #4
 800307a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	705a      	strb	r2, [r3, #1]
 8003082:	e00f      	b.n	80030a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 020f 	and.w	r2, r3, #15
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_PCD_EP_Close+0x6e>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e00e      	b.n	80030dc <HAL_PCD_EP_Close+0x8c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f002 f9c7 	bl	8005460 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	460b      	mov	r3, r1
 80030f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f4:	7afb      	ldrb	r3, [r7, #11]
 80030f6:	f003 020f 	and.w	r2, r3, #15
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	3304      	adds	r3, #4
 800310c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2200      	movs	r2, #0
 8003124:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003126:	7afb      	ldrb	r3, [r7, #11]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	b2da      	uxtb	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6979      	ldr	r1, [r7, #20]
 8003138:	4618      	mov	r0, r3
 800313a:	f002 fa6d 	bl	8005618 <USB_EPStartXfer>

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	460b      	mov	r3, r1
 8003184:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	f003 020f 	and.w	r2, r3, #15
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	3338      	adds	r3, #56	@ 0x38
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2200      	movs	r2, #0
 80031ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2201      	movs	r2, #1
 80031b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6979      	ldr	r1, [r7, #20]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f002 fa25 	bl	8005618 <USB_EPStartXfer>

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 020f 	and.w	r2, r3, #15
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d901      	bls.n	80031f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e04e      	b.n	8003294 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	da0f      	bge.n	800321e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	3338      	adds	r3, #56	@ 0x38
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	3304      	adds	r3, #4
 8003214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	705a      	strb	r2, [r3, #1]
 800321c:	e00d      	b.n	800323a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	4413      	add	r3, r2
 8003230:	3304      	adds	r3, #4
 8003232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_PCD_EP_SetStall+0x82>
 8003256:	2302      	movs	r3, #2
 8003258:	e01c      	b.n	8003294 <HAL_PCD_EP_SetStall+0xbc>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68f9      	ldr	r1, [r7, #12]
 8003268:	4618      	mov	r0, r3
 800326a:	f002 fd40 	bl	8005cee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	2b00      	cmp	r3, #0
 8003276:	d108      	bne.n	800328a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f002 ff27 	bl	80060d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	f003 020f 	and.w	r2, r3, #15
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d901      	bls.n	80032ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e042      	b.n	8003340 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	da0f      	bge.n	80032e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	3338      	adds	r3, #56	@ 0x38
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	3304      	adds	r3, #4
 80032d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	705a      	strb	r2, [r3, #1]
 80032e0:	e00f      	b.n	8003302 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 020f 	and.w	r2, r3, #15
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	3304      	adds	r3, #4
 80032fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_PCD_EP_ClrStall+0x86>
 800331e:	2302      	movs	r3, #2
 8003320:	e00e      	b.n	8003340 <HAL_PCD_EP_ClrStall+0xa4>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68f9      	ldr	r1, [r7, #12]
 8003330:	4618      	mov	r0, r3
 8003332:	f002 fd49 	bl	8005dc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003358:	2b00      	cmp	r3, #0
 800335a:	da0c      	bge.n	8003376 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	f003 020f 	and.w	r2, r3, #15
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	3338      	adds	r3, #56	@ 0x38
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	3304      	adds	r3, #4
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e00c      	b.n	8003390 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 020f 	and.w	r2, r3, #15
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	3304      	adds	r3, #4
 800338e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68f9      	ldr	r1, [r7, #12]
 8003396:	4618      	mov	r0, r3
 8003398:	f002 fb70 	bl	8005a7c <USB_EPStopXfer>
 800339c:	4603      	mov	r3, r0
 800339e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033a0:	7afb      	ldrb	r3, [r7, #11]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b088      	sub	sp, #32
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	3338      	adds	r3, #56	@ 0x38
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	3304      	adds	r3, #4
 80033d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d901      	bls.n	80033e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e067      	b.n	80034b2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d902      	bls.n	80033fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3303      	adds	r3, #3
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003406:	e026      	b.n	8003456 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	429a      	cmp	r2, r3
 800341c:	d902      	bls.n	8003424 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3303      	adds	r3, #3
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	68d9      	ldr	r1, [r3, #12]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	b29b      	uxth	r3, r3
 8003438:	6978      	ldr	r0, [r7, #20]
 800343a:	f002 fbc8 	bl	8005bce <USB_WritePacket>

    ep->xfer_buff  += len;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	441a      	add	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	441a      	add	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	429a      	cmp	r2, r3
 800346a:	d809      	bhi.n	8003480 <PCD_WriteEmptyTxFifo+0xd6>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003474:	429a      	cmp	r2, r3
 8003476:	d203      	bcs.n	8003480 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1c3      	bne.n	8003408 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	429a      	cmp	r2, r3
 800348a:	d811      	bhi.n	80034b0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	2201      	movs	r2, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	6939      	ldr	r1, [r7, #16]
 80034a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034ac:	4013      	ands	r3, r2
 80034ae:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	333c      	adds	r3, #60	@ 0x3c
 80034d4:	3304      	adds	r3, #4
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a19      	ldr	r2, [pc, #100]	@ (8003554 <PCD_EP_OutXfrComplete_int+0x98>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d124      	bne.n	800353c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003508:	461a      	mov	r2, r3
 800350a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800350e:	6093      	str	r3, [r2, #8]
 8003510:	e01a      	b.n	8003548 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003528:	461a      	mov	r2, r3
 800352a:	2320      	movs	r3, #32
 800352c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	4619      	mov	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f004 fc1b 	bl	8007d70 <HAL_PCD_DataOutStageCallback>
 800353a:	e005      	b.n	8003548 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	4619      	mov	r1, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f004 fc14 	bl	8007d70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	4f54310a 	.word	0x4f54310a

08003558 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	333c      	adds	r3, #60	@ 0x3c
 8003570:	3304      	adds	r3, #4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a0c      	ldr	r2, [pc, #48]	@ (80035bc <PCD_EP_OutSetupPacket_int+0x64>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d90e      	bls.n	80035ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a4:	461a      	mov	r2, r3
 80035a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f004 fbcd 	bl	8007d4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	4f54300a 	.word	0x4f54300a

080035c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
 80035cc:	4613      	mov	r3, r2
 80035ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035de:	883b      	ldrh	r3, [r7, #0]
 80035e0:	0419      	lsls	r1, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80035ec:	e028      	b.n	8003640 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	4413      	add	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e00d      	b.n	800361e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	3340      	adds	r3, #64	@ 0x40
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	4413      	add	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	3301      	adds	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	3b01      	subs	r3, #1
 8003624:	429a      	cmp	r2, r3
 8003626:	d3ec      	bcc.n	8003602 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003628:	883b      	ldrh	r3, [r7, #0]
 800362a:	0418      	lsls	r0, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	3b01      	subs	r3, #1
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	4302      	orrs	r2, r0
 8003638:	3340      	adds	r3, #64	@ 0x40
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	887a      	ldrh	r2, [r7, #2]
 800365e:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e304      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8087 	beq.w	800379a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800368c:	4b92      	ldr	r3, [pc, #584]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 030c 	and.w	r3, r3, #12
 8003694:	2b04      	cmp	r3, #4
 8003696:	d00c      	beq.n	80036b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003698:	4b8f      	ldr	r3, [pc, #572]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d112      	bne.n	80036ca <HAL_RCC_OscConfig+0x5e>
 80036a4:	4b8c      	ldr	r3, [pc, #560]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b0:	d10b      	bne.n	80036ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b2:	4b89      	ldr	r3, [pc, #548]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d06c      	beq.n	8003798 <HAL_RCC_OscConfig+0x12c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d168      	bne.n	8003798 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e2de      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x76>
 80036d4:	4b80      	ldr	r3, [pc, #512]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a7f      	ldr	r2, [pc, #508]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	e02e      	b.n	8003740 <HAL_RCC_OscConfig+0xd4>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x98>
 80036ea:	4b7b      	ldr	r3, [pc, #492]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a7a      	ldr	r2, [pc, #488]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b78      	ldr	r3, [pc, #480]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a77      	ldr	r2, [pc, #476]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e01d      	b.n	8003740 <HAL_RCC_OscConfig+0xd4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0xbc>
 800370e:	4b72      	ldr	r3, [pc, #456]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a71      	ldr	r2, [pc, #452]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 8003714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b6f      	ldr	r3, [pc, #444]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a6e      	ldr	r2, [pc, #440]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0xd4>
 8003728:	4b6b      	ldr	r3, [pc, #428]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a6a      	ldr	r2, [pc, #424]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 800372e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b68      	ldr	r3, [pc, #416]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a67      	ldr	r2, [pc, #412]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 800373a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800373e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fe fa42 	bl	8001bd0 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe fa3e 	bl	8001bd0 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	@ 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e292      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	4b5d      	ldr	r3, [pc, #372]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0xe4>
 800376e:	e014      	b.n	800379a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fe fa2e 	bl	8001bd0 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003778:	f7fe fa2a 	bl	8001bd0 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	@ 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e27e      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	4b53      	ldr	r3, [pc, #332]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x10c>
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d063      	beq.n	800386e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037a6:	4b4c      	ldr	r3, [pc, #304]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037b2:	4b49      	ldr	r3, [pc, #292]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d11c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x18c>
 80037be:	4b46      	ldr	r3, [pc, #280]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d116      	bne.n	80037f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	4b43      	ldr	r3, [pc, #268]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_RCC_OscConfig+0x176>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e252      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e2:	4b3d      	ldr	r3, [pc, #244]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4939      	ldr	r1, [pc, #228]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f6:	e03a      	b.n	800386e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d020      	beq.n	8003842 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7fe f9e3 	bl	8001bd0 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380e:	f7fe f9df 	bl	8001bd0 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e233      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	4b2d      	ldr	r3, [pc, #180]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382c:	4b2a      	ldr	r3, [pc, #168]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4927      	ldr	r1, [pc, #156]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
 8003840:	e015      	b.n	800386e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003842:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fe f9c2 	bl	8001bd0 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003850:	f7fe f9be 	bl	8001bd0 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e212      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	4b1d      	ldr	r3, [pc, #116]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d03a      	beq.n	80038f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d019      	beq.n	80038b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003882:	4b17      	ldr	r3, [pc, #92]	@ (80038e0 <HAL_RCC_OscConfig+0x274>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003888:	f7fe f9a2 	bl	8001bd0 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003890:	f7fe f99e 	bl	8001bd0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1f2      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038ae:	2001      	movs	r0, #1
 80038b0:	f000 fc02 	bl	80040b8 <RCC_Delay>
 80038b4:	e01c      	b.n	80038f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b6:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <HAL_RCC_OscConfig+0x274>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038bc:	f7fe f988 	bl	8001bd0 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c2:	e00f      	b.n	80038e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c4:	f7fe f984 	bl	8001bd0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d908      	bls.n	80038e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e1d8      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	42420000 	.word	0x42420000
 80038e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	4b9b      	ldr	r3, [pc, #620]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e9      	bne.n	80038c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80a6 	beq.w	8003a4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003902:	4b94      	ldr	r3, [pc, #592]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10d      	bne.n	800392a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390e:	4b91      	ldr	r3, [pc, #580]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4a90      	ldr	r2, [pc, #576]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003918:	61d3      	str	r3, [r2, #28]
 800391a:	4b8e      	ldr	r3, [pc, #568]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b58 <HAL_RCC_OscConfig+0x4ec>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d118      	bne.n	8003968 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003936:	4b88      	ldr	r3, [pc, #544]	@ (8003b58 <HAL_RCC_OscConfig+0x4ec>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a87      	ldr	r2, [pc, #540]	@ (8003b58 <HAL_RCC_OscConfig+0x4ec>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003942:	f7fe f945 	bl	8001bd0 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394a:	f7fe f941 	bl	8001bd0 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b64      	cmp	r3, #100	@ 0x64
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e195      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b58 <HAL_RCC_OscConfig+0x4ec>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d106      	bne.n	800397e <HAL_RCC_OscConfig+0x312>
 8003970:	4b78      	ldr	r3, [pc, #480]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4a77      	ldr	r2, [pc, #476]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6213      	str	r3, [r2, #32]
 800397c:	e02d      	b.n	80039da <HAL_RCC_OscConfig+0x36e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x334>
 8003986:	4b73      	ldr	r3, [pc, #460]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4a72      	ldr	r2, [pc, #456]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	6213      	str	r3, [r2, #32]
 8003992:	4b70      	ldr	r3, [pc, #448]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4a6f      	ldr	r2, [pc, #444]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	6213      	str	r3, [r2, #32]
 800399e:	e01c      	b.n	80039da <HAL_RCC_OscConfig+0x36e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b05      	cmp	r3, #5
 80039a6:	d10c      	bne.n	80039c2 <HAL_RCC_OscConfig+0x356>
 80039a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4a69      	ldr	r2, [pc, #420]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	6213      	str	r3, [r2, #32]
 80039b4:	4b67      	ldr	r3, [pc, #412]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	4a66      	ldr	r2, [pc, #408]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6213      	str	r3, [r2, #32]
 80039c0:	e00b      	b.n	80039da <HAL_RCC_OscConfig+0x36e>
 80039c2:	4b64      	ldr	r3, [pc, #400]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4a63      	ldr	r2, [pc, #396]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	6213      	str	r3, [r2, #32]
 80039ce:	4b61      	ldr	r3, [pc, #388]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a60      	ldr	r2, [pc, #384]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d015      	beq.n	8003a0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e2:	f7fe f8f5 	bl	8001bd0 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fe f8f1 	bl	8001bd0 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e143      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a00:	4b54      	ldr	r3, [pc, #336]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ee      	beq.n	80039ea <HAL_RCC_OscConfig+0x37e>
 8003a0c:	e014      	b.n	8003a38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0e:	f7fe f8df 	bl	8001bd0 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a14:	e00a      	b.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a16:	f7fe f8db 	bl	8001bd0 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e12d      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2c:	4b49      	ldr	r3, [pc, #292]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ee      	bne.n	8003a16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3e:	4b45      	ldr	r3, [pc, #276]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4a44      	ldr	r2, [pc, #272]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a48:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 808c 	beq.w	8003b6c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003a54:	4b3f      	ldr	r3, [pc, #252]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a60:	d10e      	bne.n	8003a80 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003a62:	4b3c      	ldr	r3, [pc, #240]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d108      	bne.n	8003a80 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003a6e:	4b39      	ldr	r3, [pc, #228]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e103      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d14e      	bne.n	8003b26 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003a88:	4b32      	ldr	r3, [pc, #200]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d009      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003a94:	4b2f      	ldr	r3, [pc, #188]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0ef      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b5c <HAL_RCC_OscConfig+0x4f0>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7fe f88f 	bl	8001bd0 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ab6:	f7fe f88b 	bl	8001bd0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	@ 0x64
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0df      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003ac8:	4b22      	ldr	r3, [pc, #136]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae0:	491c      	ldr	r1, [pc, #112]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	4918      	ldr	r1, [pc, #96]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003af8:	4b18      	ldr	r3, [pc, #96]	@ (8003b5c <HAL_RCC_OscConfig+0x4f0>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe f867 	bl	8001bd0 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b06:	f7fe f863 	bl	8001bd0 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b64      	cmp	r3, #100	@ 0x64
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0b7      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003b18:	4b0e      	ldr	r3, [pc, #56]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x49a>
 8003b24:	e022      	b.n	8003b6c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003b26:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b54 <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003b32:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <HAL_RCC_OscConfig+0x4f0>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fe f84a 	bl	8001bd0 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003b3e:	e00f      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b40:	f7fe f846 	bl	8001bd0 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	@ 0x64
 8003b4c:	d908      	bls.n	8003b60 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e09a      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003b60:	4b4b      	ldr	r3, [pc, #300]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e9      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8088 	beq.w	8003c86 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b76:	4b46      	ldr	r3, [pc, #280]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d068      	beq.n	8003c54 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d14d      	bne.n	8003c26 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8a:	4b42      	ldr	r3, [pc, #264]	@ (8003c94 <HAL_RCC_OscConfig+0x628>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe f81e 	bl	8001bd0 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fe f81a 	bl	8001bd0 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e06e      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003baa:	4b39      	ldr	r3, [pc, #228]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bbe:	d10f      	bne.n	8003be0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003bc0:	4b33      	ldr	r3, [pc, #204]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4931      	ldr	r1, [pc, #196]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bce:	4b30      	ldr	r3, [pc, #192]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	f023 020f 	bic.w	r2, r3, #15
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	492d      	ldr	r1, [pc, #180]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	4927      	ldr	r1, [pc, #156]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b26      	ldr	r3, [pc, #152]	@ (8003c94 <HAL_RCC_OscConfig+0x628>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd ffe7 	bl	8001bd0 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fd ffe3 	bl	8001bd0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e037      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c18:	4b1d      	ldr	r3, [pc, #116]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x59a>
 8003c24:	e02f      	b.n	8003c86 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <HAL_RCC_OscConfig+0x628>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd ffd0 	bl	8001bd0 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd ffcc 	bl	8001bd0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e020      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c46:	4b12      	ldr	r3, [pc, #72]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5c8>
 8003c52:	e018      	b.n	8003c86 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e013      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c60:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <HAL_RCC_OscConfig+0x624>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	42420060 	.word	0x42420060

08003c98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0d0      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b6a      	ldr	r3, [pc, #424]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d910      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b67      	ldr	r3, [pc, #412]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 0207 	bic.w	r2, r3, #7
 8003cc2:	4965      	ldr	r1, [pc, #404]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b63      	ldr	r3, [pc, #396]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b8      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf4:	4b59      	ldr	r3, [pc, #356]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d0c:	4b53      	ldr	r3, [pc, #332]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a52      	ldr	r2, [pc, #328]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b50      	ldr	r3, [pc, #320]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	494d      	ldr	r1, [pc, #308]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d040      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	4b47      	ldr	r3, [pc, #284]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d115      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b41      	ldr	r3, [pc, #260]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e073      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3d      	ldr	r3, [pc, #244]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e06b      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b39      	ldr	r3, [pc, #228]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4936      	ldr	r1, [pc, #216]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d88:	f7fd ff22 	bl	8001bd0 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fd ff1e 	bl	8001bd0 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e053      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b27      	ldr	r3, [pc, #156]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d210      	bcs.n	8003de8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b24      	ldr	r3, [pc, #144]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 0207 	bic.w	r2, r3, #7
 8003dce:	4922      	ldr	r1, [pc, #136]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b20      	ldr	r3, [pc, #128]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e032      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df4:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4916      	ldr	r1, [pc, #88]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	490e      	ldr	r1, [pc, #56]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e26:	f000 f821 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	490a      	ldr	r1, [pc, #40]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	5ccb      	ldrb	r3, [r1, r3]
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_RCC_ClockConfig+0x1cc>)
 8003e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_ClockConfig+0x1d0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fd fe80 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40022000 	.word	0x40022000
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08008564 	.word	0x08008564
 8003e64:	20000004 	.word	0x20000004
 8003e68:	20000008 	.word	0x20000008

08003e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e70:	b092      	sub	sp, #72	@ 0x48
 8003e72:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e78:	2300      	movs	r3, #0
 8003e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e80:	2300      	movs	r3, #0
 8003e82:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e90:	4b6b      	ldr	r3, [pc, #428]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d002      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d003      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x40>
 8003ea4:	e0c3      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ea6:	4b67      	ldr	r3, [pc, #412]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8003ea8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003eaa:	e0c3      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eae:	0c9b      	lsrs	r3, r3, #18
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	4b64      	ldr	r3, [pc, #400]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003eb6:	5c9b      	ldrb	r3, [r3, r2]
 8003eb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80ac 	beq.w	800401e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	4b5f      	ldr	r3, [pc, #380]	@ (800404c <HAL_RCC_GetSysClockFreq+0x1e0>)
 8003ed0:	5c9b      	ldrb	r3, [r3, r2]
 8003ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 808c 	beq.w	8003ffa <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003ee2:	4b57      	ldr	r3, [pc, #348]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	3301      	adds	r3, #1
 8003eee:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003ef0:	4b53      	ldr	r3, [pc, #332]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	3302      	adds	r3, #2
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f00:	2200      	movs	r2, #0
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	fb00 f203 	mul.w	r2, r0, r3
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	fb03 f301 	mul.w	r3, r3, r1
 8003f1a:	4413      	add	r3, r2
 8003f1c:	6a3a      	ldr	r2, [r7, #32]
 8003f1e:	fba2 4500 	umull	r4, r5, r2, r0
 8003f22:	442b      	add	r3, r5
 8003f24:	461d      	mov	r5, r3
 8003f26:	4622      	mov	r2, r4
 8003f28:	462b      	mov	r3, r5
 8003f2a:	f04f 0000 	mov.w	r0, #0
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	0159      	lsls	r1, r3, #5
 8003f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f38:	0150      	lsls	r0, r2, #5
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	ebb2 0a04 	subs.w	sl, r2, r4
 8003f42:	eb63 0b05 	sbc.w	fp, r3, r5
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f52:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f56:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f5a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f5e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f76:	4690      	mov	r8, r2
 8003f78:	4699      	mov	r9, r3
 8003f7a:	eb18 0304 	adds.w	r3, r8, r4
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	eb49 0305 	adc.w	r3, r9, r5
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f92:	4629      	mov	r1, r5
 8003f94:	024b      	lsls	r3, r1, #9
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003fa0:	4601      	mov	r1, r0
 8003fa2:	024a      	lsls	r2, r1, #9
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003faa:	2200      	movs	r2, #0
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	617a      	str	r2, [r7, #20]
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	60fa      	str	r2, [r7, #12]
 8003fb8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003fc2:	4645      	mov	r5, r8
 8003fc4:	fb05 f202 	mul.w	r2, r5, r2
 8003fc8:	46cc      	mov	ip, r9
 8003fca:	4625      	mov	r5, r4
 8003fcc:	461c      	mov	r4, r3
 8003fce:	4623      	mov	r3, r4
 8003fd0:	fb03 f30c 	mul.w	r3, r3, ip
 8003fd4:	4413      	add	r3, r2
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	4644      	mov	r4, r8
 8003fda:	fba2 2404 	umull	r2, r4, r2, r4
 8003fde:	61fc      	str	r4, [r7, #28]
 8003fe0:	61ba      	str	r2, [r7, #24]
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fec:	f7fc f91c 	bl	8000228 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff8:	e007      	b.n	800400a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffc:	4a11      	ldr	r2, [pc, #68]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8003ffe:	fb03 f202 	mul.w	r2, r3, r2
 8004002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800400a:	4b0f      	ldr	r3, [pc, #60]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800400c:	7b5b      	ldrb	r3, [r3, #13]
 800400e:	461a      	mov	r2, r3
 8004010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004012:	4293      	cmp	r3, r2
 8004014:	d108      	bne.n	8004028 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8004016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	647b      	str	r3, [r7, #68]	@ 0x44
 800401c:	e004      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800401e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004020:	4a0b      	ldr	r2, [pc, #44]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 8004028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800402a:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800402c:	e002      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800402e:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004030:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004032:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004036:	4618      	mov	r0, r3
 8004038:	3748      	adds	r7, #72	@ 0x48
 800403a:	46bd      	mov	sp, r7
 800403c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004040:	40021000 	.word	0x40021000
 8004044:	007a1200 	.word	0x007a1200
 8004048:	0800857c 	.word	0x0800857c
 800404c:	0800858c 	.word	0x0800858c
 8004050:	003d0900 	.word	0x003d0900

08004054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004058:	4b02      	ldr	r3, [pc, #8]	@ (8004064 <HAL_RCC_GetHCLKFreq+0x10>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	20000004 	.word	0x20000004

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800406c:	f7ff fff2 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4903      	ldr	r1, [pc, #12]	@ (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40021000 	.word	0x40021000
 800408c:	08008574 	.word	0x08008574

08004090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004094:	f7ff ffde 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	0adb      	lsrs	r3, r3, #11
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	@ (80040b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000
 80040b4:	08008574 	.word	0x08008574

080040b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040c0:	4b0a      	ldr	r3, [pc, #40]	@ (80040ec <RCC_Delay+0x34>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <RCC_Delay+0x38>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0a5b      	lsrs	r3, r3, #9
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040d4:	bf00      	nop
  }
  while (Delay --);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1e5a      	subs	r2, r3, #1
 80040da:	60fa      	str	r2, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f9      	bne.n	80040d4 <RCC_Delay+0x1c>
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	20000004 	.word	0x20000004
 80040f0:	10624dd3 	.word	0x10624dd3

080040f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d07d      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004114:	2300      	movs	r3, #0
 8004116:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004118:	4b8b      	ldr	r3, [pc, #556]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10d      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004124:	4b88      	ldr	r3, [pc, #544]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	4a87      	ldr	r2, [pc, #540]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800412e:	61d3      	str	r3, [r2, #28]
 8004130:	4b85      	ldr	r3, [pc, #532]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800413c:	2301      	movs	r3, #1
 800413e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	4b82      	ldr	r3, [pc, #520]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d118      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800414c:	4b7f      	ldr	r3, [pc, #508]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a7e      	ldr	r2, [pc, #504]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004156:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004158:	f7fd fd3a 	bl	8001bd0 <HAL_GetTick>
 800415c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	e008      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004160:	f7fd fd36 	bl	8001bd0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	@ 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e0e5      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004172:	4b76      	ldr	r3, [pc, #472]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800417e:	4b72      	ldr	r3, [pc, #456]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004186:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d02e      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	429a      	cmp	r2, r3
 800419a:	d027      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800419c:	4b6a      	ldr	r3, [pc, #424]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ac:	4b68      	ldr	r3, [pc, #416]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041b2:	4a65      	ldr	r2, [pc, #404]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d014      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fd fd05 	bl	8001bd0 <HAL_GetTick>
 80041c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c8:	e00a      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fd fd01 	bl	8001bd0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d8:	4293      	cmp	r3, r2
 80041da:	d901      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e0ae      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e0:	4b59      	ldr	r3, [pc, #356]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ee      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ec:	4b56      	ldr	r3, [pc, #344]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4953      	ldr	r1, [pc, #332]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041fe:	7efb      	ldrb	r3, [r7, #27]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d105      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004204:	4b50      	ldr	r3, [pc, #320]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4a4f      	ldr	r2, [pc, #316]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800420a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800421c:	4b4a      	ldr	r3, [pc, #296]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4947      	ldr	r1, [pc, #284]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800423a:	4b43      	ldr	r3, [pc, #268]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800423c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4940      	ldr	r1, [pc, #256]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004248:	4313      	orrs	r3, r2
 800424a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8004258:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	4938      	ldr	r1, [pc, #224]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004266:	4313      	orrs	r3, r2
 8004268:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800426a:	4b37      	ldr	r3, [pc, #220]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d105      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004276:	4b34      	ldr	r3, [pc, #208]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004282:	2301      	movs	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d148      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800428c:	4b2e      	ldr	r3, [pc, #184]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d138      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004298:	4b2b      	ldr	r3, [pc, #172]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d009      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80042a4:	4b28      	ldr	r3, [pc, #160]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e042      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80042b8:	4b23      	ldr	r3, [pc, #140]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	4920      	ldr	r1, [pc, #128]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80042ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	491c      	ldr	r1, [pc, #112]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80042dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd fc75 	bl	8001bd0 <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042ea:	f7fd fc71 	bl	8001bd0 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b64      	cmp	r3, #100	@ 0x64
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e020      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004308:	e009      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800430a:	4b0f      	ldr	r3, [pc, #60]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800430c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	429a      	cmp	r2, r3
 8004318:	d001      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e00f      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800432a:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	4904      	ldr	r1, [pc, #16]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	40007000 	.word	0x40007000
 8004350:	42420440 	.word	0x42420440
 8004354:	42420070 	.word	0x42420070

08004358 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e041      	b.n	80043ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fd fa68 	bl	8001854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f000 f99a 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <HAL_TIM_PWM_Start+0x24>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e022      	b.n	8004462 <HAL_TIM_PWM_Start+0x6a>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b04      	cmp	r3, #4
 8004420:	d109      	bne.n	8004436 <HAL_TIM_PWM_Start+0x3e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e015      	b.n	8004462 <HAL_TIM_PWM_Start+0x6a>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d109      	bne.n	8004450 <HAL_TIM_PWM_Start+0x58>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e008      	b.n	8004462 <HAL_TIM_PWM_Start+0x6a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	bf14      	ite	ne
 800445c:	2301      	movne	r3, #1
 800445e:	2300      	moveq	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e063      	b.n	8004532 <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Start+0x82>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004478:	e013      	b.n	80044a2 <HAL_TIM_PWM_Start+0xaa>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d104      	bne.n	800448a <HAL_TIM_PWM_Start+0x92>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004488:	e00b      	b.n	80044a2 <HAL_TIM_PWM_Start+0xaa>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d104      	bne.n	800449a <HAL_TIM_PWM_Start+0xa2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004498:	e003      	b.n	80044a2 <HAL_TIM_PWM_Start+0xaa>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fb04 	bl	8004ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a21      	ldr	r2, [pc, #132]	@ (800453c <HAL_TIM_PWM_Start+0x144>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d107      	bne.n	80044ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <HAL_TIM_PWM_Start+0x144>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <HAL_TIM_PWM_Start+0x104>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044dc:	d00e      	beq.n	80044fc <HAL_TIM_PWM_Start+0x104>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a17      	ldr	r2, [pc, #92]	@ (8004540 <HAL_TIM_PWM_Start+0x148>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_TIM_PWM_Start+0x104>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a15      	ldr	r2, [pc, #84]	@ (8004544 <HAL_TIM_PWM_Start+0x14c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_TIM_PWM_Start+0x104>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a14      	ldr	r2, [pc, #80]	@ (8004548 <HAL_TIM_PWM_Start+0x150>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d111      	bne.n	8004520 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b06      	cmp	r3, #6
 800450c:	d010      	beq.n	8004530 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451e:	e007      	b.n	8004530 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00

0800454c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004566:	2302      	movs	r3, #2
 8004568:	e0ae      	b.n	80046c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	f200 809f 	bhi.w	80046b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800457a:	a201      	add	r2, pc, #4	@ (adr r2, 8004580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	080045b5 	.word	0x080045b5
 8004584:	080046b9 	.word	0x080046b9
 8004588:	080046b9 	.word	0x080046b9
 800458c:	080046b9 	.word	0x080046b9
 8004590:	080045f5 	.word	0x080045f5
 8004594:	080046b9 	.word	0x080046b9
 8004598:	080046b9 	.word	0x080046b9
 800459c:	080046b9 	.word	0x080046b9
 80045a0:	08004637 	.word	0x08004637
 80045a4:	080046b9 	.word	0x080046b9
 80045a8:	080046b9 	.word	0x080046b9
 80045ac:	080046b9 	.word	0x080046b9
 80045b0:	08004677 	.word	0x08004677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f8f4 	bl	80047a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	619a      	str	r2, [r3, #24]
      break;
 80045f2:	e064      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f93a 	bl	8004874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800460e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800461e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6999      	ldr	r1, [r3, #24]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	619a      	str	r2, [r3, #24]
      break;
 8004634:	e043      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 f983 	bl	8004948 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0208 	orr.w	r2, r2, #8
 8004650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0204 	bic.w	r2, r2, #4
 8004660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69d9      	ldr	r1, [r3, #28]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	61da      	str	r2, [r3, #28]
      break;
 8004674:	e023      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	4618      	mov	r0, r3
 800467e:	f000 f9cd 	bl	8004a1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69d9      	ldr	r1, [r3, #28]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	021a      	lsls	r2, r3, #8
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	61da      	str	r2, [r3, #28]
      break;
 80046b6:	e002      	b.n	80046be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	75fb      	strb	r3, [r7, #23]
      break;
 80046bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004798 <TIM_Base_SetConfig+0xc8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00f      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ee:	d00b      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a2a      	ldr	r2, [pc, #168]	@ (800479c <TIM_Base_SetConfig+0xcc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a29      	ldr	r2, [pc, #164]	@ (80047a0 <TIM_Base_SetConfig+0xd0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_Base_SetConfig+0x38>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a28      	ldr	r2, [pc, #160]	@ (80047a4 <TIM_Base_SetConfig+0xd4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d108      	bne.n	800471a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <TIM_Base_SetConfig+0xc8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00f      	beq.n	8004742 <TIM_Base_SetConfig+0x72>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004728:	d00b      	beq.n	8004742 <TIM_Base_SetConfig+0x72>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1b      	ldr	r2, [pc, #108]	@ (800479c <TIM_Base_SetConfig+0xcc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d007      	beq.n	8004742 <TIM_Base_SetConfig+0x72>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1a      	ldr	r2, [pc, #104]	@ (80047a0 <TIM_Base_SetConfig+0xd0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d003      	beq.n	8004742 <TIM_Base_SetConfig+0x72>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a19      	ldr	r2, [pc, #100]	@ (80047a4 <TIM_Base_SetConfig+0xd4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d108      	bne.n	8004754 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a07      	ldr	r2, [pc, #28]	@ (8004798 <TIM_Base_SetConfig+0xc8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d103      	bne.n	8004788 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	615a      	str	r2, [r3, #20]
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00

080047a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f023 0201 	bic.w	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 0302 	bic.w	r3, r3, #2
 80047f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004870 <TIM_OC1_SetConfig+0xc8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d10c      	bne.n	800481e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f023 0308 	bic.w	r3, r3, #8
 800480a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 0304 	bic.w	r3, r3, #4
 800481c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a13      	ldr	r2, [pc, #76]	@ (8004870 <TIM_OC1_SetConfig+0xc8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d111      	bne.n	800484a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800482c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	621a      	str	r2, [r3, #32]
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40012c00 	.word	0x40012c00

08004874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f023 0210 	bic.w	r2, r3, #16
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0320 	bic.w	r3, r3, #32
 80048be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004944 <TIM_OC2_SetConfig+0xd0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10d      	bne.n	80048f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a14      	ldr	r2, [pc, #80]	@ (8004944 <TIM_OC2_SetConfig+0xd0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d113      	bne.n	8004920 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	40012c00 	.word	0x40012c00

08004948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a18 <TIM_OC3_SetConfig+0xd0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d10d      	bne.n	80049c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a14      	ldr	r2, [pc, #80]	@ (8004a18 <TIM_OC3_SetConfig+0xd0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d113      	bne.n	80049f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	621a      	str	r2, [r3, #32]
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40012c00 	.word	0x40012c00

08004a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	031b      	lsls	r3, r3, #12
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a0f      	ldr	r2, [pc, #60]	@ (8004ab4 <TIM_OC4_SetConfig+0x98>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d109      	bne.n	8004a90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	019b      	lsls	r3, r3, #6
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	40012c00 	.word	0x40012c00

08004ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	2201      	movs	r2, #1
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1a      	ldr	r2, [r3, #32]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	401a      	ands	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a1a      	ldr	r2, [r3, #32]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e04b      	b.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a19      	ldr	r2, [pc, #100]	@ (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b64:	d00e      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a13      	ldr	r2, [pc, #76]	@ (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a12      	ldr	r2, [pc, #72]	@ (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10c      	bne.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40012c00 	.word	0x40012c00
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00

08004bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e042      	b.n	8004c64 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fc fee6 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2224      	movs	r2, #36	@ 0x24
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f82b 	bl	8004c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695a      	ldr	r2, [r3, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004ca6:	f023 030c 	bic.w	r3, r3, #12
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a2c      	ldr	r2, [pc, #176]	@ (8004d80 <UART_SetConfig+0x114>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d103      	bne.n	8004cdc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f7ff f9dc 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	e002      	b.n	8004ce2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7ff f9c4 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009a      	lsls	r2, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	4a22      	ldr	r2, [pc, #136]	@ (8004d84 <UART_SetConfig+0x118>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	0119      	lsls	r1, r3, #4
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009a      	lsls	r2, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d18:	4b1a      	ldr	r3, [pc, #104]	@ (8004d84 <UART_SetConfig+0x118>)
 8004d1a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	2064      	movs	r0, #100	@ 0x64
 8004d22:	fb00 f303 	mul.w	r3, r0, r3
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	3332      	adds	r3, #50	@ 0x32
 8004d2c:	4a15      	ldr	r2, [pc, #84]	@ (8004d84 <UART_SetConfig+0x118>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d38:	4419      	add	r1, r3
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009a      	lsls	r2, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d50:	4b0c      	ldr	r3, [pc, #48]	@ (8004d84 <UART_SetConfig+0x118>)
 8004d52:	fba3 0302 	umull	r0, r3, r3, r2
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	2064      	movs	r0, #100	@ 0x64
 8004d5a:	fb00 f303 	mul.w	r3, r0, r3
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	3332      	adds	r3, #50	@ 0x32
 8004d64:	4a07      	ldr	r2, [pc, #28]	@ (8004d84 <UART_SetConfig+0x118>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	440a      	add	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40013800 	.word	0x40013800
 8004d84:	51eb851f 	.word	0x51eb851f

08004d88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d88:	b084      	sub	sp, #16
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	f107 001c 	add.w	r0, r7, #28
 8004d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f001 f9de 	bl	8006168 <USB_CoreReset>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	639a      	str	r2, [r3, #56]	@ 0x38

  return ret;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dc8:	b004      	add	sp, #16
 8004dca:	4770      	bx	lr

08004dcc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d165      	bne.n	8004eac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4a3e      	ldr	r2, [pc, #248]	@ (8004edc <USB_SetTurnaroundTime+0x110>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d906      	bls.n	8004df6 <USB_SetTurnaroundTime+0x2a>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4a3d      	ldr	r2, [pc, #244]	@ (8004ee0 <USB_SetTurnaroundTime+0x114>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d202      	bcs.n	8004df6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004df0:	230f      	movs	r3, #15
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e05c      	b.n	8004eb0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4a39      	ldr	r2, [pc, #228]	@ (8004ee0 <USB_SetTurnaroundTime+0x114>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d306      	bcc.n	8004e0c <USB_SetTurnaroundTime+0x40>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4a38      	ldr	r2, [pc, #224]	@ (8004ee4 <USB_SetTurnaroundTime+0x118>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d202      	bcs.n	8004e0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e06:	230e      	movs	r3, #14
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e051      	b.n	8004eb0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4a35      	ldr	r2, [pc, #212]	@ (8004ee4 <USB_SetTurnaroundTime+0x118>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d306      	bcc.n	8004e22 <USB_SetTurnaroundTime+0x56>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a34      	ldr	r2, [pc, #208]	@ (8004ee8 <USB_SetTurnaroundTime+0x11c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d202      	bcs.n	8004e22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e1c:	230d      	movs	r3, #13
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e046      	b.n	8004eb0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	4a30      	ldr	r2, [pc, #192]	@ (8004ee8 <USB_SetTurnaroundTime+0x11c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d306      	bcc.n	8004e38 <USB_SetTurnaroundTime+0x6c>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004eec <USB_SetTurnaroundTime+0x120>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d802      	bhi.n	8004e38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e32:	230c      	movs	r3, #12
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e03b      	b.n	8004eb0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004eec <USB_SetTurnaroundTime+0x120>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d906      	bls.n	8004e4e <USB_SetTurnaroundTime+0x82>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef0 <USB_SetTurnaroundTime+0x124>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d802      	bhi.n	8004e4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e48:	230b      	movs	r3, #11
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e030      	b.n	8004eb0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4a27      	ldr	r2, [pc, #156]	@ (8004ef0 <USB_SetTurnaroundTime+0x124>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d906      	bls.n	8004e64 <USB_SetTurnaroundTime+0x98>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4a26      	ldr	r2, [pc, #152]	@ (8004ef4 <USB_SetTurnaroundTime+0x128>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d802      	bhi.n	8004e64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e5e:	230a      	movs	r3, #10
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e025      	b.n	8004eb0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4a23      	ldr	r2, [pc, #140]	@ (8004ef4 <USB_SetTurnaroundTime+0x128>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d906      	bls.n	8004e7a <USB_SetTurnaroundTime+0xae>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4a22      	ldr	r2, [pc, #136]	@ (8004ef8 <USB_SetTurnaroundTime+0x12c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d202      	bcs.n	8004e7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e74:	2309      	movs	r3, #9
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e01a      	b.n	8004eb0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef8 <USB_SetTurnaroundTime+0x12c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d306      	bcc.n	8004e90 <USB_SetTurnaroundTime+0xc4>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4a1d      	ldr	r2, [pc, #116]	@ (8004efc <USB_SetTurnaroundTime+0x130>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d802      	bhi.n	8004e90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e00f      	b.n	8004eb0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a1a      	ldr	r2, [pc, #104]	@ (8004efc <USB_SetTurnaroundTime+0x130>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d906      	bls.n	8004ea6 <USB_SetTurnaroundTime+0xda>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4a19      	ldr	r2, [pc, #100]	@ (8004f00 <USB_SetTurnaroundTime+0x134>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d202      	bcs.n	8004ea6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ea0:	2307      	movs	r3, #7
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e004      	b.n	8004eb0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ea6:	2306      	movs	r3, #6
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e001      	b.n	8004eb0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004eac:	2309      	movs	r3, #9
 8004eae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	029b      	lsls	r3, r3, #10
 8004ec4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	00d8acbf 	.word	0x00d8acbf
 8004ee0:	00e4e1c0 	.word	0x00e4e1c0
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	01067380 	.word	0x01067380
 8004eec:	011a499f 	.word	0x011a499f
 8004ef0:	01312cff 	.word	0x01312cff
 8004ef4:	014ca43f 	.word	0x014ca43f
 8004ef8:	016e3600 	.word	0x016e3600
 8004efc:	01a6ab1f 	.word	0x01a6ab1f
 8004f00:	01e84800 	.word	0x01e84800

08004f04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f043 0201 	orr.w	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f023 0201 	bic.w	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d115      	bne.n	8004f92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f72:	2001      	movs	r0, #1
 8004f74:	f7fc fe36 	bl	8001be4 <HAL_Delay>
      ms++;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f001 f87a 	bl	8006078 <USB_GetMode>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d01e      	beq.n	8004fc8 <USB_SetCurrentMode+0x84>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b31      	cmp	r3, #49	@ 0x31
 8004f8e:	d9f0      	bls.n	8004f72 <USB_SetCurrentMode+0x2e>
 8004f90:	e01a      	b.n	8004fc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d115      	bne.n	8004fc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7fc fe1d 	bl	8001be4 <HAL_Delay>
      ms++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 f861 	bl	8006078 <USB_GetMode>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <USB_SetCurrentMode+0x84>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b31      	cmp	r3, #49	@ 0x31
 8004fc0:	d9f0      	bls.n	8004fa4 <USB_SetCurrentMode+0x60>
 8004fc2:	e001      	b.n	8004fc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e005      	b.n	8004fd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b32      	cmp	r3, #50	@ 0x32
 8004fcc:	d101      	bne.n	8004fd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fdc:	b084      	sub	sp, #16
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b086      	sub	sp, #24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	e009      	b.n	8005010 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	3340      	adds	r3, #64	@ 0x40
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	2200      	movs	r2, #0
 8005008:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	3301      	adds	r3, #1
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b0e      	cmp	r3, #14
 8005014:	d9f2      	bls.n	8004ffc <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005028:	461a      	mov	r2, r3
 800502a:	2300      	movs	r3, #0
 800502c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800502e:	2103      	movs	r1, #3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f959 	bl	80052e8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005036:	2110      	movs	r1, #16
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f8f1 	bl	8005220 <USB_FlushTxFifo>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f91d 	bl	8005288 <USB_FlushRxFifo>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505e:	461a      	mov	r2, r3
 8005060:	2300      	movs	r3, #0
 8005062:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800506a:	461a      	mov	r2, r3
 800506c:	2300      	movs	r3, #0
 800506e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005076:	461a      	mov	r2, r3
 8005078:	2300      	movs	r3, #0
 800507a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	e043      	b.n	800510a <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005098:	d118      	bne.n	80050cc <USB_DevInit+0xf0>
    {
      if (i == 0U)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ac:	461a      	mov	r2, r3
 80050ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	e013      	b.n	80050de <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c2:	461a      	mov	r2, r3
 80050c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	e008      	b.n	80050de <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d8:	461a      	mov	r2, r3
 80050da:	2300      	movs	r3, #0
 80050dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ea:	461a      	mov	r2, r3
 80050ec:	2300      	movs	r3, #0
 80050ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fc:	461a      	mov	r2, r3
 80050fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005102:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3301      	adds	r3, #1
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	429a      	cmp	r2, r3
 8005110:	d3b7      	bcc.n	8005082 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	e043      	b.n	80051a0 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800512a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800512e:	d118      	bne.n	8005162 <USB_DevInit+0x186>
    {
      if (i == 0U)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005142:	461a      	mov	r2, r3
 8005144:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e013      	b.n	8005174 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005158:	461a      	mov	r2, r3
 800515a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	e008      	b.n	8005174 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516e:	461a      	mov	r2, r3
 8005170:	2300      	movs	r3, #0
 8005172:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005180:	461a      	mov	r2, r3
 8005182:	2300      	movs	r3, #0
 8005184:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005198:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	3301      	adds	r3, #1
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3b7      	bcc.n	8005118 <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80051c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f043 0210 	orr.w	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	4b10      	ldr	r3, [pc, #64]	@ (800521c <USB_DevInit+0x240>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f043 0208 	orr.w	r2, r3, #8
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d107      	bne.n	800520a <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005202:	f043 0304 	orr.w	r3, r3, #4
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800520a:	7dfb      	ldrb	r3, [r7, #23]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005216:	b004      	add	sp, #16
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	803c3800 	.word	0x803c3800

08005220 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3301      	adds	r3, #1
 8005232:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4a13      	ldr	r2, [pc, #76]	@ (8005284 <USB_FlushTxFifo+0x64>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d901      	bls.n	8005240 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e01b      	b.n	8005278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	daf2      	bge.n	800522e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	019b      	lsls	r3, r3, #6
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a08      	ldr	r2, [pc, #32]	@ (8005284 <USB_FlushTxFifo+0x64>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e006      	b.n	8005278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b20      	cmp	r3, #32
 8005274:	d0f0      	beq.n	8005258 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	00030d40 	.word	0x00030d40

08005288 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4a11      	ldr	r2, [pc, #68]	@ (80052e4 <USB_FlushRxFifo+0x5c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e018      	b.n	80052d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	daf2      	bge.n	8005294 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2210      	movs	r2, #16
 80052b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a08      	ldr	r2, [pc, #32]	@ (80052e4 <USB_FlushRxFifo+0x5c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e006      	b.n	80052d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d0f0      	beq.n	80052b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	00030d40 	.word	0x00030d40

080052e8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0306 	and.w	r3, r3, #6
 8005330:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d002      	beq.n	800533e <USB_GetDevSpeed+0x26>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b06      	cmp	r3, #6
 800533c:	d102      	bne.n	8005344 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800533e:	2302      	movs	r3, #2
 8005340:	75fb      	strb	r3, [r7, #23]
 8005342:	e001      	b.n	8005348 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005344:	230f      	movs	r3, #15
 8005346:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005348:	7dfb      	ldrb	r3, [r7, #23]
}
 800534a:	4618      	mov	r0, r3
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr

08005354 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d13a      	bne.n	80053e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	2101      	movs	r1, #1
 8005382:	fa01 f303 	lsl.w	r3, r1, r3
 8005386:	b29b      	uxth	r3, r3
 8005388:	68f9      	ldr	r1, [r7, #12]
 800538a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800538e:	4313      	orrs	r3, r2
 8005390:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d155      	bne.n	8005454 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	791b      	ldrb	r3, [r3, #4]
 80053c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	059b      	lsls	r3, r3, #22
 80053ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053cc:	4313      	orrs	r3, r2
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	e036      	b.n	8005454 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	2101      	movs	r1, #1
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005404:	4313      	orrs	r3, r2
 8005406:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d11a      	bne.n	8005454 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	791b      	ldrb	r3, [r3, #4]
 8005438:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800543a:	430b      	orrs	r3, r1
 800543c:	4313      	orrs	r3, r2
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800544a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800544e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005452:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d161      	bne.n	8005540 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800548e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005492:	d11f      	bne.n	80054d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	2101      	movs	r1, #1
 80054e6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	68f9      	ldr	r1, [r7, #12]
 80054f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054f4:	4013      	ands	r3, r2
 80054f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	2101      	movs	r1, #1
 800550a:	fa01 f303 	lsl.w	r3, r1, r3
 800550e:	b29b      	uxth	r3, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	68f9      	ldr	r1, [r7, #12]
 8005514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005518:	4013      	ands	r3, r2
 800551a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	0159      	lsls	r1, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	440b      	add	r3, r1
 8005532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005536:	4619      	mov	r1, r3
 8005538:	4b35      	ldr	r3, [pc, #212]	@ (8005610 <USB_DeactivateEndpoint+0x1b0>)
 800553a:	4013      	ands	r3, r2
 800553c:	600b      	str	r3, [r1, #0]
 800553e:	e060      	b.n	8005602 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005556:	d11f      	bne.n	8005598 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	440a      	add	r2, r1
 800556e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005572:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005576:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005592:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005596:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800559e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	2101      	movs	r1, #1
 80055aa:	fa01 f303 	lsl.w	r3, r1, r3
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	43db      	mvns	r3, r3
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055b8:	4013      	ands	r3, r2
 80055ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	2101      	movs	r1, #1
 80055ce:	fa01 f303 	lsl.w	r3, r1, r3
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	43db      	mvns	r3, r3
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055dc:	4013      	ands	r3, r2
 80055de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	0159      	lsls	r1, r3, #5
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	440b      	add	r3, r1
 80055f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055fa:	4619      	mov	r1, r3
 80055fc:	4b05      	ldr	r3, [pc, #20]	@ (8005614 <USB_DeactivateEndpoint+0x1b4>)
 80055fe:	4013      	ands	r3, r2
 8005600:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	ec337800 	.word	0xec337800
 8005614:	eff37800 	.word	0xeff37800

08005618 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	2b01      	cmp	r3, #1
 8005632:	f040 8128 	bne.w	8005886 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d132      	bne.n	80056a4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	440a      	add	r2, r1
 8005654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005658:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800565c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005660:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800567c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005680:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800569c:	0cdb      	lsrs	r3, r3, #19
 800569e:	04db      	lsls	r3, r3, #19
 80056a0:	6113      	str	r3, [r2, #16]
 80056a2:	e092      	b.n	80057ca <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056be:	0cdb      	lsrs	r3, r3, #19
 80056c0:	04db      	lsls	r3, r3, #19
 80056c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	0151      	lsls	r1, r2, #5
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	440a      	add	r2, r1
 80056da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80056e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80056e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d11a      	bne.n	8005724 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d903      	bls.n	8005702 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800571c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005720:	6113      	str	r3, [r2, #16]
 8005722:	e01b      	b.n	800575c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005730:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6919      	ldr	r1, [r3, #16]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	440b      	add	r3, r1
 800573c:	1e59      	subs	r1, r3, #1
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	fbb1 f3f3 	udiv	r3, r1, r3
 8005746:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005748:	4b8d      	ldr	r3, [pc, #564]	@ (8005980 <USB_EPStartXfer+0x368>)
 800574a:	400b      	ands	r3, r1
 800574c:	6939      	ldr	r1, [r7, #16]
 800574e:	0148      	lsls	r0, r1, #5
 8005750:	6979      	ldr	r1, [r7, #20]
 8005752:	4401      	add	r1, r0
 8005754:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005758:	4313      	orrs	r3, r2
 800575a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005772:	6939      	ldr	r1, [r7, #16]
 8005774:	0148      	lsls	r0, r1, #5
 8005776:	6979      	ldr	r1, [r7, #20]
 8005778:	4401      	add	r1, r0
 800577a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800577e:	4313      	orrs	r3, r2
 8005780:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	791b      	ldrb	r3, [r3, #4]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d11f      	bne.n	80057ca <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057a4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80057a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057c8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80057e8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	791b      	ldrb	r3, [r3, #4]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d015      	beq.n	800581e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8139 	beq.w	8005a6e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	2101      	movs	r1, #1
 800580e:	fa01 f303 	lsl.w	r3, r1, r3
 8005812:	6979      	ldr	r1, [r7, #20]
 8005814:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005818:	4313      	orrs	r3, r2
 800581a:	634b      	str	r3, [r1, #52]	@ 0x34
 800581c:	e127      	b.n	8005a6e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d110      	bne.n	8005850 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005848:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e00f      	b.n	8005870 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800586e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68d9      	ldr	r1, [r3, #12]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781a      	ldrb	r2, [r3, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	b29b      	uxth	r3, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9a5 	bl	8005bce <USB_WritePacket>
 8005884:	e0f3      	b.n	8005a6e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058a0:	0cdb      	lsrs	r3, r3, #19
 80058a2:	04db      	lsls	r3, r3, #19
 80058a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80058c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80058c8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d12f      	bne.n	8005930 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058fe:	6939      	ldr	r1, [r7, #16]
 8005900:	0148      	lsls	r0, r1, #5
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	4401      	add	r1, r0
 8005906:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800590a:	4313      	orrs	r3, r2
 800590c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005928:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800592c:	6113      	str	r3, [r2, #16]
 800592e:	e061      	b.n	80059f4 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d125      	bne.n	8005984 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594e:	6939      	ldr	r1, [r7, #16]
 8005950:	0148      	lsls	r0, r1, #5
 8005952:	6979      	ldr	r1, [r7, #20]
 8005954:	4401      	add	r1, r0
 8005956:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800595a:	4313      	orrs	r3, r2
 800595c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005978:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800597c:	6113      	str	r3, [r2, #16]
 800597e:	e039      	b.n	80059f4 <USB_EPStartXfer+0x3dc>
 8005980:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4413      	add	r3, r2
 800598e:	1e5a      	subs	r2, r3, #1
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	fbb2 f3f3 	udiv	r3, r2, r3
 8005998:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	89fa      	ldrh	r2, [r7, #14]
 80059a0:	fb03 f202 	mul.w	r2, r3, r2
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	89fb      	ldrh	r3, [r7, #14]
 80059b8:	04d9      	lsls	r1, r3, #19
 80059ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005a78 <USB_EPStartXfer+0x460>)
 80059bc:	400b      	ands	r3, r1
 80059be:	6939      	ldr	r1, [r7, #16]
 80059c0:	0148      	lsls	r0, r1, #5
 80059c2:	6979      	ldr	r1, [r7, #20]
 80059c4:	4401      	add	r1, r0
 80059c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059ca:	4313      	orrs	r3, r2
 80059cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e4:	6939      	ldr	r1, [r7, #16]
 80059e6:	0148      	lsls	r0, r1, #5
 80059e8:	6979      	ldr	r1, [r7, #20]
 80059ea:	4401      	add	r1, r0
 80059ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059f0:	4313      	orrs	r3, r2
 80059f2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	791b      	ldrb	r3, [r3, #4]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d128      	bne.n	8005a4e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d110      	bne.n	8005a2e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	e00f      	b.n	8005a4e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a4c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	0151      	lsls	r1, r2, #5
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	440a      	add	r2, r1
 8005a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	1ff80000 	.word	0x1ff80000

08005a7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d14a      	bne.n	8005b30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab2:	f040 8086 	bne.w	8005bc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	7812      	ldrb	r2, [r2, #0]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ad8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005af8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005afc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3301      	adds	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d902      	bls.n	8005b14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	75fb      	strb	r3, [r7, #23]
          break;
 8005b12:	e056      	b.n	8005bc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b2c:	d0e7      	beq.n	8005afe <USB_EPStopXfer+0x82>
 8005b2e:	e048      	b.n	8005bc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b48:	d13b      	bne.n	8005bc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	7812      	ldrb	r2, [r2, #0]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3301      	adds	r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d902      	bls.n	8005ba8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ba6:	e00c      	b.n	8005bc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bc0:	d0e7      	beq.n	8005b92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr

08005bce <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b089      	sub	sp, #36	@ 0x24
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	4611      	mov	r1, r2
 8005bda:	461a      	mov	r2, r3
 8005bdc:	460b      	mov	r3, r1
 8005bde:	71fb      	strb	r3, [r7, #7]
 8005be0:	4613      	mov	r3, r2
 8005be2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005bec:	88bb      	ldrh	r3, [r7, #4]
 8005bee:	3303      	adds	r3, #3
 8005bf0:	089b      	lsrs	r3, r3, #2
 8005bf2:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	e018      	b.n	8005c2c <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	031a      	lsls	r2, r3, #12
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c06:	461a      	mov	r2, r3
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	3301      	adds	r3, #1
 8005c12:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	3301      	adds	r3, #1
 8005c18:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	3301      	adds	r3, #1
 8005c24:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d3e2      	bcc.n	8005bfa <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3724      	adds	r7, #36	@ 0x24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr

08005c40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b08b      	sub	sp, #44	@ 0x2c
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	089b      	lsrs	r3, r3, #2
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c66:	2300      	movs	r3, #0
 8005c68:	623b      	str	r3, [r7, #32]
 8005c6a:	e014      	b.n	8005c96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	3301      	adds	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	3301      	adds	r3, #1
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	3301      	adds	r3, #1
 8005c94:	623b      	str	r3, [r7, #32]
 8005c96:	6a3a      	ldr	r2, [r7, #32]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d3e6      	bcc.n	8005c6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c9e:	8bfb      	ldrh	r3, [r7, #30]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01e      	beq.n	8005ce2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f107 0310 	add.w	r3, r7, #16
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	701a      	strb	r2, [r3, #0]
      i++;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005cd6:	8bfb      	ldrh	r3, [r7, #30]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cdc:	8bfb      	ldrh	r3, [r7, #30]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1ea      	bne.n	8005cb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	372c      	adds	r7, #44	@ 0x2c
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d12c      	bne.n	8005d64 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	db12      	blt.n	8005d42 <USB_EPSetStall+0x54>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00f      	beq.n	8005d42 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d40:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e02b      	b.n	8005dbc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	db12      	blt.n	8005d9c <USB_EPSetStall+0xae>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00f      	beq.n	8005d9c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d9a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005db6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005dba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr

08005dc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	785b      	ldrb	r3, [r3, #1]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d128      	bne.n	8005e36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	791b      	ldrb	r3, [r3, #4]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d003      	beq.n	8005e14 <USB_EPClearStall+0x4c>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	791b      	ldrb	r3, [r3, #4]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d138      	bne.n	8005e86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e027      	b.n	8005e86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	791b      	ldrb	r3, [r3, #4]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d003      	beq.n	8005e66 <USB_EPClearStall+0x9e>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	791b      	ldrb	r3, [r3, #4]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d10f      	bne.n	8005e86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr

08005e92 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eb0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005eb4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	011b      	lsls	r3, r3, #4
 8005ec2:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005ec6:	68f9      	ldr	r1, [r7, #12]
 8005ec8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr

08005edc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f0a:	f023 0302 	bic.w	r3, r3, #2
 8005f0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f4a:	f043 0302 	orr.w	r3, r3, #2
 8005f4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4013      	ands	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	0c1b      	lsrs	r3, r3, #16
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr

08005fb2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	b29b      	uxth	r3, r3
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	4013      	ands	r3, r2
 8006010:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006012:	68bb      	ldr	r3, [r7, #8]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr

0800601e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800601e:	b480      	push	{r7}
 8006020:	b087      	sub	sp, #28
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800603e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006040:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	01db      	lsls	r3, r3, #7
 8006050:	b2db      	uxtb	r3, r3
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4013      	ands	r3, r2
 800606a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800606c:	68bb      	ldr	r3, [r7, #8]
}
 800606e:	4618      	mov	r0, r3
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	f003 0301 	and.w	r3, r3, #1
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80060b0:	f023 0307 	bic.w	r3, r3, #7
 80060b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr
	...

080060d8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	333c      	adds	r3, #60	@ 0x3c
 80060ea:	3304      	adds	r3, #4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006164 <USB_EP0_OutStart+0x8c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d90a      	bls.n	800610e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006108:	d101      	bne.n	800610e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	e024      	b.n	8006158 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006114:	461a      	mov	r2, r3
 8006116:	2300      	movs	r3, #0
 8006118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006128:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800612c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800613c:	f043 0318 	orr.w	r3, r3, #24
 8006140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006150:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006154:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	4f54300a 	.word	0x4f54300a

08006168 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4a12      	ldr	r2, [pc, #72]	@ (80061c8 <USB_CoreReset+0x60>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d901      	bls.n	8006186 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e01b      	b.n	80061be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	daf2      	bge.n	8006174 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f043 0201 	orr.w	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3301      	adds	r3, #1
 80061a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4a08      	ldr	r2, [pc, #32]	@ (80061c8 <USB_CoreReset+0x60>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d901      	bls.n	80061b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e006      	b.n	80061be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d0f0      	beq.n	800619e <USB_CoreReset+0x36>

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr
 80061c8:	00030d40 	.word	0x00030d40

080061cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7c1b      	ldrb	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d115      	bne.n	8006210 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80061e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061e8:	2202      	movs	r2, #2
 80061ea:	2181      	movs	r1, #129	@ 0x81
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 fef4 	bl	8007fda <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061fc:	2202      	movs	r2, #2
 80061fe:	2101      	movs	r1, #1
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 feea 	bl	8007fda <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800620e:	e012      	b.n	8006236 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006210:	2340      	movs	r3, #64	@ 0x40
 8006212:	2202      	movs	r2, #2
 8006214:	2181      	movs	r1, #129	@ 0x81
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fedf 	bl	8007fda <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006222:	2340      	movs	r3, #64	@ 0x40
 8006224:	2202      	movs	r2, #2
 8006226:	2101      	movs	r1, #1
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fed6 	bl	8007fda <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006236:	2308      	movs	r3, #8
 8006238:	2203      	movs	r2, #3
 800623a:	2182      	movs	r1, #130	@ 0x82
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 fecc 	bl	8007fda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006248:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800624c:	f001 ffec 	bl	8008228 <USBD_static_malloc>
 8006250:	4602      	mov	r2, r0
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006262:	2301      	movs	r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
 8006266:	e026      	b.n	80062b6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800626e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2200      	movs	r2, #0
 800627e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2200      	movs	r2, #0
 8006286:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	7c1b      	ldrb	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800629c:	2101      	movs	r1, #1
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 ff8b 	bl	80081ba <USBD_LL_PrepareReceive>
 80062a4:	e007      	b.n	80062b6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80062ac:	2340      	movs	r3, #64	@ 0x40
 80062ae:	2101      	movs	r1, #1
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 ff82 	bl	80081ba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80062d0:	2181      	movs	r1, #129	@ 0x81
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 fea7 	bl	8008026 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80062de:	2101      	movs	r1, #1
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 fea0 	bl	8008026 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80062ee:	2182      	movs	r1, #130	@ 0x82
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fe98 	bl	8008026 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00e      	beq.n	8006324 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006316:	4618      	mov	r0, r3
 8006318:	f001 ff92 	bl	8008240 <USBD_static_free>
    pdev->pClassData = NULL;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800633e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006354:	2b00      	cmp	r3, #0
 8006356:	d039      	beq.n	80063cc <USBD_CDC_Setup+0x9e>
 8006358:	2b20      	cmp	r3, #32
 800635a:	d17f      	bne.n	800645c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	88db      	ldrh	r3, [r3, #6]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d029      	beq.n	80063b8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	b25b      	sxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	da11      	bge.n	8006392 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800637a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	88d2      	ldrh	r2, [r2, #6]
 8006380:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006382:	6939      	ldr	r1, [r7, #16]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	88db      	ldrh	r3, [r3, #6]
 8006388:	461a      	mov	r2, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fa3e 	bl	800780c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006390:	e06b      	b.n	800646a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	785a      	ldrb	r2, [r3, #1]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	88db      	ldrh	r3, [r3, #6]
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80063a8:	6939      	ldr	r1, [r7, #16]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	88db      	ldrh	r3, [r3, #6]
 80063ae:	461a      	mov	r2, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 fa59 	bl	8007868 <USBD_CtlPrepareRx>
      break;
 80063b6:	e058      	b.n	800646a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	7850      	ldrb	r0, [r2, #1]
 80063c4:	2200      	movs	r2, #0
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	4798      	blx	r3
      break;
 80063ca:	e04e      	b.n	800646a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	2b0b      	cmp	r3, #11
 80063d2:	d02e      	beq.n	8006432 <USBD_CDC_Setup+0x104>
 80063d4:	2b0b      	cmp	r3, #11
 80063d6:	dc38      	bgt.n	800644a <USBD_CDC_Setup+0x11c>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <USBD_CDC_Setup+0xb4>
 80063dc:	2b0a      	cmp	r3, #10
 80063de:	d014      	beq.n	800640a <USBD_CDC_Setup+0xdc>
 80063e0:	e033      	b.n	800644a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d107      	bne.n	80063fc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80063ec:	f107 030c 	add.w	r3, r7, #12
 80063f0:	2202      	movs	r2, #2
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fa09 	bl	800780c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063fa:	e02e      	b.n	800645a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 f99a 	bl	8007738 <USBD_CtlError>
            ret = USBD_FAIL;
 8006404:	2302      	movs	r3, #2
 8006406:	75fb      	strb	r3, [r7, #23]
          break;
 8006408:	e027      	b.n	800645a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006410:	2b03      	cmp	r3, #3
 8006412:	d107      	bne.n	8006424 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006414:	f107 030f 	add.w	r3, r7, #15
 8006418:	2201      	movs	r2, #1
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 f9f5 	bl	800780c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006422:	e01a      	b.n	800645a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 f986 	bl	8007738 <USBD_CtlError>
            ret = USBD_FAIL;
 800642c:	2302      	movs	r3, #2
 800642e:	75fb      	strb	r3, [r7, #23]
          break;
 8006430:	e013      	b.n	800645a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006438:	2b03      	cmp	r3, #3
 800643a:	d00d      	beq.n	8006458 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f001 f97a 	bl	8007738 <USBD_CtlError>
            ret = USBD_FAIL;
 8006444:	2302      	movs	r3, #2
 8006446:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006448:	e006      	b.n	8006458 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 f973 	bl	8007738 <USBD_CtlError>
          ret = USBD_FAIL;
 8006452:	2302      	movs	r3, #2
 8006454:	75fb      	strb	r3, [r7, #23]
          break;
 8006456:	e000      	b.n	800645a <USBD_CDC_Setup+0x12c>
          break;
 8006458:	bf00      	nop
      }
      break;
 800645a:	e006      	b.n	800646a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 f96a 	bl	8007738 <USBD_CtlError>
      ret = USBD_FAIL;
 8006464:	2302      	movs	r3, #2
 8006466:	75fb      	strb	r3, [r7, #23]
      break;
 8006468:	bf00      	nop
  }

  return ret;
 800646a:	7dfb      	ldrb	r3, [r7, #23]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006486:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800648e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006496:	2b00      	cmp	r3, #0
 8006498:	d03a      	beq.n	8006510 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	331c      	adds	r3, #28
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d029      	beq.n	8006504 <USBD_CDC_DataIn+0x90>
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	331c      	adds	r3, #28
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	78f9      	ldrb	r1, [r7, #3]
 80064c4:	68b8      	ldr	r0, [r7, #8]
 80064c6:	460b      	mov	r3, r1
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	440b      	add	r3, r1
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4403      	add	r3, r0
 80064d0:	3344      	adds	r3, #68	@ 0x44
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d110      	bne.n	8006504 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	331c      	adds	r3, #28
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064f6:	78f9      	ldrb	r1, [r7, #3]
 80064f8:	2300      	movs	r3, #0
 80064fa:	2200      	movs	r2, #0
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fe39 	bl	8008174 <USBD_LL_Transmit>
 8006502:	e003      	b.n	800650c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006510:	2302      	movs	r3, #2
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800652c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 fe64 	bl	8008200 <USBD_LL_GetRxDataSize>
 8006538:	4602      	mov	r2, r0
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00d      	beq.n	8006566 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800655e:	4611      	mov	r1, r2
 8006560:	4798      	blx	r3

    return USBD_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e000      	b.n	8006568 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006566:	2302      	movs	r3, #2
  }
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800657e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006586:	2b00      	cmp	r3, #0
 8006588:	d014      	beq.n	80065b4 <USBD_CDC_EP0_RxReady+0x44>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006590:	2bff      	cmp	r3, #255	@ 0xff
 8006592:	d00f      	beq.n	80065b4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80065a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80065aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	22ff      	movs	r2, #255	@ 0xff
 80065b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2243      	movs	r2, #67	@ 0x43
 80065cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80065ce:	4b03      	ldr	r3, [pc, #12]	@ (80065dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000098 	.word	0x20000098

080065e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2243      	movs	r2, #67	@ 0x43
 80065ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80065ee:	4b03      	ldr	r3, [pc, #12]	@ (80065fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20000054 	.word	0x20000054

08006600 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2243      	movs	r2, #67	@ 0x43
 800660c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800660e:	4b03      	ldr	r3, [pc, #12]	@ (800661c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	200000dc 	.word	0x200000dc

08006620 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	220a      	movs	r2, #10
 800662c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800662e:	4b03      	ldr	r3, [pc, #12]	@ (800663c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000010 	.word	0x20000010

08006640 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800664a:	2302      	movs	r3, #2
 800664c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr

0800666c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006680:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800668a:	88fa      	ldrh	r2, [r7, #6]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr

0800669e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01c      	beq.n	8006718 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d115      	bne.n	8006714 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006706:	b29b      	uxth	r3, r3
 8006708:	2181      	movs	r1, #129	@ 0x81
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fd32 	bl	8008174 <USBD_LL_Transmit>

      return USBD_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	e002      	b.n	800671a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006718:	2302      	movs	r3, #2
  }
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006730:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006738:	2b00      	cmp	r3, #0
 800673a:	d017      	beq.n	800676c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	7c1b      	ldrb	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800674a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800674e:	2101      	movs	r1, #1
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 fd32 	bl	80081ba <USBD_LL_PrepareReceive>
 8006756:	e007      	b.n	8006768 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800675e:	2340      	movs	r3, #64	@ 0x40
 8006760:	2101      	movs	r1, #1
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fd29 	bl	80081ba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	e000      	b.n	800676e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800676c:	2302      	movs	r3, #2
  }
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	4613      	mov	r3, r2
 8006782:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800678a:	2302      	movs	r3, #2
 800678c:	e01a      	b.n	80067c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	79fa      	ldrb	r2, [r7, #7]
 80067ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f001 fbad 	bl	8007f1c <USBD_LL_Init>

  return USBD_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d006      	beq.n	80067ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	73fb      	strb	r3, [r7, #15]
 80067ec:	e001      	b.n	80067f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80067ee:	2302      	movs	r3, #2
 80067f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bc80      	pop	{r7}
 80067fc:	4770      	bx	lr

080067fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fbcc 	bl	8007fa4 <USBD_LL_Start>

  return USBD_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	bc80      	pop	{r7}
 8006828:	4770      	bx	lr

0800682a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006836:	2302      	movs	r3, #2
 8006838:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00c      	beq.n	800685e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	4611      	mov	r1, r2
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	78fa      	ldrb	r2, [r7, #3]
 800687e:	4611      	mov	r1, r2
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3

  return USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b082      	sub	sp, #8
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 ff10 	bl	80076c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80068b4:	461a      	mov	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80068c2:	f003 031f 	and.w	r3, r3, #31
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d016      	beq.n	80068f8 <USBD_LL_SetupStage+0x6a>
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d81c      	bhi.n	8006908 <USBD_LL_SetupStage+0x7a>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <USBD_LL_SetupStage+0x4a>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d008      	beq.n	80068e8 <USBD_LL_SetupStage+0x5a>
 80068d6:	e017      	b.n	8006908 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa03 	bl	8006cec <USBD_StdDevReq>
      break;
 80068e6:	e01a      	b.n	800691e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fa65 	bl	8006dc0 <USBD_StdItfReq>
      break;
 80068f6:	e012      	b.n	800691e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 faa5 	bl	8006e50 <USBD_StdEPReq>
      break;
 8006906:	e00a      	b.n	800691e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800690e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006912:	b2db      	uxtb	r3, r3
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fba4 	bl	8008064 <USBD_LL_StallEP>
      break;
 800691c:	bf00      	nop
  }

  return USBD_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	460b      	mov	r3, r1
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d14b      	bne.n	80069d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006942:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800694a:	2b03      	cmp	r3, #3
 800694c:	d134      	bne.n	80069b8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	d919      	bls.n	800698e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	1ad2      	subs	r2, r2, r3
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006970:	429a      	cmp	r2, r3
 8006972:	d203      	bcs.n	800697c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006978:	b29b      	uxth	r3, r3
 800697a:	e002      	b.n	8006982 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006980:	b29b      	uxth	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 ff8c 	bl	80078a4 <USBD_CtlContinueRx>
 800698c:	e038      	b.n	8006a00 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d105      	bne.n	80069b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 ff89 	bl	80078c8 <USBD_CtlSendStatus>
 80069b6:	e023      	b.n	8006a00 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069be:	2b05      	cmp	r3, #5
 80069c0:	d11e      	bne.n	8006a00 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80069ca:	2100      	movs	r1, #0
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f001 fb49 	bl	8008064 <USBD_LL_StallEP>
 80069d2:	e015      	b.n	8006a00 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00d      	beq.n	80069fc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d108      	bne.n	80069fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	7afa      	ldrb	r2, [r7, #11]
 80069f4:	4611      	mov	r1, r2
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	4798      	blx	r3
 80069fa:	e001      	b.n	8006a00 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069fc:	2302      	movs	r3, #2
 80069fe:	e000      	b.n	8006a02 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	460b      	mov	r3, r1
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a18:	7afb      	ldrb	r3, [r7, #11]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d17f      	bne.n	8006b1e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3314      	adds	r3, #20
 8006a22:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d15c      	bne.n	8006ae8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d915      	bls.n	8006a66 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	1ad2      	subs	r2, r2, r3
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fef6 	bl	8007844 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f001 fbab 	bl	80081ba <USBD_LL_PrepareReceive>
 8006a64:	e04e      	b.n	8006b04 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	6912      	ldr	r2, [r2, #16]
 8006a6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a72:	fb01 f202 	mul.w	r2, r1, r2
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d11c      	bne.n	8006ab6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d316      	bcc.n	8006ab6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d20f      	bcs.n	8006ab6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a96:	2200      	movs	r2, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 fed2 	bl	8007844 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2100      	movs	r1, #0
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f001 fb83 	bl	80081ba <USBD_LL_PrepareReceive>
 8006ab4:	e026      	b.n	8006b04 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d105      	bne.n	8006ad8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ad8:	2180      	movs	r1, #128	@ 0x80
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f001 fac2 	bl	8008064 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 ff04 	bl	80078ee <USBD_CtlReceiveStatus>
 8006ae6:	e00d      	b.n	8006b04 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d004      	beq.n	8006afc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006afc:	2180      	movs	r1, #128	@ 0x80
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f001 fab0 	bl	8008064 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d11d      	bne.n	8006b4a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7ff fe81 	bl	8006816 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b1c:	e015      	b.n	8006b4a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00d      	beq.n	8006b46 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d108      	bne.n	8006b46 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	7afa      	ldrb	r2, [r7, #11]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	4798      	blx	r3
 8006b44:	e001      	b.n	8006b4a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b46:	2302      	movs	r3, #2
 8006b48:	e000      	b.n	8006b4c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b5c:	2340      	movs	r3, #64	@ 0x40
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2100      	movs	r1, #0
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 fa39 	bl	8007fda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2240      	movs	r2, #64	@ 0x40
 8006b74:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b78:	2340      	movs	r3, #64	@ 0x40
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2180      	movs	r1, #128	@ 0x80
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fa2b 	bl	8007fda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2240      	movs	r2, #64	@ 0x40
 8006b8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6852      	ldr	r2, [r2, #4]
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	4798      	blx	r3
  }

  return USBD_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	78fa      	ldrb	r2, [r7, #3]
 8006be6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr

08006c1c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d105      	bne.n	8006c3a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr

08006c46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d10b      	bne.n	8006c70 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr

08006c92 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr

08006caa <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6852      	ldr	r2, [r2, #4]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	4611      	mov	r1, r2
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	4798      	blx	r3

  return USBD_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d02:	2b40      	cmp	r3, #64	@ 0x40
 8006d04:	d005      	beq.n	8006d12 <USBD_StdDevReq+0x26>
 8006d06:	2b40      	cmp	r3, #64	@ 0x40
 8006d08:	d84f      	bhi.n	8006daa <USBD_StdDevReq+0xbe>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <USBD_StdDevReq+0x36>
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d14b      	bne.n	8006daa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	4798      	blx	r3
      break;
 8006d20:	e048      	b.n	8006db4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b09      	cmp	r3, #9
 8006d28:	d839      	bhi.n	8006d9e <USBD_StdDevReq+0xb2>
 8006d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d30 <USBD_StdDevReq+0x44>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d81 	.word	0x08006d81
 8006d34:	08006d95 	.word	0x08006d95
 8006d38:	08006d9f 	.word	0x08006d9f
 8006d3c:	08006d8b 	.word	0x08006d8b
 8006d40:	08006d9f 	.word	0x08006d9f
 8006d44:	08006d63 	.word	0x08006d63
 8006d48:	08006d59 	.word	0x08006d59
 8006d4c:	08006d9f 	.word	0x08006d9f
 8006d50:	08006d77 	.word	0x08006d77
 8006d54:	08006d6d 	.word	0x08006d6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f9dc 	bl	8007118 <USBD_GetDescriptor>
          break;
 8006d60:	e022      	b.n	8006da8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fb3f 	bl	80073e8 <USBD_SetAddress>
          break;
 8006d6a:	e01d      	b.n	8006da8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fb7e 	bl	8007470 <USBD_SetConfig>
          break;
 8006d74:	e018      	b.n	8006da8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fc07 	bl	800758c <USBD_GetConfig>
          break;
 8006d7e:	e013      	b.n	8006da8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fc37 	bl	80075f6 <USBD_GetStatus>
          break;
 8006d88:	e00e      	b.n	8006da8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fc65 	bl	800765c <USBD_SetFeature>
          break;
 8006d92:	e009      	b.n	8006da8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fc74 	bl	8007684 <USBD_ClrFeature>
          break;
 8006d9c:	e004      	b.n	8006da8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fcc9 	bl	8007738 <USBD_CtlError>
          break;
 8006da6:	bf00      	nop
      }
      break;
 8006da8:	e004      	b.n	8006db4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fcc3 	bl	8007738 <USBD_CtlError>
      break;
 8006db2:	bf00      	nop
  }

  return ret;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop

08006dc0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dd6:	2b40      	cmp	r3, #64	@ 0x40
 8006dd8:	d005      	beq.n	8006de6 <USBD_StdItfReq+0x26>
 8006dda:	2b40      	cmp	r3, #64	@ 0x40
 8006ddc:	d82e      	bhi.n	8006e3c <USBD_StdItfReq+0x7c>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <USBD_StdItfReq+0x26>
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d12a      	bne.n	8006e3c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dec:	3b01      	subs	r3, #1
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d81d      	bhi.n	8006e2e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	889b      	ldrh	r3, [r3, #4]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d813      	bhi.n	8006e24 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	88db      	ldrh	r3, [r3, #6]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d110      	bne.n	8006e38 <USBD_StdItfReq+0x78>
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10d      	bne.n	8006e38 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fd53 	bl	80078c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e22:	e009      	b.n	8006e38 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fc86 	bl	8007738 <USBD_CtlError>
          break;
 8006e2c:	e004      	b.n	8006e38 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fc81 	bl	8007738 <USBD_CtlError>
          break;
 8006e36:	e000      	b.n	8006e3a <USBD_StdItfReq+0x7a>
          break;
 8006e38:	bf00      	nop
      }
      break;
 8006e3a:	e004      	b.n	8006e46 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fc7a 	bl	8007738 <USBD_CtlError>
      break;
 8006e44:	bf00      	nop
  }

  return USBD_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	889b      	ldrh	r3, [r3, #4]
 8006e62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e6c:	2b40      	cmp	r3, #64	@ 0x40
 8006e6e:	d007      	beq.n	8006e80 <USBD_StdEPReq+0x30>
 8006e70:	2b40      	cmp	r3, #64	@ 0x40
 8006e72:	f200 8146 	bhi.w	8007102 <USBD_StdEPReq+0x2b2>
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <USBD_StdEPReq+0x40>
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	f040 8141 	bne.w	8007102 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
      break;
 8006e8e:	e13d      	b.n	800710c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d10a      	bne.n	8006eb2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	e12d      	b.n	800710e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d007      	beq.n	8006eca <USBD_StdEPReq+0x7a>
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	f300 811b 	bgt.w	80070f6 <USBD_StdEPReq+0x2a6>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d072      	beq.n	8006faa <USBD_StdEPReq+0x15a>
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d03a      	beq.n	8006f3e <USBD_StdEPReq+0xee>
 8006ec8:	e115      	b.n	80070f6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d002      	beq.n	8006eda <USBD_StdEPReq+0x8a>
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d015      	beq.n	8006f04 <USBD_StdEPReq+0xb4>
 8006ed8:	e02b      	b.n	8006f32 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eda:	7bbb      	ldrb	r3, [r7, #14]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00c      	beq.n	8006efa <USBD_StdEPReq+0xaa>
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	2b80      	cmp	r3, #128	@ 0x80
 8006ee4:	d009      	beq.n	8006efa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 f8ba 	bl	8008064 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ef0:	2180      	movs	r1, #128	@ 0x80
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 f8b6 	bl	8008064 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ef8:	e020      	b.n	8006f3c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fc1b 	bl	8007738 <USBD_CtlError>
              break;
 8006f02:	e01b      	b.n	8006f3c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	885b      	ldrh	r3, [r3, #2]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10e      	bne.n	8006f2a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <USBD_StdEPReq+0xda>
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b80      	cmp	r3, #128	@ 0x80
 8006f16:	d008      	beq.n	8006f2a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	88db      	ldrh	r3, [r3, #6]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006f20:	7bbb      	ldrb	r3, [r7, #14]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 f89d 	bl	8008064 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fccc 	bl	80078c8 <USBD_CtlSendStatus>

              break;
 8006f30:	e004      	b.n	8006f3c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fbff 	bl	8007738 <USBD_CtlError>
              break;
 8006f3a:	bf00      	nop
          }
          break;
 8006f3c:	e0e0      	b.n	8007100 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d002      	beq.n	8006f4e <USBD_StdEPReq+0xfe>
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d015      	beq.n	8006f78 <USBD_StdEPReq+0x128>
 8006f4c:	e026      	b.n	8006f9c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00c      	beq.n	8006f6e <USBD_StdEPReq+0x11e>
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b80      	cmp	r3, #128	@ 0x80
 8006f58:	d009      	beq.n	8006f6e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 f880 	bl	8008064 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f64:	2180      	movs	r1, #128	@ 0x80
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f87c 	bl	8008064 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f6c:	e01c      	b.n	8006fa8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fbe1 	bl	8007738 <USBD_CtlError>
              break;
 8006f76:	e017      	b.n	8006fa8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	885b      	ldrh	r3, [r3, #2]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d112      	bne.n	8006fa6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
 8006f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 f887 	bl	80080a2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fc97 	bl	80078c8 <USBD_CtlSendStatus>
              }
              break;
 8006f9a:	e004      	b.n	8006fa6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fbca 	bl	8007738 <USBD_CtlError>
              break;
 8006fa4:	e000      	b.n	8006fa8 <USBD_StdEPReq+0x158>
              break;
 8006fa6:	bf00      	nop
          }
          break;
 8006fa8:	e0aa      	b.n	8007100 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d002      	beq.n	8006fba <USBD_StdEPReq+0x16a>
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d032      	beq.n	800701e <USBD_StdEPReq+0x1ce>
 8006fb8:	e097      	b.n	80070ea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fba:	7bbb      	ldrb	r3, [r7, #14]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d007      	beq.n	8006fd0 <USBD_StdEPReq+0x180>
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	2b80      	cmp	r3, #128	@ 0x80
 8006fc4:	d004      	beq.n	8006fd0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fbb5 	bl	8007738 <USBD_CtlError>
                break;
 8006fce:	e091      	b.n	80070f4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	da0b      	bge.n	8006ff0 <USBD_StdEPReq+0x1a0>
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	3310      	adds	r3, #16
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	4413      	add	r3, r2
 8006fec:	3304      	adds	r3, #4
 8006fee:	e00b      	b.n	8007008 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	4413      	add	r3, r2
 8007006:	3304      	adds	r3, #4
 8007008:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2202      	movs	r2, #2
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fbf8 	bl	800780c <USBD_CtlSendData>
              break;
 800701c:	e06a      	b.n	80070f4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800701e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007022:	2b00      	cmp	r3, #0
 8007024:	da11      	bge.n	800704a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	f003 020f 	and.w	r2, r3, #15
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3318      	adds	r3, #24
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d117      	bne.n	8007070 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fb78 	bl	8007738 <USBD_CtlError>
                  break;
 8007048:	e054      	b.n	80070f4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	f003 020f 	and.w	r2, r3, #15
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d104      	bne.n	8007070 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fb65 	bl	8007738 <USBD_CtlError>
                  break;
 800706e:	e041      	b.n	80070f4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007074:	2b00      	cmp	r3, #0
 8007076:	da0b      	bge.n	8007090 <USBD_StdEPReq+0x240>
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	3310      	adds	r3, #16
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	4413      	add	r3, r2
 800708c:	3304      	adds	r3, #4
 800708e:	e00b      	b.n	80070a8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	4413      	add	r3, r2
 80070a6:	3304      	adds	r3, #4
 80070a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <USBD_StdEPReq+0x266>
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	2b80      	cmp	r3, #128	@ 0x80
 80070b4:	d103      	bne.n	80070be <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e00e      	b.n	80070dc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 f80c 	bl	80080e0 <USBD_LL_IsStallEP>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2201      	movs	r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	e002      	b.n	80070dc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2202      	movs	r2, #2
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fb92 	bl	800780c <USBD_CtlSendData>
              break;
 80070e8:	e004      	b.n	80070f4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fb23 	bl	8007738 <USBD_CtlError>
              break;
 80070f2:	bf00      	nop
          }
          break;
 80070f4:	e004      	b.n	8007100 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fb1d 	bl	8007738 <USBD_CtlError>
          break;
 80070fe:	bf00      	nop
      }
      break;
 8007100:	e004      	b.n	800710c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fb17 	bl	8007738 <USBD_CtlError>
      break;
 800710a:	bf00      	nop
  }

  return ret;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	0a1b      	lsrs	r3, r3, #8
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	2b06      	cmp	r3, #6
 800713a:	f200 8128 	bhi.w	800738e <USBD_GetDescriptor+0x276>
 800713e:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <USBD_GetDescriptor+0x2c>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007161 	.word	0x08007161
 8007148:	08007179 	.word	0x08007179
 800714c:	080071b9 	.word	0x080071b9
 8007150:	0800738f 	.word	0x0800738f
 8007154:	0800738f 	.word	0x0800738f
 8007158:	0800732f 	.word	0x0800732f
 800715c:	0800735b 	.word	0x0800735b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	7c12      	ldrb	r2, [r2, #16]
 800716c:	f107 0108 	add.w	r1, r7, #8
 8007170:	4610      	mov	r0, r2
 8007172:	4798      	blx	r3
 8007174:	60f8      	str	r0, [r7, #12]
      break;
 8007176:	e112      	b.n	800739e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	7c1b      	ldrb	r3, [r3, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10d      	bne.n	800719c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007188:	f107 0208 	add.w	r2, r7, #8
 800718c:	4610      	mov	r0, r2
 800718e:	4798      	blx	r3
 8007190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	2202      	movs	r2, #2
 8007198:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800719a:	e100      	b.n	800739e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a4:	f107 0208 	add.w	r2, r7, #8
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3301      	adds	r3, #1
 80071b2:	2202      	movs	r2, #2
 80071b4:	701a      	strb	r2, [r3, #0]
      break;
 80071b6:	e0f2      	b.n	800739e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	885b      	ldrh	r3, [r3, #2]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b05      	cmp	r3, #5
 80071c0:	f200 80ac 	bhi.w	800731c <USBD_GetDescriptor+0x204>
 80071c4:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <USBD_GetDescriptor+0xb4>)
 80071c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ca:	bf00      	nop
 80071cc:	080071e5 	.word	0x080071e5
 80071d0:	08007219 	.word	0x08007219
 80071d4:	0800724d 	.word	0x0800724d
 80071d8:	08007281 	.word	0x08007281
 80071dc:	080072b5 	.word	0x080072b5
 80071e0:	080072e9 	.word	0x080072e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	7c12      	ldrb	r2, [r2, #16]
 80071fc:	f107 0108 	add.w	r1, r7, #8
 8007200:	4610      	mov	r0, r2
 8007202:	4798      	blx	r3
 8007204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007206:	e091      	b.n	800732c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa94 	bl	8007738 <USBD_CtlError>
            err++;
 8007210:	7afb      	ldrb	r3, [r7, #11]
 8007212:	3301      	adds	r3, #1
 8007214:	72fb      	strb	r3, [r7, #11]
          break;
 8007216:	e089      	b.n	800732c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	7c12      	ldrb	r2, [r2, #16]
 8007230:	f107 0108 	add.w	r1, r7, #8
 8007234:	4610      	mov	r0, r2
 8007236:	4798      	blx	r3
 8007238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723a:	e077      	b.n	800732c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fa7a 	bl	8007738 <USBD_CtlError>
            err++;
 8007244:	7afb      	ldrb	r3, [r7, #11]
 8007246:	3301      	adds	r3, #1
 8007248:	72fb      	strb	r3, [r7, #11]
          break;
 800724a:	e06f      	b.n	800732c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00b      	beq.n	8007270 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	7c12      	ldrb	r2, [r2, #16]
 8007264:	f107 0108 	add.w	r1, r7, #8
 8007268:	4610      	mov	r0, r2
 800726a:	4798      	blx	r3
 800726c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800726e:	e05d      	b.n	800732c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa60 	bl	8007738 <USBD_CtlError>
            err++;
 8007278:	7afb      	ldrb	r3, [r7, #11]
 800727a:	3301      	adds	r3, #1
 800727c:	72fb      	strb	r3, [r7, #11]
          break;
 800727e:	e055      	b.n	800732c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00b      	beq.n	80072a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	7c12      	ldrb	r2, [r2, #16]
 8007298:	f107 0108 	add.w	r1, r7, #8
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a2:	e043      	b.n	800732c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fa46 	bl	8007738 <USBD_CtlError>
            err++;
 80072ac:	7afb      	ldrb	r3, [r7, #11]
 80072ae:	3301      	adds	r3, #1
 80072b0:	72fb      	strb	r3, [r7, #11]
          break;
 80072b2:	e03b      	b.n	800732c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	7c12      	ldrb	r2, [r2, #16]
 80072cc:	f107 0108 	add.w	r1, r7, #8
 80072d0:	4610      	mov	r0, r2
 80072d2:	4798      	blx	r3
 80072d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072d6:	e029      	b.n	800732c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa2c 	bl	8007738 <USBD_CtlError>
            err++;
 80072e0:	7afb      	ldrb	r3, [r7, #11]
 80072e2:	3301      	adds	r3, #1
 80072e4:	72fb      	strb	r3, [r7, #11]
          break;
 80072e6:	e021      	b.n	800732c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	7c12      	ldrb	r2, [r2, #16]
 8007300:	f107 0108 	add.w	r1, r7, #8
 8007304:	4610      	mov	r0, r2
 8007306:	4798      	blx	r3
 8007308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800730a:	e00f      	b.n	800732c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fa12 	bl	8007738 <USBD_CtlError>
            err++;
 8007314:	7afb      	ldrb	r3, [r7, #11]
 8007316:	3301      	adds	r3, #1
 8007318:	72fb      	strb	r3, [r7, #11]
          break;
 800731a:	e007      	b.n	800732c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa0a 	bl	8007738 <USBD_CtlError>
          err++;
 8007324:	7afb      	ldrb	r3, [r7, #11]
 8007326:	3301      	adds	r3, #1
 8007328:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800732a:	e038      	b.n	800739e <USBD_GetDescriptor+0x286>
 800732c:	e037      	b.n	800739e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7c1b      	ldrb	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800733c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800733e:	f107 0208 	add.w	r2, r7, #8
 8007342:	4610      	mov	r0, r2
 8007344:	4798      	blx	r3
 8007346:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007348:	e029      	b.n	800739e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f9f3 	bl	8007738 <USBD_CtlError>
        err++;
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	3301      	adds	r3, #1
 8007356:	72fb      	strb	r3, [r7, #11]
      break;
 8007358:	e021      	b.n	800739e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	7c1b      	ldrb	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10d      	bne.n	800737e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	f107 0208 	add.w	r2, r7, #8
 800736e:	4610      	mov	r0, r2
 8007370:	4798      	blx	r3
 8007372:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3301      	adds	r3, #1
 8007378:	2207      	movs	r2, #7
 800737a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800737c:	e00f      	b.n	800739e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f9d9 	bl	8007738 <USBD_CtlError>
        err++;
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	3301      	adds	r3, #1
 800738a:	72fb      	strb	r3, [r7, #11]
      break;
 800738c:	e007      	b.n	800739e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f9d1 	bl	8007738 <USBD_CtlError>
      err++;
 8007396:	7afb      	ldrb	r3, [r7, #11]
 8007398:	3301      	adds	r3, #1
 800739a:	72fb      	strb	r3, [r7, #11]
      break;
 800739c:	bf00      	nop
  }

  if (err != 0U)
 800739e:	7afb      	ldrb	r3, [r7, #11]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11c      	bne.n	80073de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80073a4:	893b      	ldrh	r3, [r7, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d011      	beq.n	80073ce <USBD_GetDescriptor+0x2b6>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	88db      	ldrh	r3, [r3, #6]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00d      	beq.n	80073ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	88da      	ldrh	r2, [r3, #6]
 80073b6:	893b      	ldrh	r3, [r7, #8]
 80073b8:	4293      	cmp	r3, r2
 80073ba:	bf28      	it	cs
 80073bc:	4613      	movcs	r3, r2
 80073be:	b29b      	uxth	r3, r3
 80073c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073c2:	893b      	ldrh	r3, [r7, #8]
 80073c4:	461a      	mov	r2, r3
 80073c6:	68f9      	ldr	r1, [r7, #12]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa1f 	bl	800780c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	88db      	ldrh	r3, [r3, #6]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fa76 	bl	80078c8 <USBD_CtlSendStatus>
 80073dc:	e000      	b.n	80073e0 <USBD_GetDescriptor+0x2c8>
    return;
 80073de:	bf00      	nop
    }
  }
}
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop

080073e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	889b      	ldrh	r3, [r3, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d130      	bne.n	800745c <USBD_SetAddress+0x74>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	88db      	ldrh	r3, [r3, #6]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d12c      	bne.n	800745c <USBD_SetAddress+0x74>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	885b      	ldrh	r3, [r3, #2]
 8007406:	2b7f      	cmp	r3, #127	@ 0x7f
 8007408:	d828      	bhi.n	800745c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	885b      	ldrh	r3, [r3, #2]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007414:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800741c:	2b03      	cmp	r3, #3
 800741e:	d104      	bne.n	800742a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f988 	bl	8007738 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007428:	e01d      	b.n	8007466 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	7bfa      	ldrb	r2, [r7, #15]
 800742e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fe7d 	bl	8008136 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fa43 	bl	80078c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007450:	e009      	b.n	8007466 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745a:	e004      	b.n	8007466 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f96a 	bl	8007738 <USBD_CtlError>
  }
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	885b      	ldrh	r3, [r3, #2]
 800747e:	b2da      	uxtb	r2, r3
 8007480:	4b41      	ldr	r3, [pc, #260]	@ (8007588 <USBD_SetConfig+0x118>)
 8007482:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007484:	4b40      	ldr	r3, [pc, #256]	@ (8007588 <USBD_SetConfig+0x118>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d904      	bls.n	8007496 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f952 	bl	8007738 <USBD_CtlError>
 8007494:	e075      	b.n	8007582 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800749c:	2b02      	cmp	r3, #2
 800749e:	d002      	beq.n	80074a6 <USBD_SetConfig+0x36>
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d023      	beq.n	80074ec <USBD_SetConfig+0x7c>
 80074a4:	e062      	b.n	800756c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80074a6:	4b38      	ldr	r3, [pc, #224]	@ (8007588 <USBD_SetConfig+0x118>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d01a      	beq.n	80074e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80074ae:	4b36      	ldr	r3, [pc, #216]	@ (8007588 <USBD_SetConfig+0x118>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2203      	movs	r2, #3
 80074bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074c0:	4b31      	ldr	r3, [pc, #196]	@ (8007588 <USBD_SetConfig+0x118>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff f9af 	bl	800682a <USBD_SetClassConfig>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d104      	bne.n	80074dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f92f 	bl	8007738 <USBD_CtlError>
            return;
 80074da:	e052      	b.n	8007582 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f9f3 	bl	80078c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074e2:	e04e      	b.n	8007582 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f9ef 	bl	80078c8 <USBD_CtlSendStatus>
        break;
 80074ea:	e04a      	b.n	8007582 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80074ec:	4b26      	ldr	r3, [pc, #152]	@ (8007588 <USBD_SetConfig+0x118>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d112      	bne.n	800751a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80074fc:	4b22      	ldr	r3, [pc, #136]	@ (8007588 <USBD_SetConfig+0x118>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007506:	4b20      	ldr	r3, [pc, #128]	@ (8007588 <USBD_SetConfig+0x118>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff f9ab 	bl	8006868 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f9d8 	bl	80078c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007518:	e033      	b.n	8007582 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800751a:	4b1b      	ldr	r3, [pc, #108]	@ (8007588 <USBD_SetConfig+0x118>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d01d      	beq.n	8007564 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff f999 	bl	8006868 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007536:	4b14      	ldr	r3, [pc, #80]	@ (8007588 <USBD_SetConfig+0x118>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007540:	4b11      	ldr	r3, [pc, #68]	@ (8007588 <USBD_SetConfig+0x118>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff f96f 	bl	800682a <USBD_SetClassConfig>
 800754c:	4603      	mov	r3, r0
 800754e:	2b02      	cmp	r3, #2
 8007550:	d104      	bne.n	800755c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f8ef 	bl	8007738 <USBD_CtlError>
            return;
 800755a:	e012      	b.n	8007582 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f9b3 	bl	80078c8 <USBD_CtlSendStatus>
        break;
 8007562:	e00e      	b.n	8007582 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f9af 	bl	80078c8 <USBD_CtlSendStatus>
        break;
 800756a:	e00a      	b.n	8007582 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f8e2 	bl	8007738 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007574:	4b04      	ldr	r3, [pc, #16]	@ (8007588 <USBD_SetConfig+0x118>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff f974 	bl	8006868 <USBD_ClrClassConfig>
        break;
 8007580:	bf00      	nop
    }
  }
}
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20001234 	.word	0x20001234

0800758c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d004      	beq.n	80075a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f8c9 	bl	8007738 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075a6:	e022      	b.n	80075ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	dc02      	bgt.n	80075b8 <USBD_GetConfig+0x2c>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc03      	bgt.n	80075be <USBD_GetConfig+0x32>
 80075b6:	e015      	b.n	80075e4 <USBD_GetConfig+0x58>
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d00b      	beq.n	80075d4 <USBD_GetConfig+0x48>
 80075bc:	e012      	b.n	80075e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3308      	adds	r3, #8
 80075c8:	2201      	movs	r2, #1
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f91d 	bl	800780c <USBD_CtlSendData>
        break;
 80075d2:	e00c      	b.n	80075ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3304      	adds	r3, #4
 80075d8:	2201      	movs	r2, #1
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f915 	bl	800780c <USBD_CtlSendData>
        break;
 80075e2:	e004      	b.n	80075ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f8a6 	bl	8007738 <USBD_CtlError>
        break;
 80075ec:	bf00      	nop
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007606:	3b01      	subs	r3, #1
 8007608:	2b02      	cmp	r3, #2
 800760a:	d81e      	bhi.n	800764a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	88db      	ldrh	r3, [r3, #6]
 8007610:	2b02      	cmp	r3, #2
 8007612:	d004      	beq.n	800761e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f88e 	bl	8007738 <USBD_CtlError>
        break;
 800761c:	e01a      	b.n	8007654 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	f043 0202 	orr.w	r2, r3, #2
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	330c      	adds	r3, #12
 800763e:	2202      	movs	r2, #2
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f8e2 	bl	800780c <USBD_CtlSendData>
      break;
 8007648:	e004      	b.n	8007654 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f873 	bl	8007738 <USBD_CtlError>
      break;
 8007652:	bf00      	nop
  }
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	885b      	ldrh	r3, [r3, #2]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d106      	bne.n	800767c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f926 	bl	80078c8 <USBD_CtlSendStatus>
  }
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007694:	3b01      	subs	r3, #1
 8007696:	2b02      	cmp	r3, #2
 8007698:	d80b      	bhi.n	80076b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	885b      	ldrh	r3, [r3, #2]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d10c      	bne.n	80076bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f90c 	bl	80078c8 <USBD_CtlSendStatus>
      }
      break;
 80076b0:	e004      	b.n	80076bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f83f 	bl	8007738 <USBD_CtlError>
      break;
 80076ba:	e000      	b.n	80076be <USBD_ClrFeature+0x3a>
      break;
 80076bc:	bf00      	nop
  }
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	785a      	ldrb	r2, [r3, #1]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	3302      	adds	r3, #2
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	3303      	adds	r3, #3
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4413      	add	r3, r2
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	3304      	adds	r3, #4
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	3305      	adds	r3, #5
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	b29b      	uxth	r3, r3
 800770c:	4413      	add	r3, r2
 800770e:	b29a      	uxth	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	3306      	adds	r3, #6
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	3307      	adds	r3, #7
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	b29b      	uxth	r3, r3
 8007726:	4413      	add	r3, r2
 8007728:	b29a      	uxth	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	80da      	strh	r2, [r3, #6]

}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr

08007738 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007742:	2180      	movs	r1, #128	@ 0x80
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc8d 	bl	8008064 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800774a:	2100      	movs	r1, #0
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fc89 	bl	8008064 <USBD_LL_StallEP>
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d032      	beq.n	80077d6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f834 	bl	80077de <USBD_GetLen>
 8007776:	4603      	mov	r3, r0
 8007778:	3301      	adds	r3, #1
 800777a:	b29b      	uxth	r3, r3
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	75fa      	strb	r2, [r7, #23]
 800778a:	461a      	mov	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4413      	add	r3, r2
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	7812      	ldrb	r2, [r2, #0]
 8007794:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	75fa      	strb	r2, [r7, #23]
 800779c:	461a      	mov	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	4413      	add	r3, r2
 80077a2:	2203      	movs	r2, #3
 80077a4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80077a6:	e012      	b.n	80077ce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	60fa      	str	r2, [r7, #12]
 80077ae:	7dfa      	ldrb	r2, [r7, #23]
 80077b0:	1c51      	adds	r1, r2, #1
 80077b2:	75f9      	strb	r1, [r7, #23]
 80077b4:	4611      	mov	r1, r2
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	440a      	add	r2, r1
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	75fa      	strb	r2, [r7, #23]
 80077c4:	461a      	mov	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	4413      	add	r3, r2
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e8      	bne.n	80077a8 <USBD_GetString+0x4e>
    }
  }
}
 80077d6:	bf00      	nop
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80077ea:	e005      	b.n	80077f8 <USBD_GetLen+0x1a>
  {
    len++;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	3301      	adds	r3, #1
 80077f0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3301      	adds	r3, #1
 80077f6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f5      	bne.n	80077ec <USBD_GetLen+0xe>
  }

  return len;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr

0800780c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2202      	movs	r2, #2
 800781e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	2100      	movs	r1, #0
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fc9d 	bl	8008174 <USBD_LL_Transmit>

  return USBD_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	4613      	mov	r3, r2
 8007850:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	2100      	movs	r1, #0
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 fc8b 	bl	8008174 <USBD_LL_Transmit>

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	4613      	mov	r3, r2
 8007874:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2203      	movs	r2, #3
 800787a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800787e:	88fa      	ldrh	r2, [r7, #6]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007886:	88fa      	ldrh	r2, [r7, #6]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	2100      	movs	r1, #0
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fc90 	bl	80081ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	2100      	movs	r1, #0
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fc7e 	bl	80081ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2204      	movs	r2, #4
 80078d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078d8:	2300      	movs	r3, #0
 80078da:	2200      	movs	r2, #0
 80078dc:	2100      	movs	r1, #0
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fc48 	bl	8008174 <USBD_LL_Transmit>

  return USBD_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2205      	movs	r2, #5
 80078fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078fe:	2300      	movs	r3, #0
 8007900:	2200      	movs	r2, #0
 8007902:	2100      	movs	r1, #0
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc58 	bl	80081ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007918:	2200      	movs	r2, #0
 800791a:	4912      	ldr	r1, [pc, #72]	@ (8007964 <MX_USB_DEVICE_Init+0x50>)
 800791c:	4812      	ldr	r0, [pc, #72]	@ (8007968 <MX_USB_DEVICE_Init+0x54>)
 800791e:	f7fe ff2a 	bl	8006776 <USBD_Init>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007928:	f7f9 ff1c 	bl	8001764 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800792c:	490f      	ldr	r1, [pc, #60]	@ (800796c <MX_USB_DEVICE_Init+0x58>)
 800792e:	480e      	ldr	r0, [pc, #56]	@ (8007968 <MX_USB_DEVICE_Init+0x54>)
 8007930:	f7fe ff4c 	bl	80067cc <USBD_RegisterClass>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800793a:	f7f9 ff13 	bl	8001764 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800793e:	490c      	ldr	r1, [pc, #48]	@ (8007970 <MX_USB_DEVICE_Init+0x5c>)
 8007940:	4809      	ldr	r0, [pc, #36]	@ (8007968 <MX_USB_DEVICE_Init+0x54>)
 8007942:	f7fe fe7d 	bl	8006640 <USBD_CDC_RegisterInterface>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800794c:	f7f9 ff0a 	bl	8001764 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007950:	4805      	ldr	r0, [pc, #20]	@ (8007968 <MX_USB_DEVICE_Init+0x54>)
 8007952:	f7fe ff54 	bl	80067fe <USBD_Start>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800795c:	f7f9 ff02 	bl	8001764 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007960:	bf00      	nop
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000130 	.word	0x20000130
 8007968:	20001238 	.word	0x20001238
 800796c:	2000001c 	.word	0x2000001c
 8007970:	20000120 	.word	0x20000120

08007974 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007978:	2200      	movs	r2, #0
 800797a:	4905      	ldr	r1, [pc, #20]	@ (8007990 <CDC_Init_FS+0x1c>)
 800797c:	4805      	ldr	r0, [pc, #20]	@ (8007994 <CDC_Init_FS+0x20>)
 800797e:	f7fe fe75 	bl	800666c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007982:	4905      	ldr	r1, [pc, #20]	@ (8007998 <CDC_Init_FS+0x24>)
 8007984:	4803      	ldr	r0, [pc, #12]	@ (8007994 <CDC_Init_FS+0x20>)
 8007986:	f7fe fe8a 	bl	800669e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800798a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800798c:	4618      	mov	r0, r3
 800798e:	bd80      	pop	{r7, pc}
 8007990:	200018e4 	.word	0x200018e4
 8007994:	20001238 	.word	0x20001238
 8007998:	200014fc 	.word	0x200014fc

0800799c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr
	...

080079ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	6039      	str	r1, [r7, #0]
 80079b6:	71fb      	strb	r3, [r7, #7]
 80079b8:	4613      	mov	r3, r2
 80079ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079bc:	79fb      	ldrb	r3, [r7, #7]
 80079be:	2b23      	cmp	r3, #35	@ 0x23
 80079c0:	d84a      	bhi.n	8007a58 <CDC_Control_FS+0xac>
 80079c2:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <CDC_Control_FS+0x1c>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	08007a59 	.word	0x08007a59
 80079cc:	08007a59 	.word	0x08007a59
 80079d0:	08007a59 	.word	0x08007a59
 80079d4:	08007a59 	.word	0x08007a59
 80079d8:	08007a59 	.word	0x08007a59
 80079dc:	08007a59 	.word	0x08007a59
 80079e0:	08007a59 	.word	0x08007a59
 80079e4:	08007a59 	.word	0x08007a59
 80079e8:	08007a59 	.word	0x08007a59
 80079ec:	08007a59 	.word	0x08007a59
 80079f0:	08007a59 	.word	0x08007a59
 80079f4:	08007a59 	.word	0x08007a59
 80079f8:	08007a59 	.word	0x08007a59
 80079fc:	08007a59 	.word	0x08007a59
 8007a00:	08007a59 	.word	0x08007a59
 8007a04:	08007a59 	.word	0x08007a59
 8007a08:	08007a59 	.word	0x08007a59
 8007a0c:	08007a59 	.word	0x08007a59
 8007a10:	08007a59 	.word	0x08007a59
 8007a14:	08007a59 	.word	0x08007a59
 8007a18:	08007a59 	.word	0x08007a59
 8007a1c:	08007a59 	.word	0x08007a59
 8007a20:	08007a59 	.word	0x08007a59
 8007a24:	08007a59 	.word	0x08007a59
 8007a28:	08007a59 	.word	0x08007a59
 8007a2c:	08007a59 	.word	0x08007a59
 8007a30:	08007a59 	.word	0x08007a59
 8007a34:	08007a59 	.word	0x08007a59
 8007a38:	08007a59 	.word	0x08007a59
 8007a3c:	08007a59 	.word	0x08007a59
 8007a40:	08007a59 	.word	0x08007a59
 8007a44:	08007a59 	.word	0x08007a59
 8007a48:	08007a59 	.word	0x08007a59
 8007a4c:	08007a59 	.word	0x08007a59
 8007a50:	08007a59 	.word	0x08007a59
 8007a54:	08007a59 	.word	0x08007a59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a58:	bf00      	nop
  }

  return (USBD_OK);
 8007a5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bc80      	pop	{r7}
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop

08007a68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4808      	ldr	r0, [pc, #32]	@ (8007a98 <CDC_Receive_FS+0x30>)
 8007a76:	f7fe fe12 	bl	800669e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a7a:	4807      	ldr	r0, [pc, #28]	@ (8007a98 <CDC_Receive_FS+0x30>)
 8007a7c:	f7fe fe51 	bl	8006722 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7f8 fd96 	bl	80005b8 <CDC_ReceiveCallback>
  return (USBD_OK);
 8007a8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20001238 	.word	0x20001238

08007a9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007aac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <CDC_Transmit_FS+0x48>)
 8007aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e00b      	b.n	8007ada <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007ac2:	887b      	ldrh	r3, [r7, #2]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4806      	ldr	r0, [pc, #24]	@ (8007ae4 <CDC_Transmit_FS+0x48>)
 8007aca:	f7fe fdcf 	bl	800666c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ace:	4805      	ldr	r0, [pc, #20]	@ (8007ae4 <CDC_Transmit_FS+0x48>)
 8007ad0:	f7fe fdf8 	bl	80066c4 <USBD_CDC_TransmitPacket>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20001238 	.word	0x20001238

08007ae8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	6039      	str	r1, [r7, #0]
 8007af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2212      	movs	r2, #18
 8007af8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007afa:	4b03      	ldr	r3, [pc, #12]	@ (8007b08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	2000014c 	.word	0x2000014c

08007b0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2204      	movs	r2, #4
 8007b1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b1e:	4b03      	ldr	r3, [pc, #12]	@ (8007b2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20000160 	.word	0x20000160

08007b30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	4907      	ldr	r1, [pc, #28]	@ (8007b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b46:	4808      	ldr	r0, [pc, #32]	@ (8007b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b48:	f7ff fe07 	bl	800775a <USBD_GetString>
 8007b4c:	e004      	b.n	8007b58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	4904      	ldr	r1, [pc, #16]	@ (8007b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b52:	4805      	ldr	r0, [pc, #20]	@ (8007b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b54:	f7ff fe01 	bl	800775a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b58:	4b02      	ldr	r3, [pc, #8]	@ (8007b64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20001ccc 	.word	0x20001ccc
 8007b68:	0800831c 	.word	0x0800831c

08007b6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	6039      	str	r1, [r7, #0]
 8007b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	4904      	ldr	r1, [pc, #16]	@ (8007b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b7c:	4804      	ldr	r0, [pc, #16]	@ (8007b90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b7e:	f7ff fdec 	bl	800775a <USBD_GetString>
  return USBD_StrDesc;
 8007b82:	4b02      	ldr	r3, [pc, #8]	@ (8007b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20001ccc 	.word	0x20001ccc
 8007b90:	08008334 	.word	0x08008334

08007b94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	221a      	movs	r2, #26
 8007ba4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ba6:	f000 f843 	bl	8007c30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007baa:	4b02      	ldr	r3, [pc, #8]	@ (8007bb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	20000164 	.word	0x20000164

08007bb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	6039      	str	r1, [r7, #0]
 8007bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4907      	ldr	r1, [pc, #28]	@ (8007bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bce:	4808      	ldr	r0, [pc, #32]	@ (8007bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bd0:	f7ff fdc3 	bl	800775a <USBD_GetString>
 8007bd4:	e004      	b.n	8007be0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	4904      	ldr	r1, [pc, #16]	@ (8007bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bda:	4805      	ldr	r0, [pc, #20]	@ (8007bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bdc:	f7ff fdbd 	bl	800775a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007be0:	4b02      	ldr	r3, [pc, #8]	@ (8007bec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20001ccc 	.word	0x20001ccc
 8007bf0:	08008348 	.word	0x08008348

08007bf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d105      	bne.n	8007c12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	4907      	ldr	r1, [pc, #28]	@ (8007c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c0a:	4808      	ldr	r0, [pc, #32]	@ (8007c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c0c:	f7ff fda5 	bl	800775a <USBD_GetString>
 8007c10:	e004      	b.n	8007c1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	4904      	ldr	r1, [pc, #16]	@ (8007c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c16:	4805      	ldr	r0, [pc, #20]	@ (8007c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c18:	f7ff fd9f 	bl	800775a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c1c:	4b02      	ldr	r3, [pc, #8]	@ (8007c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20001ccc 	.word	0x20001ccc
 8007c2c:	08008354 	.word	0x08008354

08007c30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c36:	4b0f      	ldr	r3, [pc, #60]	@ (8007c74 <Get_SerialNum+0x44>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c78 <Get_SerialNum+0x48>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c42:	4b0e      	ldr	r3, [pc, #56]	@ (8007c7c <Get_SerialNum+0x4c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c56:	2208      	movs	r2, #8
 8007c58:	4909      	ldr	r1, [pc, #36]	@ (8007c80 <Get_SerialNum+0x50>)
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 f814 	bl	8007c88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c60:	2204      	movs	r2, #4
 8007c62:	4908      	ldr	r1, [pc, #32]	@ (8007c84 <Get_SerialNum+0x54>)
 8007c64:	68b8      	ldr	r0, [r7, #8]
 8007c66:	f000 f80f 	bl	8007c88 <IntToUnicode>
  }
}
 8007c6a:	bf00      	nop
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	1ffff7e8 	.word	0x1ffff7e8
 8007c78:	1ffff7ec 	.word	0x1ffff7ec
 8007c7c:	1ffff7f0 	.word	0x1ffff7f0
 8007c80:	20000166 	.word	0x20000166
 8007c84:	20000176 	.word	0x20000176

08007c88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75fb      	strb	r3, [r7, #23]
 8007c9e:	e027      	b.n	8007cf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	0f1b      	lsrs	r3, r3, #28
 8007ca4:	2b09      	cmp	r3, #9
 8007ca6:	d80b      	bhi.n	8007cc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	0f1b      	lsrs	r3, r3, #28
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	440b      	add	r3, r1
 8007cb8:	3230      	adds	r2, #48	@ 0x30
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	e00a      	b.n	8007cd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	0f1b      	lsrs	r3, r3, #28
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	4619      	mov	r1, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	440b      	add	r3, r1
 8007cd0:	3237      	adds	r2, #55	@ 0x37
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	3301      	adds	r3, #1
 8007cee:	75fb      	strb	r3, [r7, #23]
 8007cf0:	7dfa      	ldrb	r2, [r7, #23]
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d3d3      	bcc.n	8007ca0 <IntToUnicode+0x18>
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr

08007d04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d14:	d113      	bne.n	8007d3e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d16:	4b0c      	ldr	r3, [pc, #48]	@ (8007d48 <HAL_PCD_MspInit+0x44>)
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8007d48 <HAL_PCD_MspInit+0x44>)
 8007d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d20:	6153      	str	r3, [r2, #20]
 8007d22:	4b09      	ldr	r3, [pc, #36]	@ (8007d48 <HAL_PCD_MspInit+0x44>)
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	2043      	movs	r0, #67	@ 0x43
 8007d34:	f7fa f851 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d38:	2043      	movs	r0, #67	@ 0x43
 8007d3a:	f7fa f86a 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	40021000 	.word	0x40021000

08007d4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f7fe fd93 	bl	800688e <USBD_LL_SetupStage>
}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	440b      	add	r3, r1
 8007d90:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f7fe fdc5 	bl	8006928 <USBD_LL_DataOutStage>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 8007db8:	78fa      	ldrb	r2, [r7, #3]
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	3348      	adds	r3, #72	@ 0x48
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f7fe fe1c 	bl	8006a0a <USBD_LL_DataInStage>
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe ff2c 	bl	8006c46 <USBD_LL_SOF>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d001      	beq.n	8007e0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e0a:	f7f9 fcab 	bl	8001764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007e14:	7bfa      	ldrb	r2, [r7, #15]
 8007e16:	4611      	mov	r1, r2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe fedc 	bl	8006bd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe fe95 	bl	8006b54 <USBD_LL_Reset>
}
 8007e2a:	bf00      	nop
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fed6 	bl	8006bf4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	6812      	ldr	r2, [r2, #0]
 8007e56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d005      	beq.n	8007e74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e68:	4b04      	ldr	r3, [pc, #16]	@ (8007e7c <HAL_PCD_SuspendCallback+0x48>)
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	4a03      	ldr	r2, [pc, #12]	@ (8007e7c <HAL_PCD_SuspendCallback+0x48>)
 8007e6e:	f043 0306 	orr.w	r3, r3, #6
 8007e72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e74:	bf00      	nop
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	e000ed00 	.word	0xe000ed00

08007e80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe fec4 	bl	8006c1c <USBD_LL_Resume>
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007eae:	78fa      	ldrb	r2, [r7, #3]
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe feed 	bl	8006c92 <USBD_LL_IsoOUTIncomplete>
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007ed2:	78fa      	ldrb	r2, [r7, #3]
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe fecf 	bl	8006c7a <USBD_LL_IsoINIncomplete>
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fed9 	bl	8006caa <USBD_LL_DevConnected>
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe fed5 	bl	8006cbe <USBD_LL_DevDisconnected>
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d133      	bne.n	8007f94 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a1a      	ldr	r2, [pc, #104]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f38:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f3c:	4b18      	ldr	r3, [pc, #96]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007f42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f44:	4b16      	ldr	r3, [pc, #88]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f46:	2204      	movs	r2, #4
 8007f48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f4a:	4b15      	ldr	r3, [pc, #84]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f50:	4b13      	ldr	r3, [pc, #76]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f52:	2202      	movs	r2, #2
 8007f54:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f56:	4b12      	ldr	r3, [pc, #72]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f5c:	4b10      	ldr	r3, [pc, #64]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f62:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f68:	480d      	ldr	r0, [pc, #52]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f6a:	f7fa fa4d 	bl	8002408 <HAL_PCD_Init>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8007f74:	f7f9 fbf6 	bl	8001764 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f78:	2180      	movs	r1, #128	@ 0x80
 8007f7a:	4809      	ldr	r0, [pc, #36]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f7c:	f7fb fb66 	bl	800364c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f80:	2240      	movs	r2, #64	@ 0x40
 8007f82:	2100      	movs	r1, #0
 8007f84:	4806      	ldr	r0, [pc, #24]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f86:	f7fb fb1b 	bl	80035c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f8a:	2280      	movs	r2, #128	@ 0x80
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	4804      	ldr	r0, [pc, #16]	@ (8007fa0 <USBD_LL_Init+0x84>)
 8007f90:	f7fb fb16 	bl	80035c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20001ecc 	.word	0x20001ecc

08007fa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fa fb41 	bl	8002642 <HAL_PCD_Start>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f944 	bl	8008254 <USBD_Get_USB_Status>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	4608      	mov	r0, r1
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	4603      	mov	r3, r0
 8007fea:	70fb      	strb	r3, [r7, #3]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70bb      	strb	r3, [r7, #2]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008002:	78bb      	ldrb	r3, [r7, #2]
 8008004:	883a      	ldrh	r2, [r7, #0]
 8008006:	78f9      	ldrb	r1, [r7, #3]
 8008008:	f7fa ffba 	bl	8002f80 <HAL_PCD_EP_Open>
 800800c:	4603      	mov	r3, r0
 800800e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f91e 	bl	8008254 <USBD_Get_USB_Status>
 8008018:	4603      	mov	r3, r0
 800801a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800801c:	7bbb      	ldrb	r3, [r7, #14]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008040:	78fa      	ldrb	r2, [r7, #3]
 8008042:	4611      	mov	r1, r2
 8008044:	4618      	mov	r0, r3
 8008046:	f7fb f803 	bl	8003050 <HAL_PCD_EP_Close>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f8ff 	bl	8008254 <USBD_Get_USB_Status>
 8008056:	4603      	mov	r3, r0
 8008058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800805a:	7bbb      	ldrb	r3, [r7, #14]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	4611      	mov	r1, r2
 8008082:	4618      	mov	r0, r3
 8008084:	f7fb f8a8 	bl	80031d8 <HAL_PCD_EP_SetStall>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f8e0 	bl	8008254 <USBD_Get_USB_Status>
 8008094:	4603      	mov	r3, r0
 8008096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008098:	7bbb      	ldrb	r3, [r7, #14]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	4611      	mov	r1, r2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fb f8eb 	bl	800329c <HAL_PCD_EP_ClrStall>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 f8c1 	bl	8008254 <USBD_Get_USB_Status>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	da0b      	bge.n	8008114 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008102:	68f9      	ldr	r1, [r7, #12]
 8008104:	4613      	mov	r3, r2
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	333e      	adds	r3, #62	@ 0x3e
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	e00b      	b.n	800812c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800811a:	68f9      	ldr	r1, [r7, #12]
 800811c:	4613      	mov	r3, r2
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800812a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr

08008136 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	4611      	mov	r1, r2
 8008154:	4618      	mov	r0, r3
 8008156:	f7fa feee 	bl	8002f36 <HAL_PCD_SetAddress>
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	4618      	mov	r0, r3
 8008162:	f000 f877 	bl	8008254 <USBD_Get_USB_Status>
 8008166:	4603      	mov	r3, r0
 8008168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800816a:	7bbb      	ldrb	r3, [r7, #14]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	607a      	str	r2, [r7, #4]
 800817e:	461a      	mov	r2, r3
 8008180:	460b      	mov	r3, r1
 8008182:	72fb      	strb	r3, [r7, #11]
 8008184:	4613      	mov	r3, r2
 8008186:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008196:	893b      	ldrh	r3, [r7, #8]
 8008198:	7af9      	ldrb	r1, [r7, #11]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	f7fa ffeb 	bl	8003176 <HAL_PCD_EP_Transmit>
 80081a0:	4603      	mov	r3, r0
 80081a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 f854 	bl	8008254 <USBD_Get_USB_Status>
 80081ac:	4603      	mov	r3, r0
 80081ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	461a      	mov	r2, r3
 80081c6:	460b      	mov	r3, r1
 80081c8:	72fb      	strb	r3, [r7, #11]
 80081ca:	4613      	mov	r3, r2
 80081cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081dc:	893b      	ldrh	r3, [r7, #8]
 80081de:	7af9      	ldrb	r1, [r7, #11]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	f7fa ff7f 	bl	80030e4 <HAL_PCD_EP_Receive>
 80081e6:	4603      	mov	r3, r0
 80081e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 f831 	bl	8008254 <USBD_Get_USB_Status>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008212:	78fa      	ldrb	r2, [r7, #3]
 8008214:	4611      	mov	r1, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f7fa ff96 	bl	8003148 <HAL_PCD_EP_GetRxCount>
 800821c:	4603      	mov	r3, r0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008230:	4b02      	ldr	r3, [pc, #8]	@ (800823c <USBD_static_malloc+0x14>)
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr
 800823c:	200023d0 	.word	0x200023d0

08008240 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]

}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	bc80      	pop	{r7}
 8008250:	4770      	bx	lr
	...

08008254 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008262:	79fb      	ldrb	r3, [r7, #7]
 8008264:	2b03      	cmp	r3, #3
 8008266:	d817      	bhi.n	8008298 <USBD_Get_USB_Status+0x44>
 8008268:	a201      	add	r2, pc, #4	@ (adr r2, 8008270 <USBD_Get_USB_Status+0x1c>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	08008281 	.word	0x08008281
 8008274:	08008287 	.word	0x08008287
 8008278:	0800828d 	.word	0x0800828d
 800827c:	08008293 	.word	0x08008293
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
    break;
 8008284:	e00b      	b.n	800829e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008286:	2302      	movs	r3, #2
 8008288:	73fb      	strb	r3, [r7, #15]
    break;
 800828a:	e008      	b.n	800829e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800828c:	2301      	movs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
    break;
 8008290:	e005      	b.n	800829e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	73fb      	strb	r3, [r7, #15]
    break;
 8008296:	e002      	b.n	800829e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008298:	2302      	movs	r3, #2
 800829a:	73fb      	strb	r3, [r7, #15]
    break;
 800829c:	bf00      	nop
  }
  return usb_status;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop

080082ac <memset>:
 80082ac:	4603      	mov	r3, r0
 80082ae:	4402      	add	r2, r0
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d100      	bne.n	80082b6 <memset+0xa>
 80082b4:	4770      	bx	lr
 80082b6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ba:	e7f9      	b.n	80082b0 <memset+0x4>

080082bc <__libc_init_array>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	2600      	movs	r6, #0
 80082c0:	4d0c      	ldr	r5, [pc, #48]	@ (80082f4 <__libc_init_array+0x38>)
 80082c2:	4c0d      	ldr	r4, [pc, #52]	@ (80082f8 <__libc_init_array+0x3c>)
 80082c4:	1b64      	subs	r4, r4, r5
 80082c6:	10a4      	asrs	r4, r4, #2
 80082c8:	42a6      	cmp	r6, r4
 80082ca:	d109      	bne.n	80082e0 <__libc_init_array+0x24>
 80082cc:	f000 f81a 	bl	8008304 <_init>
 80082d0:	2600      	movs	r6, #0
 80082d2:	4d0a      	ldr	r5, [pc, #40]	@ (80082fc <__libc_init_array+0x40>)
 80082d4:	4c0a      	ldr	r4, [pc, #40]	@ (8008300 <__libc_init_array+0x44>)
 80082d6:	1b64      	subs	r4, r4, r5
 80082d8:	10a4      	asrs	r4, r4, #2
 80082da:	42a6      	cmp	r6, r4
 80082dc:	d105      	bne.n	80082ea <__libc_init_array+0x2e>
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e4:	4798      	blx	r3
 80082e6:	3601      	adds	r6, #1
 80082e8:	e7ee      	b.n	80082c8 <__libc_init_array+0xc>
 80082ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ee:	4798      	blx	r3
 80082f0:	3601      	adds	r6, #1
 80082f2:	e7f2      	b.n	80082da <__libc_init_array+0x1e>
 80082f4:	080085a4 	.word	0x080085a4
 80082f8:	080085a4 	.word	0x080085a4
 80082fc:	080085a4 	.word	0x080085a4
 8008300:	080085a8 	.word	0x080085a8

08008304 <_init>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr

08008310 <_fini>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr
