
MINI_STM_MAIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009170  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800927c  0800927c  0001927c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094e8  080094e8  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  080094e8  080094e8  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094e8  080094e8  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094ec  080094ec  000194ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080094f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a4  20000188  08009678  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000232c  08009678  0002232c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118a2  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031bb  00000000  00000000  00031a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00034c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7e  00000000  00000000  00035cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019efa  00000000  00000000  0003694e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e26  00000000  00000000  00050848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ceba  00000000  00000000  0006466e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000438c  00000000  00000000  000f1528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000f58b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08009264 	.word	0x08009264

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08009264 	.word	0x08009264

0800014c <calculateCRC>:
#define ROM_START_ADDRESS 0x08010000
#define PAGE_SIZE ((int32_t)FLASH_PAGE_SIZE)
#define PACKET_SIZE sizeof(ModbusDevice)

/* CRC Calculation Function */
int16_t calculateCRC(uint8_t *buffer, uint16_t length) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
    int16_t crc = 0xFFFF;
 8000158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015c:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < length; ++i) {
 800015e:	2300      	movs	r3, #0
 8000160:	60bb      	str	r3, [r7, #8]
 8000162:	e012      	b.n	800018a <calculateCRC+0x3e>
        crc = (crc >> 8) ^ crcTable[(crc & 0xFF) ^ buffer[i]];
 8000164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000168:	121b      	asrs	r3, r3, #8
 800016a:	b21a      	sxth	r2, r3
 800016c:	89fb      	ldrh	r3, [r7, #14]
 800016e:	b2db      	uxtb	r3, r3
 8000170:	68b9      	ldr	r1, [r7, #8]
 8000172:	6878      	ldr	r0, [r7, #4]
 8000174:	4401      	add	r1, r0
 8000176:	7809      	ldrb	r1, [r1, #0]
 8000178:	404b      	eors	r3, r1
 800017a:	4909      	ldr	r1, [pc, #36]	; (80001a0 <calculateCRC+0x54>)
 800017c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000180:	4053      	eors	r3, r2
 8000182:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < length; ++i) {
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	887b      	ldrh	r3, [r7, #2]
 800018c:	68ba      	ldr	r2, [r7, #8]
 800018e:	429a      	cmp	r2, r3
 8000190:	dbe8      	blt.n	8000164 <calculateCRC+0x18>
    }
    return crc;
 8000192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000196:	4618      	mov	r0, r3
 8000198:	3714      	adds	r7, #20
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	080092c4 	.word	0x080092c4

080001a4 <CDC_ReceiveCallback>:
void CDC_Transmit_String(char* string) {
    CDC_Transmit_FS((uint8_t*)string, strlen(string));
}


void CDC_ReceiveCallback(uint8_t *buf, uint32_t len) {
 80001a4:	b480      	push	{r7}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	6039      	str	r1, [r7, #0]

    if (calculated_crc != received_crc) {
        return;
    }
	*/
    slave_address = buf[0];
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	b25a      	sxtb	r2, r3
 80001b4:	4b34      	ldr	r3, [pc, #208]	; (8000288 <CDC_ReceiveCallback+0xe4>)
 80001b6:	701a      	strb	r2, [r3, #0]
    function_code = buf[1];
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3301      	adds	r3, #1
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	b21a      	sxth	r2, r3
 80001c0:	4b32      	ldr	r3, [pc, #200]	; (800028c <CDC_ReceiveCallback+0xe8>)
 80001c2:	801a      	strh	r2, [r3, #0]
    starting_address = (buf[2] << 8) | buf[3];
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	3302      	adds	r3, #2
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	021b      	lsls	r3, r3, #8
 80001cc:	b21a      	sxth	r2, r3
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	3303      	adds	r3, #3
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	b21b      	sxth	r3, r3
 80001d6:	4313      	orrs	r3, r2
 80001d8:	b21a      	sxth	r2, r3
 80001da:	4b2d      	ldr	r3, [pc, #180]	; (8000290 <CDC_ReceiveCallback+0xec>)
 80001dc:	801a      	strh	r2, [r3, #0]
    length = (buf[4] << 8) | buf[5];
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	3304      	adds	r3, #4
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	021b      	lsls	r3, r3, #8
 80001e6:	b21a      	sxth	r2, r3
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	3305      	adds	r3, #5
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	b21b      	sxth	r3, r3
 80001f0:	4313      	orrs	r3, r2
 80001f2:	b21a      	sxth	r2, r3
 80001f4:	4b27      	ldr	r3, [pc, #156]	; (8000294 <CDC_ReceiveCallback+0xf0>)
 80001f6:	801a      	strh	r2, [r3, #0]
    new_data_received = 1;
 80001f8:	4b27      	ldr	r3, [pc, #156]	; (8000298 <CDC_ReceiveCallback+0xf4>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	701a      	strb	r2, [r3, #0]

    if (function_code == 16 && len >= 9 + length) {
 80001fe:	4b23      	ldr	r3, [pc, #140]	; (800028c <CDC_ReceiveCallback+0xe8>)
 8000200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000204:	2b10      	cmp	r3, #16
 8000206:	d139      	bne.n	800027c <CDC_ReceiveCallback+0xd8>
 8000208:	4b22      	ldr	r3, [pc, #136]	; (8000294 <CDC_ReceiveCallback+0xf0>)
 800020a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800020e:	3309      	adds	r3, #9
 8000210:	461a      	mov	r2, r3
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	4293      	cmp	r3, r2
 8000216:	d331      	bcc.n	800027c <CDC_ReceiveCallback+0xd8>
        number_of_bytes = buf[6];
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	3306      	adds	r3, #6
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	b25a      	sxtb	r2, r3
 8000220:	4b1e      	ldr	r3, [pc, #120]	; (800029c <CDC_ReceiveCallback+0xf8>)
 8000222:	701a      	strb	r2, [r3, #0]
        for (int8_t i = 0; i < number_of_bytes; i += 2) {
 8000224:	2300      	movs	r3, #0
 8000226:	73fb      	strb	r3, [r7, #15]
 8000228:	e021      	b.n	800026e <CDC_ReceiveCallback+0xca>
            value[i / 2] = (buf[7 + i] << 8) | buf[8 + i];
 800022a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800022e:	3307      	adds	r3, #7
 8000230:	461a      	mov	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	b219      	sxth	r1, r3
 800023c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000240:	3308      	adds	r3, #8
 8000242:	461a      	mov	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4413      	add	r3, r2
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b21a      	sxth	r2, r3
 800024c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000250:	0fd8      	lsrs	r0, r3, #31
 8000252:	4403      	add	r3, r0
 8000254:	105b      	asrs	r3, r3, #1
 8000256:	b25b      	sxtb	r3, r3
 8000258:	4618      	mov	r0, r3
 800025a:	ea41 0302 	orr.w	r3, r1, r2
 800025e:	b21a      	sxth	r2, r3
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <CDC_ReceiveCallback+0xfc>)
 8000262:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
        for (int8_t i = 0; i < number_of_bytes; i += 2) {
 8000266:	7bfb      	ldrb	r3, [r7, #15]
 8000268:	3302      	adds	r3, #2
 800026a:	b2db      	uxtb	r3, r3
 800026c:	73fb      	strb	r3, [r7, #15]
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <CDC_ReceiveCallback+0xf8>)
 8000270:	f993 3000 	ldrsb.w	r3, [r3]
 8000274:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000278:	429a      	cmp	r2, r3
 800027a:	dbd6      	blt.n	800022a <CDC_ReceiveCallback+0x86>
        }
    }
}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	20000004 	.word	0x20000004
 800028c:	20000236 	.word	0x20000236
 8000290:	2000024a 	.word	0x2000024a
 8000294:	20000234 	.word	0x20000234
 8000298:	20000238 	.word	0x20000238
 800029c:	20000248 	.word	0x20000248
 80002a0:	20000240 	.word	0x20000240

080002a4 <initialize_device>:

void initialize_device(int8_t slave_address) {
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
    for (int16_t i = 0; i < 300; i++) {
 80002ae:	2300      	movs	r3, #0
 80002b0:	81fb      	strh	r3, [r7, #14]
 80002b2:	e00f      	b.n	80002d4 <initialize_device+0x30>
        modbusDevices[slave_address].data[i] = 0;
 80002b4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80002b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002bc:	490b      	ldr	r1, [pc, #44]	; (80002ec <initialize_device+0x48>)
 80002be:	01d2      	lsls	r2, r2, #7
 80002c0:	4413      	add	r3, r2
 80002c2:	2200      	movs	r2, #0
 80002c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int16_t i = 0; i < 300; i++) {
 80002c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	3301      	adds	r3, #1
 80002d0:	b29b      	uxth	r3, r3
 80002d2:	81fb      	strh	r3, [r7, #14]
 80002d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80002dc:	dbea      	blt.n	80002b4 <initialize_device+0x10>
    }
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	2000025c 	.word	0x2000025c

080002f0 <write_to_modbus>:

void write_to_modbus(uint8_t index,int16_t value){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	460a      	mov	r2, r1
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	4613      	mov	r3, r2
 80002fe:	80bb      	strh	r3, [r7, #4]
	modbusDevices[slave_address].data[index]= value;
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <write_to_modbus+0x30>)
 8000302:	f993 3000 	ldrsb.w	r3, [r3]
 8000306:	461a      	mov	r2, r3
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4906      	ldr	r1, [pc, #24]	; (8000324 <write_to_modbus+0x34>)
 800030c:	01d2      	lsls	r2, r2, #7
 800030e:	4413      	add	r3, r2
 8000310:	88ba      	ldrh	r2, [r7, #4]
 8000312:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	20000004 	.word	0x20000004
 8000324:	2000025c 	.word	0x2000025c

08000328 <write_command>:

void write_command(int8_t slave_address, int16_t starting_address, int16_t length) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	460b      	mov	r3, r1
 8000334:	80bb      	strh	r3, [r7, #4]
 8000336:	4613      	mov	r3, r2
 8000338:	807b      	strh	r3, [r7, #2]
	modbusDevices[slave_address].data[starting_address] = length;
 800033a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800033e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000342:	4905      	ldr	r1, [pc, #20]	; (8000358 <write_command+0x30>)
 8000344:	01d2      	lsls	r2, r2, #7
 8000346:	4413      	add	r3, r2
 8000348:	887a      	ldrh	r2, [r7, #2]
 800034a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	2000025c 	.word	0x2000025c

0800035c <write_multiple_command>:
void write_multiple_command(int8_t slave_address, int16_t starting_address, int16_t length, int16_t* value) {
 800035c:	b480      	push	{r7}
 800035e:	b087      	sub	sp, #28
 8000360:	af00      	add	r7, sp, #0
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	4603      	mov	r3, r0
 8000366:	73fb      	strb	r3, [r7, #15]
 8000368:	460b      	mov	r3, r1
 800036a:	81bb      	strh	r3, [r7, #12]
 800036c:	4613      	mov	r3, r2
 800036e:	817b      	strh	r3, [r7, #10]
    for (int16_t i = 0; i < number_of_bytes/2; i++) {
 8000370:	2300      	movs	r3, #0
 8000372:	82fb      	strh	r3, [r7, #22]
 8000374:	e019      	b.n	80003aa <write_multiple_command+0x4e>
        modbusDevices[slave_address].data[starting_address + i] = value[i];
 8000376:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	18d1      	adds	r1, r2, r3
 8000380:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000384:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8000388:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800038c:	4403      	add	r3, r0
 800038e:	f9b1 0000 	ldrsh.w	r0, [r1]
 8000392:	490f      	ldr	r1, [pc, #60]	; (80003d0 <write_multiple_command+0x74>)
 8000394:	01d2      	lsls	r2, r2, #7
 8000396:	4413      	add	r3, r2
 8000398:	4602      	mov	r2, r0
 800039a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int16_t i = 0; i < number_of_bytes/2; i++) {
 800039e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	3301      	adds	r3, #1
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	82fb      	strh	r3, [r7, #22]
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <write_multiple_command+0x78>)
 80003ac:	f993 3000 	ldrsb.w	r3, [r3]
 80003b0:	0fda      	lsrs	r2, r3, #31
 80003b2:	4413      	add	r3, r2
 80003b4:	105b      	asrs	r3, r3, #1
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	b21b      	sxth	r3, r3
 80003ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80003be:	429a      	cmp	r2, r3
 80003c0:	dbd9      	blt.n	8000376 <write_multiple_command+0x1a>
        //CDC_Transmit_FS(modbusDevices[slave_address].data, 10);
    }

}
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
 80003c6:	371c      	adds	r7, #28
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	2000025c 	.word	0x2000025c
 80003d4:	20000248 	.word	0x20000248

080003d8 <read_command>:
void read_command(int8_t slave_address, int16_t starting_address, int16_t length, int16_t crc) {
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b0a5      	sub	sp, #148	; 0x94
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4604      	mov	r4, r0
 80003e0:	4608      	mov	r0, r1
 80003e2:	4611      	mov	r1, r2
 80003e4:	461a      	mov	r2, r3
 80003e6:	4623      	mov	r3, r4
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	4603      	mov	r3, r0
 80003ec:	80bb      	strh	r3, [r7, #4]
 80003ee:	460b      	mov	r3, r1
 80003f0:	807b      	strh	r3, [r7, #2]
 80003f2:	4613      	mov	r3, r2
 80003f4:	803b      	strh	r3, [r7, #0]
    uint8_t response[128] = {0};
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	227c      	movs	r2, #124	; 0x7c
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f008 ff02 	bl	800920c <memset>
    uint8_t response_length = 3 + length * 2 + 2;
 8000408:	887b      	ldrh	r3, [r7, #2]
 800040a:	b2db      	uxtb	r3, r3
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	b2db      	uxtb	r3, r3
 8000410:	3305      	adds	r3, #5
 8000412:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    if (starting_address + length <= 128) {
 8000416:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800041a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800041e:	4413      	add	r3, r2
 8000420:	2b80      	cmp	r3, #128	; 0x80
 8000422:	dc71      	bgt.n	8000508 <read_command+0x130>
        response[0] = slave_address;
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	733b      	strb	r3, [r7, #12]
        response[1] = 0x03;
 8000428:	2303      	movs	r3, #3
 800042a:	737b      	strb	r3, [r7, #13]
        response[2] = length * 2;
 800042c:	887b      	ldrh	r3, [r7, #2]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	b2db      	uxtb	r3, r3
 8000434:	73bb      	strb	r3, [r7, #14]

        for (int8_t i = 0; i < length; i++) {
 8000436:	2300      	movs	r3, #0
 8000438:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800043c:	e032      	b.n	80004a4 <read_command+0xcc>
            response[3 + i * 2] = modbusDevices[slave_address].data[starting_address + i] >> 8;
 800043e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000442:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000446:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800044a:	440b      	add	r3, r1
 800044c:	4930      	ldr	r1, [pc, #192]	; (8000510 <read_command+0x138>)
 800044e:	01d2      	lsls	r2, r2, #7
 8000450:	4413      	add	r3, r2
 8000452:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000456:	121b      	asrs	r3, r3, #8
 8000458:	b21a      	sxth	r2, r3
 800045a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	3303      	adds	r3, #3
 8000462:	b2d2      	uxtb	r2, r2
 8000464:	3390      	adds	r3, #144	; 0x90
 8000466:	443b      	add	r3, r7
 8000468:	f803 2c84 	strb.w	r2, [r3, #-132]
            response[3 + i * 2 + 1] = modbusDevices[slave_address].data[starting_address + i] & 0xFF;
 800046c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000470:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000474:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8000478:	440b      	add	r3, r1
 800047a:	4925      	ldr	r1, [pc, #148]	; (8000510 <read_command+0x138>)
 800047c:	01d2      	lsls	r2, r2, #7
 800047e:	4413      	add	r3, r2
 8000480:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8000484:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8000488:	3302      	adds	r3, #2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	b2d2      	uxtb	r2, r2
 800048e:	3390      	adds	r3, #144	; 0x90
 8000490:	443b      	add	r3, r7
 8000492:	f803 2c84 	strb.w	r2, [r3, #-132]
        for (int8_t i = 0; i < length; i++) {
 8000496:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800049a:	b2db      	uxtb	r3, r3
 800049c:	3301      	adds	r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80004a4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80004a8:	b21b      	sxth	r3, r3
 80004aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	dcc5      	bgt.n	800043e <read_command+0x66>
        }

        crc = calculateCRC(response, response_length - 2);
 80004b2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	3b02      	subs	r3, #2
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	f107 030c 	add.w	r3, r7, #12
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fe42 	bl	800014c <calculateCRC>
 80004c8:	4603      	mov	r3, r0
 80004ca:	803b      	strh	r3, [r7, #0]
        response[response_length - 2] = crc & 0xFF;
 80004cc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80004d0:	3b02      	subs	r3, #2
 80004d2:	883a      	ldrh	r2, [r7, #0]
 80004d4:	b2d2      	uxtb	r2, r2
 80004d6:	3390      	adds	r3, #144	; 0x90
 80004d8:	443b      	add	r3, r7
 80004da:	f803 2c84 	strb.w	r2, [r3, #-132]
        response[response_length - 1] = crc >> 8;
 80004de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80004e2:	121b      	asrs	r3, r3, #8
 80004e4:	b21a      	sxth	r2, r3
 80004e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80004ea:	3b01      	subs	r3, #1
 80004ec:	b2d2      	uxtb	r2, r2
 80004ee:	3390      	adds	r3, #144	; 0x90
 80004f0:	443b      	add	r3, r7
 80004f2:	f803 2c84 	strb.w	r2, [r3, #-132]

        CDC_Transmit_FS(response, response_length);
 80004f6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f008 faa4 	bl	8008a50 <CDC_Transmit_FS>
    }
}
 8000508:	bf00      	nop
 800050a:	3794      	adds	r7, #148	; 0x94
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}
 8000510:	2000025c 	.word	0x2000025c

08000514 <user_pwm_setvalue_mosfet2>:
mosfet_4_A_L	 Timer 4 Channel 4
mosfet_4_B_L	 Timer 4 Channel 2

*/

bool user_pwm_setvalue_mosfet2(int16_t limit, int16_t pwm_value) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	80fb      	strh	r3, [r7, #6]
 8000520:	4613      	mov	r3, r2
 8000522:	80bb      	strh	r3, [r7, #4]
    static int16_t previous_pwm_value = 0;

    pwm_value = (pwm_value < limit) ? pwm_value : limit;
 8000524:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000528:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800052c:	4293      	cmp	r3, r2
 800052e:	bfa8      	it	ge
 8000530:	4613      	movge	r3, r2
 8000532:	80bb      	strh	r3, [r7, #4]
    pwm_value = (pwm_value > -limit) ? pwm_value : -limit;
 8000534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000538:	425a      	negs	r2, r3
 800053a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800053e:	4293      	cmp	r3, r2
 8000540:	bfb8      	it	lt
 8000542:	4613      	movlt	r3, r2
 8000544:	80bb      	strh	r3, [r7, #4]




	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000546:	2360      	movs	r3, #96	; 0x60
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054a:	2300      	movs	r3, #0
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = (pwm_value > 0) ? default_pwm : -pwm_value;
 8000552:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000556:	2b00      	cmp	r3, #0
 8000558:	dd03      	ble.n	8000562 <user_pwm_setvalue_mosfet2+0x4e>
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <user_pwm_setvalue_mosfet2+0xc0>)
 800055c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000560:	e002      	b.n	8000568 <user_pwm_setvalue_mosfet2+0x54>
 8000562:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000566:	425b      	negs	r3, r3
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 800056a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056e:	2200      	movs	r2, #0
 8000570:	4619      	mov	r1, r3
 8000572:	4819      	ldr	r0, [pc, #100]	; (80005d8 <user_pwm_setvalue_mosfet2+0xc4>)
 8000574:	f003 fdcc 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000578:	2100      	movs	r1, #0
 800057a:	4817      	ldr	r0, [pc, #92]	; (80005d8 <user_pwm_setvalue_mosfet2+0xc4>)
 800057c:	f003 fc36 	bl	8003dec <HAL_TIM_PWM_Start>


	TIM_OC_InitTypeDef sConfigOC2;
    sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8000580:	2360      	movs	r3, #96	; 0x60
 8000582:	60bb      	str	r3, [r7, #8]
    sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
    sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
    sConfigOC2.Pulse = (pwm_value >= 0) ? pwm_value : default_pwm;
 800058c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	db02      	blt.n	800059a <user_pwm_setvalue_mosfet2+0x86>
 8000594:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000598:	e002      	b.n	80005a0 <user_pwm_setvalue_mosfet2+0x8c>
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <user_pwm_setvalue_mosfet2+0xc0>)
 800059c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a0:	60fb      	str	r3, [r7, #12]

    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC2, TIM_CHANNEL_2);
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	2204      	movs	r2, #4
 80005a8:	4619      	mov	r1, r3
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <user_pwm_setvalue_mosfet2+0xc4>)
 80005ac:	f003 fdb0 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005b0:	2104      	movs	r1, #4
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <user_pwm_setvalue_mosfet2+0xc4>)
 80005b4:	f003 fc1a 	bl	8003dec <HAL_TIM_PWM_Start>



    previous_pwm_value = pwm_value;
 80005b8:	4a08      	ldr	r2, [pc, #32]	; (80005dc <user_pwm_setvalue_mosfet2+0xc8>)
 80005ba:	88bb      	ldrh	r3, [r7, #4]
 80005bc:	8013      	strh	r3, [r2, #0]

    write_to_modbus(5, pwm_value);
 80005be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005c2:	4619      	mov	r1, r3
 80005c4:	2005      	movs	r0, #5
 80005c6:	f7ff fe93 	bl	80002f0 <write_to_modbus>

    return 1;
 80005ca:	2301      	movs	r3, #1
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3740      	adds	r7, #64	; 0x40
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000254 	.word	0x20000254
 80005d8:	200001ec 	.word	0x200001ec
 80005dc:	2000115c 	.word	0x2000115c

080005e0 <user_pwm_setvalue_mosfet1>:


bool user_pwm_setvalue_mosfet1(int16_t limit, int16_t pwm_value) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b090      	sub	sp, #64	; 0x40
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	80fb      	strh	r3, [r7, #6]
 80005ec:	4613      	mov	r3, r2
 80005ee:	80bb      	strh	r3, [r7, #4]
	static int16_t previous_pwm_value = 0;


    pwm_value = (pwm_value < limit) ? pwm_value : limit;
 80005f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005f8:	4293      	cmp	r3, r2
 80005fa:	bfa8      	it	ge
 80005fc:	4613      	movge	r3, r2
 80005fe:	80bb      	strh	r3, [r7, #4]
    pwm_value = (pwm_value > -limit) ? pwm_value : -limit;
 8000600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000604:	425a      	negs	r2, r3
 8000606:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800060a:	4293      	cmp	r3, r2
 800060c:	bfb8      	it	lt
 800060e:	4613      	movlt	r3, r2
 8000610:	80bb      	strh	r3, [r7, #4]


    TIM_OC_InitTypeDef sConfigOC;
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000612:	2360      	movs	r3, #96	; 0x60
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000616:	2300      	movs	r3, #0
 8000618:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.Pulse = (pwm_value >= 0) ? default_pwm : -pwm_value;
 800061e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db03      	blt.n	800062e <user_pwm_setvalue_mosfet1+0x4e>
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <user_pwm_setvalue_mosfet1+0xc0>)
 8000628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800062c:	e002      	b.n	8000634 <user_pwm_setvalue_mosfet1+0x54>
 800062e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000632:	425b      	negs	r3, r3
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 8000636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063a:	2208      	movs	r2, #8
 800063c:	4619      	mov	r1, r3
 800063e:	4819      	ldr	r0, [pc, #100]	; (80006a4 <user_pwm_setvalue_mosfet1+0xc4>)
 8000640:	f003 fd66 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000644:	2108      	movs	r1, #8
 8000646:	4817      	ldr	r0, [pc, #92]	; (80006a4 <user_pwm_setvalue_mosfet1+0xc4>)
 8000648:	f003 fbd0 	bl	8003dec <HAL_TIM_PWM_Start>



    TIM_OC_InitTypeDef sConfigOC2;
    sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 800064c:	2360      	movs	r3, #96	; 0x60
 800064e:	60bb      	str	r3, [r7, #8]
    sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
    sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
    sConfigOC2.Pulse = (pwm_value >= 0) ? pwm_value : default_pwm;
 8000658:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db02      	blt.n	8000666 <user_pwm_setvalue_mosfet1+0x86>
 8000660:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000664:	e002      	b.n	800066c <user_pwm_setvalue_mosfet1+0x8c>
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <user_pwm_setvalue_mosfet1+0xc0>)
 8000668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800066c:	60fb      	str	r3, [r7, #12]
    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC2, TIM_CHANNEL_4);
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	220c      	movs	r2, #12
 8000674:	4619      	mov	r1, r3
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <user_pwm_setvalue_mosfet1+0xc4>)
 8000678:	f003 fd4a 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800067c:	210c      	movs	r1, #12
 800067e:	4809      	ldr	r0, [pc, #36]	; (80006a4 <user_pwm_setvalue_mosfet1+0xc4>)
 8000680:	f003 fbb4 	bl	8003dec <HAL_TIM_PWM_Start>


    previous_pwm_value = pwm_value;
 8000684:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <user_pwm_setvalue_mosfet1+0xc8>)
 8000686:	88bb      	ldrh	r3, [r7, #4]
 8000688:	8013      	strh	r3, [r2, #0]
    write_to_modbus(4,pwm_value);
 800068a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800068e:	4619      	mov	r1, r3
 8000690:	2004      	movs	r0, #4
 8000692:	f7ff fe2d 	bl	80002f0 <write_to_modbus>
    return 1;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	3740      	adds	r7, #64	; 0x40
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000254 	.word	0x20000254
 80006a4:	200001ec 	.word	0x200001ec
 80006a8:	2000115e 	.word	0x2000115e

080006ac <ConstrainTargetValue>:

int ConstrainTargetValue(int target)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    if (target < min_pwm && target > 2) {
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <ConstrainTargetValue+0x50>)
 80006b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ba:	461a      	mov	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4293      	cmp	r3, r2
 80006c0:	da06      	bge.n	80006d0 <ConstrainTargetValue+0x24>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	dd03      	ble.n	80006d0 <ConstrainTargetValue+0x24>
        return min_pwm;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <ConstrainTargetValue+0x50>)
 80006ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ce:	e010      	b.n	80006f2 <ConstrainTargetValue+0x46>
    } else if (target > -min_pwm && target < -2) {
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <ConstrainTargetValue+0x50>)
 80006d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d6:	425b      	negs	r3, r3
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	dd08      	ble.n	80006f0 <ConstrainTargetValue+0x44>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f113 0f02 	cmn.w	r3, #2
 80006e4:	da04      	bge.n	80006f0 <ConstrainTargetValue+0x44>
        return -min_pwm;
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <ConstrainTargetValue+0x50>)
 80006e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ec:	425b      	negs	r3, r3
 80006ee:	e000      	b.n	80006f2 <ConstrainTargetValue+0x46>
    }
    return target;
 80006f0:	687b      	ldr	r3, [r7, #4]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	2000023c 	.word	0x2000023c

08000700 <ConstrainTargetValue2>:

int ConstrainTargetValue2(int target)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
    if (target < 100 && target >-100) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b63      	cmp	r3, #99	; 0x63
 800070c:	dc05      	bgt.n	800071a <ConstrainTargetValue2+0x1a>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000714:	db01      	blt.n	800071a <ConstrainTargetValue2+0x1a>
        return 0;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <ConstrainTargetValue2+0x1c>
    }
    else{
    	return target;
 800071a:	687b      	ldr	r3, [r7, #4]
    }

}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
	...

08000728 <setPWMValues__Right>:


void setPWMValues__Right(int16_t pwm)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]

	user_pwm_setvalue_mosfet2(limit,pwm);
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <setPWMValues__Right+0x24>)
 8000734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000738:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800073c:	4611      	mov	r1, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fee8 	bl	8000514 <user_pwm_setvalue_mosfet2>


}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000002 	.word	0x20000002

08000750 <setPWMValues_Left>:
void setPWMValues_Left(int16_t pwm)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]

	user_pwm_setvalue_mosfet1(limit,pwm);
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <setPWMValues_Left+0x24>)
 800075c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000760:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff3a 	bl	80005e0 <user_pwm_setvalue_mosfet1>


}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000002 	.word	0x20000002

08000778 <incrementPWMValue>:




void incrementPWMValue(int16_t *pwm_value, int16_t target_value)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	807b      	strh	r3, [r7, #2]
	int8_t inc = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	73fb      	strb	r3, [r7, #15]
	if (*pwm_value<10 && *pwm_value >-10){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800078e:	2b09      	cmp	r3, #9
 8000790:	dc08      	bgt.n	80007a4 <incrementPWMValue+0x2c>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000798:	f113 0f09 	cmn.w	r3, #9
 800079c:	db02      	blt.n	80007a4 <incrementPWMValue+0x2c>
		inc=1;
 800079e:	2301      	movs	r3, #1
 80007a0:	73fb      	strb	r3, [r7, #15]
 80007a2:	e001      	b.n	80007a8 <incrementPWMValue+0x30>
	}else{
		inc=2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	73fb      	strb	r3, [r7, #15]
	}
    if (*pwm_value < target_value) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	dd16      	ble.n	80007e4 <incrementPWMValue+0x6c>
        *pwm_value += inc;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007bc:	b29a      	uxth	r2, r3
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	b21a      	sxth	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	801a      	strh	r2, [r3, #0]
        if (*pwm_value > target_value) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007d8:	429a      	cmp	r2, r3
 80007da:	da20      	bge.n	800081e <incrementPWMValue+0xa6>
            *pwm_value = target_value;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	887a      	ldrh	r2, [r7, #2]
 80007e0:	801a      	strh	r2, [r3, #0]
 80007e2:	e01c      	b.n	800081e <incrementPWMValue+0xa6>
        }
    } else if (*pwm_value > target_value) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	da15      	bge.n	800081e <incrementPWMValue+0xa6>
        *pwm_value -= inc;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	b21a      	sxth	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	801a      	strh	r2, [r3, #0]
        if (*pwm_value < target_value) {
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000810:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000814:	429a      	cmp	r2, r3
 8000816:	dd02      	ble.n	800081e <incrementPWMValue+0xa6>
            *pwm_value = target_value;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	887a      	ldrh	r2, [r7, #2]
 800081c:	801a      	strh	r2, [r3, #0]
        }
    }

    // Limit check for pwm_value
    if (*pwm_value > limit) *pwm_value = limit;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <incrementPWMValue+0xf0>)
 8000826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082a:	429a      	cmp	r2, r3
 800082c:	dd04      	ble.n	8000838 <incrementPWMValue+0xc0>
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <incrementPWMValue+0xf0>)
 8000830:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	801a      	strh	r2, [r3, #0]
    if (*pwm_value < -limit) *pwm_value = -limit;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800083e:	461a      	mov	r2, r3
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <incrementPWMValue+0xf0>)
 8000842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000846:	425b      	negs	r3, r3
 8000848:	429a      	cmp	r2, r3
 800084a:	da08      	bge.n	800085e <incrementPWMValue+0xe6>
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <incrementPWMValue+0xf0>)
 800084e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000852:	b29b      	uxth	r3, r3
 8000854:	425b      	negs	r3, r3
 8000856:	b29b      	uxth	r3, r3
 8000858:	b21a      	sxth	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	801a      	strh	r2, [r3, #0]
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000002 	.word	0x20000002

0800086c <UpdatePWMValues>:


void UpdatePWMValues(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
    static int prev_pwm_value1 = 0;
    static int prev_pwm_value2 = 0;
    int16_t pwm1 =0;
 8000872:	2300      	movs	r3, #0
 8000874:	80fb      	strh	r3, [r7, #6]
    int16_t pwm2 =0;
 8000876:	2300      	movs	r3, #0
 8000878:	80bb      	strh	r3, [r7, #4]
    min_pwm=pwm_min;
 800087a:	4b78      	ldr	r3, [pc, #480]	; (8000a5c <UpdatePWMValues+0x1f0>)
 800087c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000880:	4b77      	ldr	r3, [pc, #476]	; (8000a60 <UpdatePWMValues+0x1f4>)
 8000882:	801a      	strh	r2, [r3, #0]

    if (((target_value1 > 0 && target_value2 < 0) || (target_value1 < 0 && target_value2 > 0)) && abs((abs( modbusDevices[01].data[0]) - abs( modbusDevices[01].data[1]))<50 )){
 8000884:	4b77      	ldr	r3, [pc, #476]	; (8000a64 <UpdatePWMValues+0x1f8>)
 8000886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088a:	2b00      	cmp	r3, #0
 800088c:	dd04      	ble.n	8000898 <UpdatePWMValues+0x2c>
 800088e:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <UpdatePWMValues+0x1fc>)
 8000890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000894:	2b00      	cmp	r3, #0
 8000896:	db09      	blt.n	80008ac <UpdatePWMValues+0x40>
 8000898:	4b72      	ldr	r3, [pc, #456]	; (8000a64 <UpdatePWMValues+0x1f8>)
 800089a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	da1b      	bge.n	80008da <UpdatePWMValues+0x6e>
 80008a2:	4b71      	ldr	r3, [pc, #452]	; (8000a68 <UpdatePWMValues+0x1fc>)
 80008a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dd16      	ble.n	80008da <UpdatePWMValues+0x6e>
 80008ac:	4b6f      	ldr	r3, [pc, #444]	; (8000a6c <UpdatePWMValues+0x200>)
 80008ae:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bfb8      	it	lt
 80008b6:	425b      	neglt	r3, r3
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b6b      	ldr	r3, [pc, #428]	; (8000a6c <UpdatePWMValues+0x200>)
 80008be:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bfb8      	it	lt
 80008c6:	425b      	neglt	r3, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	2b31      	cmp	r3, #49	; 0x31
 80008ce:	dc04      	bgt.n	80008da <UpdatePWMValues+0x6e>
    	min_pwm = pwm_min_angular;
 80008d0:	4b67      	ldr	r3, [pc, #412]	; (8000a70 <UpdatePWMValues+0x204>)
 80008d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008d6:	4b62      	ldr	r3, [pc, #392]	; (8000a60 <UpdatePWMValues+0x1f4>)
 80008d8:	801a      	strh	r2, [r3, #0]
    }




    incrementPWMValue(&pwm_value1, target_value1);
 80008da:	4b62      	ldr	r3, [pc, #392]	; (8000a64 <UpdatePWMValues+0x1f8>)
 80008dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4864      	ldr	r0, [pc, #400]	; (8000a74 <UpdatePWMValues+0x208>)
 80008e4:	f7ff ff48 	bl	8000778 <incrementPWMValue>
    incrementPWMValue(&pwm_value2, target_value2);
 80008e8:	4b5f      	ldr	r3, [pc, #380]	; (8000a68 <UpdatePWMValues+0x1fc>)
 80008ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ee:	4619      	mov	r1, r3
 80008f0:	4861      	ldr	r0, [pc, #388]	; (8000a78 <UpdatePWMValues+0x20c>)
 80008f2:	f7ff ff41 	bl	8000778 <incrementPWMValue>
    if (abs(prev_pwm_value1) >= abs(pwm_value1)){
 80008f6:	4b61      	ldr	r3, [pc, #388]	; (8000a7c <UpdatePWMValues+0x210>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bfb8      	it	lt
 80008fe:	425b      	neglt	r3, r3
 8000900:	4a5c      	ldr	r2, [pc, #368]	; (8000a74 <UpdatePWMValues+0x208>)
 8000902:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000906:	2a00      	cmp	r2, #0
 8000908:	bfb8      	it	lt
 800090a:	4252      	neglt	r2, r2
 800090c:	b292      	uxth	r2, r2
 800090e:	4293      	cmp	r3, r2
 8000910:	db24      	blt.n	800095c <UpdatePWMValues+0xf0>
    pwm1 = ConstrainTargetValue2(pwm_value1);
 8000912:	4b58      	ldr	r3, [pc, #352]	; (8000a74 <UpdatePWMValues+0x208>)
 8000914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fef1 	bl	8000700 <ConstrainTargetValue2>
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
    pwm2 = ConstrainTargetValue2(pwm_value2);
 8000922:	4b55      	ldr	r3, [pc, #340]	; (8000a78 <UpdatePWMValues+0x20c>)
 8000924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fee9 	bl	8000700 <ConstrainTargetValue2>
 800092e:	4603      	mov	r3, r0
 8000930:	80bb      	strh	r3, [r7, #4]

    target_value1 = ConstrainTargetValue2(target_value1);
 8000932:	4b4c      	ldr	r3, [pc, #304]	; (8000a64 <UpdatePWMValues+0x1f8>)
 8000934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fee1 	bl	8000700 <ConstrainTargetValue2>
 800093e:	4603      	mov	r3, r0
 8000940:	b21a      	sxth	r2, r3
 8000942:	4b48      	ldr	r3, [pc, #288]	; (8000a64 <UpdatePWMValues+0x1f8>)
 8000944:	801a      	strh	r2, [r3, #0]
    target_value2 = ConstrainTargetValue2(target_value2);
 8000946:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <UpdatePWMValues+0x1fc>)
 8000948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fed7 	bl	8000700 <ConstrainTargetValue2>
 8000952:	4603      	mov	r3, r0
 8000954:	b21a      	sxth	r2, r3
 8000956:	4b44      	ldr	r3, [pc, #272]	; (8000a68 <UpdatePWMValues+0x1fc>)
 8000958:	801a      	strh	r2, [r3, #0]
 800095a:	e037      	b.n	80009cc <UpdatePWMValues+0x160>
    }
    else{
    pwm1 = ConstrainTargetValue(pwm_value1);
 800095c:	4b45      	ldr	r3, [pc, #276]	; (8000a74 <UpdatePWMValues+0x208>)
 800095e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fea2 	bl	80006ac <ConstrainTargetValue>
 8000968:	4603      	mov	r3, r0
 800096a:	80fb      	strh	r3, [r7, #6]
    pwm2 = ConstrainTargetValue(pwm_value2);
 800096c:	4b42      	ldr	r3, [pc, #264]	; (8000a78 <UpdatePWMValues+0x20c>)
 800096e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe9a 	bl	80006ac <ConstrainTargetValue>
 8000978:	4603      	mov	r3, r0
 800097a:	80bb      	strh	r3, [r7, #4]
    pwm_value1 = ConstrainTargetValue(pwm_value1);
 800097c:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <UpdatePWMValues+0x208>)
 800097e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fe92 	bl	80006ac <ConstrainTargetValue>
 8000988:	4603      	mov	r3, r0
 800098a:	b21a      	sxth	r2, r3
 800098c:	4b39      	ldr	r3, [pc, #228]	; (8000a74 <UpdatePWMValues+0x208>)
 800098e:	801a      	strh	r2, [r3, #0]
    pwm_value2 = ConstrainTargetValue(pwm_value2);
 8000990:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <UpdatePWMValues+0x20c>)
 8000992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fe88 	bl	80006ac <ConstrainTargetValue>
 800099c:	4603      	mov	r3, r0
 800099e:	b21a      	sxth	r2, r3
 80009a0:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <UpdatePWMValues+0x20c>)
 80009a2:	801a      	strh	r2, [r3, #0]
    target_value1 = ConstrainTargetValue(target_value1);
 80009a4:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <UpdatePWMValues+0x1f8>)
 80009a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fe7e 	bl	80006ac <ConstrainTargetValue>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <UpdatePWMValues+0x1f8>)
 80009b6:	801a      	strh	r2, [r3, #0]
    target_value2 = ConstrainTargetValue(target_value2);
 80009b8:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <UpdatePWMValues+0x1fc>)
 80009ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe74 	bl	80006ac <ConstrainTargetValue>
 80009c4:	4603      	mov	r3, r0
 80009c6:	b21a      	sxth	r2, r3
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <UpdatePWMValues+0x1fc>)
 80009ca:	801a      	strh	r2, [r3, #0]
    }
    if (pwm_value1 != prev_pwm_value1) {
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <UpdatePWMValues+0x208>)
 80009ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <UpdatePWMValues+0x210>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d012      	beq.n	8000a02 <UpdatePWMValues+0x196>
        setPWMValues_Left(pwm1);
 80009dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff feb5 	bl	8000750 <setPWMValues_Left>
        prev_pwm_value1 = pwm_value1;
 80009e6:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <UpdatePWMValues+0x208>)
 80009e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <UpdatePWMValues+0x210>)
 80009f0:	601a      	str	r2, [r3, #0]
        write_to_modbus(18,pwm_value1);
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <UpdatePWMValues+0x208>)
 80009f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f8:	4619      	mov	r1, r3
 80009fa:	2012      	movs	r0, #18
 80009fc:	f7ff fc78 	bl	80002f0 <write_to_modbus>
 8000a00:	e006      	b.n	8000a10 <UpdatePWMValues+0x1a4>
    }else{
    	write_to_modbus(18,pwm_value1);
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <UpdatePWMValues+0x208>)
 8000a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2012      	movs	r0, #18
 8000a0c:	f7ff fc70 	bl	80002f0 <write_to_modbus>
    }

    if (pwm_value2 != prev_pwm_value2) {
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <UpdatePWMValues+0x20c>)
 8000a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <UpdatePWMValues+0x214>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d012      	beq.n	8000a46 <UpdatePWMValues+0x1da>
        setPWMValues__Right(pwm2);
 8000a20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fe7f 	bl	8000728 <setPWMValues__Right>
        prev_pwm_value2 = pwm_value2;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <UpdatePWMValues+0x20c>)
 8000a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <UpdatePWMValues+0x214>)
 8000a34:	601a      	str	r2, [r3, #0]
        write_to_modbus(19,pwm_value2);
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <UpdatePWMValues+0x20c>)
 8000a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	2013      	movs	r0, #19
 8000a40:	f7ff fc56 	bl	80002f0 <write_to_modbus>
    }
    else{
    	write_to_modbus(19,pwm_value2);
    }
}
 8000a44:	e006      	b.n	8000a54 <UpdatePWMValues+0x1e8>
    	write_to_modbus(19,pwm_value2);
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <UpdatePWMValues+0x20c>)
 8000a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2013      	movs	r0, #19
 8000a50:	f7ff fc4e 	bl	80002f0 <write_to_modbus>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000006 	.word	0x20000006
 8000a60:	2000023c 	.word	0x2000023c
 8000a64:	2000024e 	.word	0x2000024e
 8000a68:	20000252 	.word	0x20000252
 8000a6c:	2000025c 	.word	0x2000025c
 8000a70:	20000008 	.word	0x20000008
 8000a74:	2000024c 	.word	0x2000024c
 8000a78:	20000250 	.word	0x20000250
 8000a7c:	20001160 	.word	0x20001160
 8000a80:	20001164 	.word	0x20001164

08000a84 <Check_Stop_Pin>:

bool Check_Stop_Pin()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

    if(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == GPIO_PIN_RESET)
 8000a88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <Check_Stop_Pin+0x20>)
 8000a8e:	f000 feaf 	bl	80017f0 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <Check_Stop_Pin+0x18>
    {
        return false;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e000      	b.n	8000a9e <Check_Stop_Pin+0x1a>
    }

    else
    {
        return true;
 8000a9c:	2301      	movs	r3, #1
    }
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40010c00 	.word	0x40010c00

08000aa8 <SetTargetValues>:

 // Sayaç değişkeni

void SetTargetValues() {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
    if(Check_Stop_Pin()) {
 8000aae:	f7ff ffe9 	bl	8000a84 <Check_Stop_Pin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d057      	beq.n	8000b68 <SetTargetValues+0xc0>
        stopPinCounter = 0;  // Reset sayaç
 8000ab8:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <SetTargetValues+0xf8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
        }
        if(pwm_value2 <0 && pwm_value2 >-250 &&  modbusDevices[01].data[1] >=  0 && modbusDevices[01].data[5] == -300){
        	pwm_value2=modbusDevices[01].data[5];
        }
	*/
        int16_t temp_target_1 = modbusDevices[01].data[0];
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <SetTargetValues+0xfc>)
 8000ac0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000ac4:	80fb      	strh	r3, [r7, #6]
        int16_t temp_target_2 = modbusDevices[01].data[1];
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <SetTargetValues+0xfc>)
 8000ac8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000acc:	80bb      	strh	r3, [r7, #4]



        if(temp_target_1>0&&temp_target_1<min_pwm)temp_target_1=min_pwm;
 8000ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	dd09      	ble.n	8000aea <SetTargetValues+0x42>
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <SetTargetValues+0x100>)
 8000ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000adc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	da02      	bge.n	8000aea <SetTargetValues+0x42>
 8000ae4:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <SetTargetValues+0x100>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	80fb      	strh	r3, [r7, #6]
        if(temp_target_2>0&&temp_target_2<min_pwm)temp_target_2=min_pwm;
 8000aea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	dd09      	ble.n	8000b06 <SetTargetValues+0x5e>
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <SetTargetValues+0x100>)
 8000af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	da02      	bge.n	8000b06 <SetTargetValues+0x5e>
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <SetTargetValues+0x100>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	80bb      	strh	r3, [r7, #4]

        if(temp_target_1<0&&temp_target_1>-min_pwm)temp_target_1=-min_pwm;
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da0e      	bge.n	8000b2c <SetTargetValues+0x84>
 8000b0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <SetTargetValues+0x100>)
 8000b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b18:	425b      	negs	r3, r3
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dd06      	ble.n	8000b2c <SetTargetValues+0x84>
 8000b1e:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <SetTargetValues+0x100>)
 8000b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	425b      	negs	r3, r3
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	80fb      	strh	r3, [r7, #6]
		if(temp_target_2<0&&temp_target_2>-min_pwm)temp_target_2=-min_pwm;
 8000b2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da0e      	bge.n	8000b52 <SetTargetValues+0xaa>
 8000b34:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <SetTargetValues+0x100>)
 8000b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3e:	425b      	negs	r3, r3
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dd06      	ble.n	8000b52 <SetTargetValues+0xaa>
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <SetTargetValues+0x100>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	80bb      	strh	r3, [r7, #4]

		target_value1=temp_target_1;
 8000b52:	4a16      	ldr	r2, [pc, #88]	; (8000bac <SetTargetValues+0x104>)
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	8013      	strh	r3, [r2, #0]

		target_value2=temp_target_2;
 8000b58:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <SetTargetValues+0x108>)
 8000b5a:	88bb      	ldrh	r3, [r7, #4]
 8000b5c:	8013      	strh	r3, [r2, #0]


        write_to_modbus(14,1);
 8000b5e:	2101      	movs	r1, #1
 8000b60:	200e      	movs	r0, #14
 8000b62:	f7ff fbc5 	bl	80002f0 <write_to_modbus>
            target_value1 = 0;
            target_value2 = 0;
            write_to_modbus(14,0);
        }
    }
}
 8000b66:	e017      	b.n	8000b98 <SetTargetValues+0xf0>
        stopPinCounter++;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <SetTargetValues+0xf8>)
 8000b6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	3301      	adds	r3, #1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	b25a      	sxtb	r2, r3
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <SetTargetValues+0xf8>)
 8000b78:	701a      	strb	r2, [r3, #0]
        if (stopPinCounter >= 5) {
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <SetTargetValues+0xf8>)
 8000b7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	dd09      	ble.n	8000b98 <SetTargetValues+0xf0>
            target_value1 = 0;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <SetTargetValues+0x104>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	801a      	strh	r2, [r3, #0]
            target_value2 = 0;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <SetTargetValues+0x108>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	801a      	strh	r2, [r3, #0]
            write_to_modbus(14,0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	200e      	movs	r0, #14
 8000b94:	f7ff fbac 	bl	80002f0 <write_to_modbus>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000023a 	.word	0x2000023a
 8000ba4:	2000025c 	.word	0x2000025c
 8000ba8:	2000023c 	.word	0x2000023c
 8000bac:	2000024e 	.word	0x2000024e
 8000bb0:	20000252 	.word	0x20000252

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f000 fb26 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f8a4 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f000 f9c4 	bl	8000f4c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000bc4:	f000 f948 	bl	8000e58 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000bc8:	f007 fe7e 	bl	80088c8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000bcc:	f000 f8f6 	bl	8000dbc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  initialize_device(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff fb67 	bl	80002a4 <initialize_device>
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000bd6:	483d      	ldr	r0, [pc, #244]	; (8000ccc <main+0x118>)
 8000bd8:	f003 f866 	bl	8003ca8 <HAL_TIM_Base_Start_IT>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <main+0x32>
  {
    /* Starting Error */
    Error_Handler();
 8000be2:	f000 f9f7 	bl	8000fd4 <Error_Handler>
  }
  MX_USB_DEVICE_Init();
 8000be6:	f007 fe6f 	bl	80088c8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SetTargetValues();
 8000bea:	f7ff ff5d 	bl	8000aa8 <SetTargetValues>

      if (new_data_received) {
 8000bee:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <main+0x11c>)
 8000bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d03d      	beq.n	8000c74 <main+0xc0>
    	  counter_timer =  HAL_GetTick();;
 8000bf8:	f000 fb5e 	bl	80012b8 <HAL_GetTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <main+0x120>)
 8000c02:	601a      	str	r2, [r3, #0]
    	  if(function_code == 6) {
 8000c04:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <main+0x124>)
 8000c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d10c      	bne.n	8000c28 <main+0x74>
    		  write_command(slave_address, starting_address, length);
 8000c0e:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <main+0x128>)
 8000c10:	f993 3000 	ldrsb.w	r3, [r3]
 8000c14:	4a32      	ldr	r2, [pc, #200]	; (8000ce0 <main+0x12c>)
 8000c16:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000c1a:	4a32      	ldr	r2, [pc, #200]	; (8000ce4 <main+0x130>)
 8000c1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fb81 	bl	8000328 <write_command>
 8000c26:	e01f      	b.n	8000c68 <main+0xb4>
          } else if(function_code == 16) {
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <main+0x124>)
 8000c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c2e:	2b10      	cmp	r3, #16
 8000c30:	d10c      	bne.n	8000c4c <main+0x98>
        	  write_multiple_command(slave_address, starting_address, length,value);
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <main+0x128>)
 8000c34:	f993 0000 	ldrsb.w	r0, [r3]
 8000c38:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <main+0x12c>)
 8000c3a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <main+0x130>)
 8000c40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <main+0x134>)
 8000c46:	f7ff fb89 	bl	800035c <write_multiple_command>
 8000c4a:	e00d      	b.n	8000c68 <main+0xb4>
          }else {
        	  read_command(slave_address, starting_address, length, crc);
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <main+0x128>)
 8000c4e:	f993 0000 	ldrsb.w	r0, [r3]
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <main+0x12c>)
 8000c54:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <main+0x130>)
 8000c5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <main+0x138>)
 8000c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c64:	f7ff fbb8 	bl	80003d8 <read_command>
    	  }
    	  start=1;
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <main+0x13c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
          new_data_received = 0;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <main+0x11c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
      }
      limit = modbusDevices[01].data[15];
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <main+0x140>)
 8000c76:	f9b3 211e 	ldrsh.w	r2, [r3, #286]	; 0x11e
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <main+0x144>)
 8000c7c:	801a      	strh	r2, [r3, #0]
      pwm_min = modbusDevices[01].data[16];
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <main+0x140>)
 8000c80:	f9b3 2120 	ldrsh.w	r2, [r3, #288]	; 0x120
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <main+0x148>)
 8000c86:	801a      	strh	r2, [r3, #0]
      pwm_min_angular = modbusDevices[01].data[17];
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <main+0x140>)
 8000c8a:	f9b3 2122 	ldrsh.w	r2, [r3, #290]	; 0x122
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <main+0x14c>)
 8000c90:	801a      	strh	r2, [r3, #0]

      if(( HAL_GetTick()-counter_timer)>no_response_wait_time ){
 8000c92:	f000 fb11 	bl	80012b8 <HAL_GetTick>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <main+0x120>)
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <main+0x150>)
 8000ca0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d9a0      	bls.n	8000bea <main+0x36>
      modbusDevices[01].data[0]=0;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <main+0x140>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
      modbusDevices[01].data[1]=0;
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <main+0x140>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
      modbusDevices[01].data[2]=0;
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <main+0x140>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
      modbusDevices[01].data[3]=0;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <main+0x140>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	  SetTargetValues();
 8000cc8:	e78f      	b.n	8000bea <main+0x36>
 8000cca:	bf00      	nop
 8000ccc:	200001a4 	.word	0x200001a4
 8000cd0:	20000238 	.word	0x20000238
 8000cd4:	20000258 	.word	0x20000258
 8000cd8:	20000236 	.word	0x20000236
 8000cdc:	20000004 	.word	0x20000004
 8000ce0:	2000024a 	.word	0x2000024a
 8000ce4:	20000234 	.word	0x20000234
 8000ce8:	20000240 	.word	0x20000240
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000239 	.word	0x20000239
 8000cf4:	2000025c 	.word	0x2000025c
 8000cf8:	20000002 	.word	0x20000002
 8000cfc:	20000006 	.word	0x20000006
 8000d00:	20000008 	.word	0x20000008
 8000d04:	2000000a 	.word	0x2000000a

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d12:	2228      	movs	r2, #40	; 0x28
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f008 fa78 	bl	800920c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d46:	2301      	movs	r3, #1
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d54:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fabe 	bl	80032e0 <HAL_RCC_OscConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d6a:	f000 f933 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	230f      	movs	r3, #15
 8000d70:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fd2a 	bl	80037e4 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d96:	f000 f91d 	bl	8000fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fe79 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000db0:	f000 f910 	bl	8000fd4 <Error_Handler>
  }
}
 8000db4:	bf00      	nop
 8000db6:	3750      	adds	r7, #80	; 0x50
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_TIM3_Init+0x94>)
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <MX_TIM3_Init+0x98>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_TIM3_Init+0x94>)
 8000de0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000de4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_TIM3_Init+0x94>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_TIM3_Init+0x94>)
 8000dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_TIM3_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_TIM3_Init+0x94>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e00:	4813      	ldr	r0, [pc, #76]	; (8000e50 <MX_TIM3_Init+0x94>)
 8000e02:	f002 ff01 	bl	8003c08 <HAL_TIM_Base_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e0c:	f000 f8e2 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <MX_TIM3_Init+0x94>)
 8000e1e:	f003 fa39 	bl	8004294 <HAL_TIM_ConfigClockSource>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e28:	f000 f8d4 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_TIM3_Init+0x94>)
 8000e3a:	f003 fdcf 	bl	80049dc <HAL_TIMEx_MasterConfigSynchronization>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e44:	f000 f8c6 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200001a4 	.word	0x200001a4
 8000e54:	40000400 	.word	0x40000400

08000e58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
 8000e76:	615a      	str	r2, [r3, #20]
 8000e78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e7a:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000e7c:	4a32      	ldr	r2, [pc, #200]	; (8000f48 <MX_TIM4_Init+0xf0>)
 8000e7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5;
 8000e80:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000e82:	2205      	movs	r2, #5
 8000e84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ea0:	4828      	ldr	r0, [pc, #160]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000ea2:	f002 ff53 	bl	8003d4c <HAL_TIM_PWM_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000eac:	f000 f892 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eb8:	f107 0320 	add.w	r3, r7, #32
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4821      	ldr	r0, [pc, #132]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000ec0:	f003 fd8c 	bl	80049dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000eca:	f000 f883 	bl	8000fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ece:	2360      	movs	r3, #96	; 0x60
 8000ed0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4817      	ldr	r0, [pc, #92]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000ee6:	f003 f913 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000ef0:	f000 f870 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4812      	ldr	r0, [pc, #72]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000efc:	f003 f908 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f06:	f000 f865 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000f12:	f003 f8fd 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000f1c:	f000 f85a 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	220c      	movs	r2, #12
 8000f24:	4619      	mov	r1, r3
 8000f26:	4807      	ldr	r0, [pc, #28]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000f28:	f003 f8f2 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000f32:	f000 f84f 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f36:	4803      	ldr	r0, [pc, #12]	; (8000f44 <MX_TIM4_Init+0xec>)
 8000f38:	f000 f8c8 	bl	80010cc <HAL_TIM_MspPostInit>

}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	; 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200001ec 	.word	0x200001ec
 8000f48:	40000800 	.word	0x40000800

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_GPIO_Init+0x80>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <MX_GPIO_Init+0x80>)
 8000f66:	f043 0320 	orr.w	r3, r3, #32
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_GPIO_Init+0x80>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0320 	and.w	r3, r3, #32
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_GPIO_Init+0x80>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <MX_GPIO_Init+0x80>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_GPIO_Init+0x80>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_GPIO_Init+0x80>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <MX_GPIO_Init+0x80>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_GPIO_Init+0x80>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : STOP_Pin */
  GPIO_InitStruct.Pin = STOP_Pin;
 8000fa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STOP_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_GPIO_Init+0x84>)
 8000fbe:	f000 fa93 	bl	80014e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3720      	adds	r7, #32
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_MspInit+0x5c>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_MspInit+0x5c>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_MspInit+0x5c>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_MspInit+0x5c>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <HAL_MspInit+0x5c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_MspInit+0x5c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_MspInit+0x60>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_MspInit+0x60>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000

08001044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_TIM_Base_MspInit+0x44>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d113      	bne.n	800107e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	201d      	movs	r0, #29
 8001074:	f000 fa01 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001078:	201d      	movs	r0, #29
 800107a:	f000 fa1a 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40000400 	.word	0x40000400
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <HAL_TIM_PWM_MspInit+0x34>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10b      	bne.n	80010ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_TIM_PWM_MspInit+0x38>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_TIM_PWM_MspInit+0x38>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_TIM_PWM_MspInit+0x38>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	40000800 	.word	0x40000800
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_TIM_MspPostInit+0x5c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d118      	bne.n	800111e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_TIM_MspPostInit+0x60>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_TIM_MspPostInit+0x60>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_TIM_MspPostInit+0x60>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001104:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001108:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2302      	movs	r3, #2
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_TIM_MspPostInit+0x64>)
 800111a:	f000 f9e5 	bl	80014e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40000800 	.word	0x40000800
 800112c:	40021000 	.word	0x40021000
 8001130:	40010c00 	.word	0x40010c00

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117a:	f000 f88b 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800118a:	f000 fc64 	bl	8001a56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20001e34 	.word	0x20001e34

08001198 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <TIM3_IRQHandler+0x14>)
 800119e:	f002 fec7 	bl	8003f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  UpdatePWMValues();
 80011a2:	f7ff fb63 	bl	800086c <UpdatePWMValues>
  /* USER CODE END TIM3_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200001a4 	.word	0x200001a4

080011b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011bc:	f7ff fff8 	bl	80011b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011c2:	490c      	ldr	r1, [pc, #48]	; (80011f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011d8:	4c09      	ldr	r4, [pc, #36]	; (8001200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e6:	f008 f819 	bl	800921c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ea:	f7ff fce3 	bl	8000bb4 <main>
  bx lr
 80011ee:	4770      	bx	lr
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80011f8:	080094f0 	.word	0x080094f0
  ldr r2, =_sbss
 80011fc:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001200:	2000232c 	.word	0x2000232c

08001204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC1_2_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_Init+0x28>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x28>)
 8001212:	f043 0310 	orr.w	r3, r3, #16
 8001216:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f923 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	200f      	movs	r0, #15
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fedc 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f93b 	bl	80014ce <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f903 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20000014 	.word	0x20000014
 8001290:	20000010 	.word	0x20000010

08001294 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_IncTick+0x1c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_IncTick+0x20>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <HAL_IncTick+0x20>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000014 	.word	0x20000014
 80012b4:	20001168 	.word	0x20001168

080012b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b02      	ldr	r3, [pc, #8]	; (80012c8 <HAL_GetTick+0x10>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	20001168 	.word	0x20001168

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4906      	ldr	r1, [pc, #24]	; (8001364 <__NVIC_EnableIRQ+0x34>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff90 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff2d 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff42 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff90 	bl	80013bc <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff35 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b08b      	sub	sp, #44	; 0x2c
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fa:	e169      	b.n	80017d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014fc:	2201      	movs	r2, #1
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 8158 	bne.w	80017ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4a9a      	ldr	r2, [pc, #616]	; (8001788 <HAL_GPIO_Init+0x2a0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d05e      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001524:	4a98      	ldr	r2, [pc, #608]	; (8001788 <HAL_GPIO_Init+0x2a0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d875      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800152a:	4a98      	ldr	r2, [pc, #608]	; (800178c <HAL_GPIO_Init+0x2a4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d058      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001530:	4a96      	ldr	r2, [pc, #600]	; (800178c <HAL_GPIO_Init+0x2a4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d86f      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001536:	4a96      	ldr	r2, [pc, #600]	; (8001790 <HAL_GPIO_Init+0x2a8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d052      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 800153c:	4a94      	ldr	r2, [pc, #592]	; (8001790 <HAL_GPIO_Init+0x2a8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d869      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001542:	4a94      	ldr	r2, [pc, #592]	; (8001794 <HAL_GPIO_Init+0x2ac>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d04c      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001548:	4a92      	ldr	r2, [pc, #584]	; (8001794 <HAL_GPIO_Init+0x2ac>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d863      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800154e:	4a92      	ldr	r2, [pc, #584]	; (8001798 <HAL_GPIO_Init+0x2b0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d046      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001554:	4a90      	ldr	r2, [pc, #576]	; (8001798 <HAL_GPIO_Init+0x2b0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d85d      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800155a:	2b12      	cmp	r3, #18
 800155c:	d82a      	bhi.n	80015b4 <HAL_GPIO_Init+0xcc>
 800155e:	2b12      	cmp	r3, #18
 8001560:	d859      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001562:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <HAL_GPIO_Init+0x80>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	080015e3 	.word	0x080015e3
 800156c:	080015bd 	.word	0x080015bd
 8001570:	080015cf 	.word	0x080015cf
 8001574:	08001611 	.word	0x08001611
 8001578:	08001617 	.word	0x08001617
 800157c:	08001617 	.word	0x08001617
 8001580:	08001617 	.word	0x08001617
 8001584:	08001617 	.word	0x08001617
 8001588:	08001617 	.word	0x08001617
 800158c:	08001617 	.word	0x08001617
 8001590:	08001617 	.word	0x08001617
 8001594:	08001617 	.word	0x08001617
 8001598:	08001617 	.word	0x08001617
 800159c:	08001617 	.word	0x08001617
 80015a0:	08001617 	.word	0x08001617
 80015a4:	08001617 	.word	0x08001617
 80015a8:	08001617 	.word	0x08001617
 80015ac:	080015c5 	.word	0x080015c5
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	4a79      	ldr	r2, [pc, #484]	; (800179c <HAL_GPIO_Init+0x2b4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ba:	e02c      	b.n	8001616 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e029      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	3304      	adds	r3, #4
 80015ca:	623b      	str	r3, [r7, #32]
          break;
 80015cc:	e024      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	3308      	adds	r3, #8
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e01f      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	330c      	adds	r3, #12
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e01a      	b.n	8001618 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ea:	2304      	movs	r3, #4
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e013      	b.n	8001618 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f8:	2308      	movs	r3, #8
 80015fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	611a      	str	r2, [r3, #16]
          break;
 8001602:	e009      	b.n	8001618 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2308      	movs	r3, #8
 8001606:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	615a      	str	r2, [r3, #20]
          break;
 800160e:	e003      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x130>
          break;
 8001616:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2bff      	cmp	r3, #255	; 0xff
 800161c:	d801      	bhi.n	8001622 <HAL_GPIO_Init+0x13a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_Init+0x13e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3304      	adds	r3, #4
 8001626:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2bff      	cmp	r3, #255	; 0xff
 800162c:	d802      	bhi.n	8001634 <HAL_GPIO_Init+0x14c>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x152>
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	3b08      	subs	r3, #8
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	210f      	movs	r1, #15
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	6a39      	ldr	r1, [r7, #32]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80b1 	beq.w	80017ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001668:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a4c      	ldr	r2, [pc, #304]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001680:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <HAL_GPIO_Init+0x2bc>)
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a40      	ldr	r2, [pc, #256]	; (80017a8 <HAL_GPIO_Init+0x2c0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d013      	beq.n	80016d4 <HAL_GPIO_Init+0x1ec>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3f      	ldr	r2, [pc, #252]	; (80017ac <HAL_GPIO_Init+0x2c4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d00d      	beq.n	80016d0 <HAL_GPIO_Init+0x1e8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3e      	ldr	r2, [pc, #248]	; (80017b0 <HAL_GPIO_Init+0x2c8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d007      	beq.n	80016cc <HAL_GPIO_Init+0x1e4>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a3d      	ldr	r2, [pc, #244]	; (80017b4 <HAL_GPIO_Init+0x2cc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d101      	bne.n	80016c8 <HAL_GPIO_Init+0x1e0>
 80016c4:	2303      	movs	r3, #3
 80016c6:	e006      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016c8:	2304      	movs	r3, #4
 80016ca:	e004      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016d4:	2300      	movs	r3, #0
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4093      	lsls	r3, r2
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016e6:	492f      	ldr	r1, [pc, #188]	; (80017a4 <HAL_GPIO_Init+0x2bc>)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001700:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	492c      	ldr	r1, [pc, #176]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4928      	ldr	r1, [pc, #160]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001718:	4013      	ands	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4922      	ldr	r1, [pc, #136]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	491e      	ldr	r1, [pc, #120]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001740:	4013      	ands	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4918      	ldr	r1, [pc, #96]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4914      	ldr	r1, [pc, #80]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001768:	4013      	ands	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d021      	beq.n	80017bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	490e      	ldr	r1, [pc, #56]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e021      	b.n	80017ca <HAL_GPIO_Init+0x2e2>
 8001786:	bf00      	nop
 8001788:	10320000 	.word	0x10320000
 800178c:	10310000 	.word	0x10310000
 8001790:	10220000 	.word	0x10220000
 8001794:	10210000 	.word	0x10210000
 8001798:	10120000 	.word	0x10120000
 800179c:	10110000 	.word	0x10110000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40011400 	.word	0x40011400
 80017b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_GPIO_Init+0x304>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4909      	ldr	r1, [pc, #36]	; (80017ec <HAL_GPIO_Init+0x304>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	3301      	adds	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f47f ae8e 	bne.w	80014fc <HAL_GPIO_Init+0x14>
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	372c      	adds	r7, #44	; 0x2c
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0e8      	b.n	8001a02 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f007 fa37 	bl	8008cb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2203      	movs	r2, #3
 800184e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 f950 	bl	8004b02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3304      	adds	r3, #4
 800186a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800186c:	f003 f926 	bl	8004abc <USB_CoreInit>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2202      	movs	r2, #2
 800187a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0bf      	b.n	8001a02 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f003 f954 	bl	8004b36 <USB_SetCurrentMode>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0b0      	b.n	8001a02 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e03e      	b.n	8001924 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	3311      	adds	r3, #17
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	3310      	adds	r3, #16
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3313      	adds	r3, #19
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	3320      	adds	r3, #32
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3324      	adds	r3, #36	; 0x24
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	3301      	adds	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	791b      	ldrb	r3, [r3, #4]
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	429a      	cmp	r2, r3
 800192c:	d3bb      	bcc.n	80018a6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	e044      	b.n	80019be <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	3301      	adds	r3, #1
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	791b      	ldrb	r3, [r3, #4]
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3b5      	bcc.n	8001934 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3304      	adds	r3, #4
 80019d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d2:	f003 f8bc 	bl	8004b4e <USB_DevInit>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e00c      	b.n	8001a02 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f005 fb3b 	bl	8007076 <USB_DevDisconnect>

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_PCD_Start+0x16>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e016      	b.n	8001a4e <HAL_PCD_Start+0x44>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 f852 	bl	8004ad6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a32:	2101      	movs	r1, #1
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f007 fbb2 	bl	800919e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f005 fb0f 	bl	8007062 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b088      	sub	sp, #32
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 fb11 	bl	800708a <USB_ReadInterrupts>
 8001a68:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fb1a 	bl	80020ae <PCD_EP_ISR_Handler>

    return;
 8001a7a:	e119      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d013      	beq.n	8001aae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a98:	b292      	uxth	r2, r2
 8001a9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f007 f985 	bl	8008dae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f905 	bl	8001cb6 <HAL_PCD_SetAddress>

    return;
 8001aac:	e100      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aca:	b292      	uxth	r2, r2
 8001acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ad0:	e0ee      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00c      	beq.n	8001af6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aee:	b292      	uxth	r2, r2
 8001af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001af4:	e0dc      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d027      	beq.n	8001b50 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0204 	bic.w	r2, r2, #4
 8001b12:	b292      	uxth	r2, r2
 8001b14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0208 	bic.w	r2, r2, #8
 8001b2a:	b292      	uxth	r2, r2
 8001b2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f007 f975 	bl	8008e20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b48:	b292      	uxth	r2, r2
 8001b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001b4e:	e0af      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8083 	beq.w	8001c62 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	77fb      	strb	r3, [r7, #31]
 8001b60:	e010      	b.n	8001b84 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	7ffb      	ldrb	r3, [r7, #31]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	441a      	add	r2, r3
 8001b6e:	7ffb      	ldrb	r3, [r7, #31]
 8001b70:	8812      	ldrh	r2, [r2, #0]
 8001b72:	b292      	uxth	r2, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	3320      	adds	r3, #32
 8001b78:	443b      	add	r3, r7
 8001b7a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001b7e:	7ffb      	ldrb	r3, [r7, #31]
 8001b80:	3301      	adds	r3, #1
 8001b82:	77fb      	strb	r3, [r7, #31]
 8001b84:	7ffb      	ldrb	r3, [r7, #31]
 8001b86:	2b07      	cmp	r3, #7
 8001b88:	d9eb      	bls.n	8001b62 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0201 	orr.w	r2, r2, #1
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	b292      	uxth	r2, r2
 8001bb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bba:	bf00      	nop
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f6      	beq.n	8001bbc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be0:	b292      	uxth	r2, r2
 8001be2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	77fb      	strb	r3, [r7, #31]
 8001bea:	e00f      	b.n	8001c0c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001bec:	7ffb      	ldrb	r3, [r7, #31]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	7ffa      	ldrb	r2, [r7, #31]
 8001bf6:	0092      	lsls	r2, r2, #2
 8001bf8:	440a      	add	r2, r1
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	3320      	adds	r3, #32
 8001bfe:	443b      	add	r3, r7
 8001c00:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001c04:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c06:	7ffb      	ldrb	r3, [r7, #31]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	77fb      	strb	r3, [r7, #31]
 8001c0c:	7ffb      	ldrb	r3, [r7, #31]
 8001c0e:	2b07      	cmp	r3, #7
 8001c10:	d9ec      	bls.n	8001bec <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0208 	orr.w	r2, r2, #8
 8001c24:	b292      	uxth	r2, r2
 8001c26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3c:	b292      	uxth	r2, r2
 8001c3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0204 	orr.w	r2, r2, #4
 8001c54:	b292      	uxth	r2, r2
 8001c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f007 f8c6 	bl	8008dec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001c60:	e026      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00f      	beq.n	8001c8c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f007 f884 	bl	8008d92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001c8a:	e011      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001cae:	bf00      	nop
  }
}
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_PCD_SetAddress+0x1a>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e012      	b.n	8001cf6 <HAL_PCD_SetAddress+0x40>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f005 f9a8 	bl	800703c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	4608      	mov	r0, r1
 8001d08:	4611      	mov	r1, r2
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	70fb      	strb	r3, [r7, #3]
 8001d10:	460b      	mov	r3, r1
 8001d12:	803b      	strh	r3, [r7, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da0e      	bge.n	8001d42 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 0207 	and.w	r2, r3, #7
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	3310      	adds	r3, #16
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	705a      	strb	r2, [r3, #1]
 8001d40:	e00e      	b.n	8001d60 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f003 0207 	and.w	r2, r3, #7
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d6c:	883a      	ldrh	r2, [r7, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	78ba      	ldrb	r2, [r7, #2]
 8001d76:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d78:	78bb      	ldrb	r3, [r7, #2]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d102      	bne.n	8001d84 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_PCD_EP_Open+0x94>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e00e      	b.n	8001db0 <HAL_PCD_EP_Open+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fef1 	bl	8004b88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8001dae:	7afb      	ldrb	r3, [r7, #11]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	da0e      	bge.n	8001dea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 0207 	and.w	r2, r3, #7
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	3310      	adds	r3, #16
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	705a      	strb	r2, [r3, #1]
 8001de8:	e00e      	b.n	8001e08 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 0207 	and.w	r2, r3, #7
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_PCD_EP_Close+0x6a>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e00e      	b.n	8001e40 <HAL_PCD_EP_Close+0x88>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68f9      	ldr	r1, [r7, #12]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fa69 	bl	8005308 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	460b      	mov	r3, r1
 8001e56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e58:	7afb      	ldrb	r3, [r7, #11]
 8001e5a:	f003 0207 	and.w	r2, r3, #7
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2200      	movs	r2, #0
 8001e86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6979      	ldr	r1, [r7, #20]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fc20 	bl	80056e0 <USB_EPStartXfer>

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f003 0207 	and.w	r2, r3, #7
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001ecc:	681b      	ldr	r3, [r3, #0]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	f003 0207 	and.w	r2, r3, #7
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	3310      	adds	r3, #16
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2201      	movs	r2, #1
 8001f22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6979      	ldr	r1, [r7, #20]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fbd2 	bl	80056e0 <USB_EPStartXfer>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	7912      	ldrb	r2, [r2, #4]
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e04c      	b.n	8001ffe <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da0e      	bge.n	8001f8a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f003 0207 	and.w	r2, r3, #7
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	3310      	adds	r3, #16
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	705a      	strb	r2, [r3, #1]
 8001f88:	e00c      	b.n	8001fa4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_PCD_EP_SetStall+0x7e>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e01c      	b.n	8001ffe <HAL_PCD_EP_SetStall+0xb8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68f9      	ldr	r1, [r7, #12]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 ff35 	bl	8006e42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d108      	bne.n	8001ff4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f005 f85a 	bl	80070a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	7912      	ldrb	r2, [r2, #4]
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e040      	b.n	80020a6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da0e      	bge.n	800204a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 0207 	and.w	r2, r3, #7
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	3310      	adds	r3, #16
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	705a      	strb	r2, [r3, #1]
 8002048:	e00e      	b.n	8002068 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 0207 	and.w	r2, r3, #7
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_PCD_EP_ClrStall+0x82>
 8002084:	2302      	movs	r3, #2
 8002086:	e00e      	b.n	80020a6 <HAL_PCD_EP_ClrStall+0xa0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 ff23 	bl	8006ee2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b096      	sub	sp, #88	; 0x58
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020b6:	e3bc      	b.n	8002832 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80020d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 8176 	bne.w	80023c8 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d14f      	bne.n	8002188 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f8:	81fb      	strh	r3, [r7, #14]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	89fb      	ldrh	r3, [r7, #14]
 8002100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002108:	b29b      	uxth	r3, r3
 800210a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3310      	adds	r3, #16
 8002110:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	3302      	adds	r3, #2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800213a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800213e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	441a      	add	r2, r3
 8002148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800214c:	2100      	movs	r1, #0
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f006 fe05 	bl	8008d5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7b5b      	ldrb	r3, [r3, #13]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8369 	beq.w	8002832 <PCD_EP_ISR_Handler+0x784>
 8002160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 8364 	bne.w	8002832 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7b5b      	ldrb	r3, [r3, #13]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002174:	b2da      	uxtb	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	b292      	uxth	r2, r2
 800217c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	735a      	strb	r2, [r3, #13]
 8002186:	e354      	b.n	8002832 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800218e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800219a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800219e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d034      	beq.n	8002210 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	3306      	adds	r3, #6
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80021dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021de:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f004 ffaf 	bl	8007148 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021f6:	4013      	ands	r3, r2
 80021f8:	823b      	strh	r3, [r7, #16]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	8a3a      	ldrh	r2, [r7, #16]
 8002200:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002204:	b292      	uxth	r2, r2
 8002206:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f006 fd7b 	bl	8008d04 <HAL_PCD_SetupStageCallback>
 800220e:	e310      	b.n	8002832 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002210:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002214:	2b00      	cmp	r3, #0
 8002216:	f280 830c 	bge.w	8002832 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29a      	uxth	r2, r3
 8002222:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002226:	4013      	ands	r3, r2
 8002228:	83fb      	strh	r3, [r7, #30]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	8bfa      	ldrh	r2, [r7, #30]
 8002230:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002234:	b292      	uxth	r2, r2
 8002236:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	3306      	adds	r3, #6
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002262:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d019      	beq.n	80022a0 <PCD_EP_ISR_Handler+0x1f2>
 800226c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800227a:	6959      	ldr	r1, [r3, #20]
 800227c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800227e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002282:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002284:	b29b      	uxth	r3, r3
 8002286:	f004 ff5f 	bl	8007148 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800228a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	441a      	add	r2, r3
 8002294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002296:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002298:	2100      	movs	r1, #0
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f006 fd44 	bl	8008d28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80022aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 82bd 	bne.w	8002832 <PCD_EP_ISR_Handler+0x784>
 80022b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80022c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80022c4:	f000 82b5 	beq.w	8002832 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4413      	add	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	801a      	strh	r2, [r3, #0]
 80022f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b3e      	cmp	r3, #62	; 0x3e
 80022fe:	d91d      	bls.n	800233c <PCD_EP_ISR_Handler+0x28e>
 8002300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	647b      	str	r3, [r7, #68]	; 0x44
 8002308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <PCD_EP_ISR_Handler+0x26c>
 8002314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002316:	3b01      	subs	r3, #1
 8002318:	647b      	str	r3, [r7, #68]	; 0x44
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b29a      	uxth	r2, r3
 8002320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002322:	b29b      	uxth	r3, r3
 8002324:	029b      	lsls	r3, r3, #10
 8002326:	b29b      	uxth	r3, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	b29b      	uxth	r3, r3
 800232c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002334:	b29a      	uxth	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	801a      	strh	r2, [r3, #0]
 800233a:	e026      	b.n	800238a <PCD_EP_ISR_Handler+0x2dc>
 800233c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <PCD_EP_ISR_Handler+0x2ac>
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800234e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002352:	b29a      	uxth	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	801a      	strh	r2, [r3, #0]
 8002358:	e017      	b.n	800238a <PCD_EP_ISR_Handler+0x2dc>
 800235a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	647b      	str	r3, [r7, #68]	; 0x44
 8002362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <PCD_EP_ISR_Handler+0x2c6>
 800236e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002370:	3301      	adds	r3, #1
 8002372:	647b      	str	r3, [r7, #68]	; 0x44
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29a      	uxth	r2, r3
 800237a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237c:	b29b      	uxth	r3, r3
 800237e:	029b      	lsls	r3, r3, #10
 8002380:	b29b      	uxth	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b29a      	uxth	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	827b      	strh	r3, [r7, #18]
 800239c:	8a7b      	ldrh	r3, [r7, #18]
 800239e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023a2:	827b      	strh	r3, [r7, #18]
 80023a4:	8a7b      	ldrh	r3, [r7, #18]
 80023a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023aa:	827b      	strh	r3, [r7, #18]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	8a7b      	ldrh	r3, [r7, #18]
 80023b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	8013      	strh	r3, [r2, #0]
 80023c6:	e234      	b.n	8002832 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f280 80fc 	bge.w	80025de <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023fc:	4013      	ands	r3, r2
 80023fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002414:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002418:	b292      	uxth	r2, r2
 800241a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800241c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002434:	7b1b      	ldrb	r3, [r3, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d125      	bne.n	8002486 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	3306      	adds	r3, #6
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002462:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002466:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8092 	beq.w	8002594 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002476:	6959      	ldr	r1, [r3, #20]
 8002478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800247a:	88da      	ldrh	r2, [r3, #6]
 800247c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002480:	f004 fe62 	bl	8007148 <USB_ReadPMA>
 8002484:	e086      	b.n	8002594 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002488:	78db      	ldrb	r3, [r3, #3]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d10a      	bne.n	80024a4 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800248e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002492:	461a      	mov	r2, r3
 8002494:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f9d9 	bl	800284e <HAL_PCD_EP_DB_Receive>
 800249c:	4603      	mov	r3, r0
 800249e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80024a2:	e077      	b.n	8002594 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	441a      	add	r2, r3
 80024d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80024d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d024      	beq.n	800254c <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	3302      	adds	r3, #2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800252e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002532:	2b00      	cmp	r3, #0
 8002534:	d02e      	beq.n	8002594 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800253c:	6959      	ldr	r1, [r3, #20]
 800253e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002540:	891a      	ldrh	r2, [r3, #8]
 8002542:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002546:	f004 fdff 	bl	8007148 <USB_ReadPMA>
 800254a:	e023      	b.n	8002594 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	3306      	adds	r3, #6
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002574:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002578:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002586:	6959      	ldr	r1, [r3, #20]
 8002588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258a:	895a      	ldrh	r2, [r3, #10]
 800258c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002590:	f004 fdda 	bl	8007148 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800259c:	441a      	add	r2, r3
 800259e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80025aa:	441a      	add	r2, r3
 80025ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <PCD_EP_ISR_Handler+0x516>
 80025b8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80025bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d206      	bcs.n	80025d2 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f006 fbac 	bl	8008d28 <HAL_PCD_DataOutStageCallback>
 80025d0:	e005      	b.n	80025de <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 f881 	bl	80056e0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8123 	beq.w	8002832 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 80025ec:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	3310      	adds	r3, #16
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	441a      	add	r2, r3
 800262c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002638:	b29b      	uxth	r3, r3
 800263a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800263c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263e:	78db      	ldrb	r3, [r3, #3]
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 80a2 	bne.w	800278a <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8002646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800264c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264e:	7b1b      	ldrb	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8093 	beq.w	800277c <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002656:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d046      	beq.n	80026f0 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d126      	bne.n	80026b8 <PCD_EP_ISR_Handler+0x60a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	4413      	add	r3, r2
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
 8002682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	011a      	lsls	r2, r3, #4
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	4413      	add	r3, r2
 800268c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002690:	623b      	str	r3, [r7, #32]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269c:	b29a      	uxth	r2, r3
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	801a      	strh	r2, [r3, #0]
 80026b6:	e061      	b.n	800277c <PCD_EP_ISR_Handler+0x6ce>
 80026b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d15d      	bne.n	800277c <PCD_EP_ISR_Handler+0x6ce>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	4413      	add	r3, r2
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	011a      	lsls	r2, r3, #4
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	4413      	add	r3, r2
 80026e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	2200      	movs	r2, #0
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	e045      	b.n	800277c <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f8:	785b      	ldrb	r3, [r3, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d126      	bne.n	800274c <PCD_EP_ISR_Handler+0x69e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800270c:	b29b      	uxth	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	4413      	add	r3, r2
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
 8002716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	011a      	lsls	r2, r3, #4
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271e:	4413      	add	r3, r2
 8002720:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002724:	633b      	str	r3, [r7, #48]	; 0x30
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002730:	b29a      	uxth	r2, r3
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	801a      	strh	r2, [r3, #0]
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002744:	b29a      	uxth	r2, r3
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	e017      	b.n	800277c <PCD_EP_ISR_Handler+0x6ce>
 800274c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274e:	785b      	ldrb	r3, [r3, #1]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d113      	bne.n	800277c <PCD_EP_ISR_Handler+0x6ce>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002762:	4413      	add	r3, r2
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	011a      	lsls	r2, r3, #4
 800276c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276e:	4413      	add	r3, r2
 8002770:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	2200      	movs	r2, #0
 800277a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800277c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f006 faeb 	bl	8008d5e <HAL_PCD_DataInStageCallback>
 8002788:	e053      	b.n	8002832 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800278a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d146      	bne.n	8002824 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	3302      	adds	r3, #2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80027c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d907      	bls.n	80027de <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 80027ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80027d6:	1ad2      	subs	r2, r2, r3
 80027d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027da:	619a      	str	r2, [r3, #24]
 80027dc:	e002      	b.n	80027e4 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 80027de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80027e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f006 fab3 	bl	8008d5e <HAL_PCD_DataInStageCallback>
 80027f8:	e01b      	b.n	8002832 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002802:	441a      	add	r2, r3
 8002804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002806:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280a:	69da      	ldr	r2, [r3, #28]
 800280c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002810:	441a      	add	r2, r3
 8002812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002814:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800281c:	4618      	mov	r0, r3
 800281e:	f002 ff5f 	bl	80056e0 <USB_EPStartXfer>
 8002822:	e006      	b.n	8002832 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002824:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002828:	461a      	mov	r2, r3
 800282a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f91b 	bl	8002a68 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800283a:	b29b      	uxth	r3, r3
 800283c:	b21b      	sxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	f6ff ac3a 	blt.w	80020b8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3758      	adds	r7, #88	; 0x58
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b088      	sub	sp, #32
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	4613      	mov	r3, r2
 800285a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d07e      	beq.n	8002964 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	3302      	adds	r3, #2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800288e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	8b7b      	ldrh	r3, [r7, #26]
 8002896:	429a      	cmp	r2, r3
 8002898:	d306      	bcc.n	80028a8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	8b7b      	ldrh	r3, [r7, #26]
 80028a0:	1ad2      	subs	r2, r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	619a      	str	r2, [r3, #24]
 80028a6:	e002      	b.n	80028ae <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d123      	bne.n	80028fe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d0:	833b      	strh	r3, [r7, #24]
 80028d2:	8b3b      	ldrh	r3, [r7, #24]
 80028d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028d8:	833b      	strh	r3, [r7, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	441a      	add	r2, r3
 80028e8:	8b3b      	ldrh	r3, [r7, #24]
 80028ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01f      	beq.n	8002948 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	82fb      	strh	r3, [r7, #22]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	8afb      	ldrh	r3, [r7, #22]
 8002934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800293c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002944:	b29b      	uxth	r3, r3
 8002946:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002948:	8b7b      	ldrh	r3, [r7, #26]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8087 	beq.w	8002a5e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	6959      	ldr	r1, [r3, #20]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	891a      	ldrh	r2, [r3, #8]
 800295c:	8b7b      	ldrh	r3, [r7, #26]
 800295e:	f004 fbf3 	bl	8007148 <USB_ReadPMA>
 8002962:	e07c      	b.n	8002a5e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	3306      	adds	r3, #6
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	8b7b      	ldrh	r3, [r7, #26]
 8002994:	429a      	cmp	r2, r3
 8002996:	d306      	bcc.n	80029a6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	699a      	ldr	r2, [r3, #24]
 800299c:	8b7b      	ldrh	r3, [r7, #26]
 800299e:	1ad2      	subs	r2, r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	619a      	str	r2, [r3, #24]
 80029a4:	e002      	b.n	80029ac <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d123      	bne.n	80029fc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	83fb      	strh	r3, [r7, #30]
 80029d0:	8bfb      	ldrh	r3, [r7, #30]
 80029d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029d6:	83fb      	strh	r3, [r7, #30]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	8bfb      	ldrh	r3, [r7, #30]
 80029e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11f      	bne.n	8002a46 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	83bb      	strh	r3, [r7, #28]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	441a      	add	r2, r3
 8002a30:	8bbb      	ldrh	r3, [r7, #28]
 8002a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a46:	8b7b      	ldrh	r3, [r7, #26]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6959      	ldr	r1, [r3, #20]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	895a      	ldrh	r2, [r3, #10]
 8002a58:	8b7b      	ldrh	r3, [r7, #26]
 8002a5a:	f004 fb75 	bl	8007148 <USB_ReadPMA>
    }
  }

  return count;
 8002a5e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b0a4      	sub	sp, #144	; 0x90
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 81dd 	beq.w	8002e3c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	3302      	adds	r3, #2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aaa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d907      	bls.n	8002aca <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ac2:	1ad2      	subs	r2, r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	619a      	str	r2, [r3, #24]
 8002ac8:	e002      	b.n	8002ad0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f040 80b9 	bne.w	8002c4c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d126      	bne.n	8002b30 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	4413      	add	r3, r2
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	011a      	lsls	r2, r3, #4
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	4413      	add	r3, r2
 8002b04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	801a      	strh	r2, [r3, #0]
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	801a      	strh	r2, [r3, #0]
 8002b2e:	e01a      	b.n	8002b66 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	785b      	ldrb	r3, [r3, #1]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d116      	bne.n	8002b66 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4c:	4413      	add	r3, r2
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	011a      	lsls	r2, r3, #4
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	4413      	add	r3, r2
 8002b5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	2200      	movs	r2, #0
 8002b64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d126      	bne.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	011a      	lsls	r2, r3, #4
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	801a      	strh	r2, [r3, #0]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	801a      	strh	r2, [r3, #0]
 8002bc0:	e017      	b.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	785b      	ldrb	r3, [r3, #1]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d113      	bne.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	4413      	add	r3, r2
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	011a      	lsls	r2, r3, #4
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	4413      	add	r3, r2
 8002be6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f006 f8b0 	bl	8008d5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 82fc 	beq.w	8003202 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c24:	82fb      	strh	r3, [r7, #22]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	441a      	add	r2, r3
 8002c34:	8afb      	ldrh	r3, [r7, #22]
 8002c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8013      	strh	r3, [r2, #0]
 8002c4a:	e2da      	b.n	8003202 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d021      	beq.n	8002c9a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 82ae 	bne.w	8003202 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002cae:	441a      	add	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002cbc:	441a      	add	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d30b      	bcc.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	6a1a      	ldr	r2, [r3, #32]
 8002cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cde:	1ad2      	subs	r2, r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	621a      	str	r2, [r3, #32]
 8002ce4:	e017      	b.n	8002d16 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d108      	bne.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002cee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cfe:	e00a      	b.n	8002d16 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2200      	movs	r2, #0
 8002d14:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	785b      	ldrb	r3, [r3, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d165      	bne.n	8002dea <HAL_PCD_EP_DB_Transmit+0x382>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d32:	4413      	add	r3, r2
 8002d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	011a      	lsls	r2, r3, #4
 8002d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3e:	4413      	add	r3, r2
 8002d40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8002d5c:	d91d      	bls.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x332>
 8002d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x310>
 8002d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d74:	3b01      	subs	r3, #1
 8002d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	029b      	lsls	r3, r3, #10
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	4313      	orrs	r3, r2
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	e044      	b.n	8002e24 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x350>
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	e035      	b.n	8002e24 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dce:	3301      	adds	r3, #1
 8002dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	801a      	strh	r2, [r3, #0]
 8002de8:	e01c      	b.n	8002e24 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d118      	bne.n	8002e24 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	647b      	str	r3, [r7, #68]	; 0x44
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e06:	4413      	add	r3, r2
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	011a      	lsls	r2, r3, #4
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	4413      	add	r3, r2
 8002e14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e18:	643b      	str	r3, [r7, #64]	; 0x40
 8002e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e22:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6959      	ldr	r1, [r3, #20]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	891a      	ldrh	r2, [r3, #8]
 8002e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	f004 f942 	bl	80070be <USB_WritePMA>
 8002e3a:	e1e2      	b.n	8003202 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3306      	adds	r3, #6
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e64:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d307      	bcc.n	8002e84 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e7c:	1ad2      	subs	r2, r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	619a      	str	r2, [r3, #24]
 8002e82:	e002      	b.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f040 80c0 	bne.w	8003014 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d126      	bne.n	8002eea <HAL_PCD_EP_DB_Transmit+0x482>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eb0:	4413      	add	r3, r2
 8002eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	011a      	lsls	r2, r3, #4
 8002eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ec2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed2:	801a      	strh	r2, [r3, #0]
 8002ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ee6:	801a      	strh	r2, [r3, #0]
 8002ee8:	e01a      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	785b      	ldrb	r3, [r3, #1]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d116      	bne.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f06:	4413      	add	r3, r2
 8002f08:	667b      	str	r3, [r7, #100]	; 0x64
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	011a      	lsls	r2, r3, #4
 8002f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f12:	4413      	add	r3, r2
 8002f14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f18:	663b      	str	r3, [r7, #96]	; 0x60
 8002f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	677b      	str	r3, [r7, #116]	; 0x74
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d12b      	bne.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f42:	4413      	add	r3, r2
 8002f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	011a      	lsls	r2, r3, #4
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	e017      	b.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d113      	bne.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9c:	4413      	add	r3, r2
 8002f9e:	677b      	str	r3, [r7, #116]	; 0x74
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	011a      	lsls	r2, r3, #4
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	4413      	add	r3, r2
 8002faa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fae:	673b      	str	r3, [r7, #112]	; 0x70
 8002fb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f005 fece 	bl	8008d5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f040 811a 	bne.w	8003202 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	441a      	add	r2, r3
 8002ffa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800300a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300e:	b29b      	uxth	r3, r3
 8003010:	8013      	strh	r3, [r2, #0]
 8003012:	e0f6      	b.n	8003202 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d121      	bne.n	8003062 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003038:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800304e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800305a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 80ca 	bne.w	8003202 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003076:	441a      	add	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003084:	441a      	add	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	429a      	cmp	r2, r3
 8003094:	d30b      	bcc.n	80030ae <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	621a      	str	r2, [r3, #32]
 80030ac:	e017      	b.n	80030de <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80030b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030c6:	e00a      	b.n	80030de <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2200      	movs	r2, #0
 80030d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	657b      	str	r3, [r7, #84]	; 0x54
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d165      	bne.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x750>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003100:	4413      	add	r3, r2
 8003102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	011a      	lsls	r2, r3, #4
 800310a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800310c:	4413      	add	r3, r2
 800310e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003112:	65bb      	str	r3, [r7, #88]	; 0x58
 8003114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800311e:	b29a      	uxth	r2, r3
 8003120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003128:	2b3e      	cmp	r3, #62	; 0x3e
 800312a:	d91d      	bls.n	8003168 <HAL_PCD_EP_DB_Transmit+0x700>
 800312c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	66bb      	str	r3, [r7, #104]	; 0x68
 8003134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003142:	3b01      	subs	r3, #1
 8003144:	66bb      	str	r3, [r7, #104]	; 0x68
 8003146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29a      	uxth	r2, r3
 800314c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800314e:	b29b      	uxth	r3, r3
 8003150:	029b      	lsls	r3, r3, #10
 8003152:	b29b      	uxth	r3, r3
 8003154:	4313      	orrs	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800315c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003160:	b29a      	uxth	r2, r3
 8003162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003164:	801a      	strh	r2, [r3, #0]
 8003166:	e041      	b.n	80031ec <HAL_PCD_EP_DB_Transmit+0x784>
 8003168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317e:	b29a      	uxth	r2, r3
 8003180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	e032      	b.n	80031ec <HAL_PCD_EP_DB_Transmit+0x784>
 8003186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	66bb      	str	r3, [r7, #104]	; 0x68
 800318e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_PCD_EP_DB_Transmit+0x738>
 800319a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800319c:	3301      	adds	r3, #1
 800319e:	66bb      	str	r3, [r7, #104]	; 0x68
 80031a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	029b      	lsls	r3, r3, #10
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b4:	801a      	strh	r2, [r3, #0]
 80031b6:	e019      	b.n	80031ec <HAL_PCD_EP_DB_Transmit+0x784>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d115      	bne.n	80031ec <HAL_PCD_EP_DB_Transmit+0x784>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ce:	4413      	add	r3, r2
 80031d0:	657b      	str	r3, [r7, #84]	; 0x54
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	011a      	lsls	r2, r3, #4
 80031d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031da:	4413      	add	r3, r2
 80031dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031e0:	653b      	str	r3, [r7, #80]	; 0x50
 80031e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	6959      	ldr	r1, [r3, #20]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	895a      	ldrh	r2, [r3, #10]
 80031f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f003 ff5e 	bl	80070be <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800321c:	82bb      	strh	r3, [r7, #20]
 800321e:	8abb      	ldrh	r3, [r7, #20]
 8003220:	f083 0310 	eor.w	r3, r3, #16
 8003224:	82bb      	strh	r3, [r7, #20]
 8003226:	8abb      	ldrh	r3, [r7, #20]
 8003228:	f083 0320 	eor.w	r3, r3, #32
 800322c:	82bb      	strh	r3, [r7, #20]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	441a      	add	r2, r3
 800323c:	8abb      	ldrh	r3, [r7, #20]
 800323e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324e:	b29b      	uxth	r3, r3
 8003250:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3790      	adds	r7, #144	; 0x90
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	817b      	strh	r3, [r7, #10]
 800326a:	4613      	mov	r3, r2
 800326c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800326e:	897b      	ldrh	r3, [r7, #10]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	f003 0207 	and.w	r2, r3, #7
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	3310      	adds	r3, #16
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4413      	add	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e009      	b.n	80032a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003292:	897a      	ldrh	r2, [r7, #10]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032a6:	893b      	ldrh	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	80da      	strh	r2, [r3, #6]
 80032ba:	e00b      	b.n	80032d4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2201      	movs	r2, #1
 80032c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e272      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8087 	beq.w	800340e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003300:	4b92      	ldr	r3, [pc, #584]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b04      	cmp	r3, #4
 800330a:	d00c      	beq.n	8003326 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800330c:	4b8f      	ldr	r3, [pc, #572]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b08      	cmp	r3, #8
 8003316:	d112      	bne.n	800333e <HAL_RCC_OscConfig+0x5e>
 8003318:	4b8c      	ldr	r3, [pc, #560]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d10b      	bne.n	800333e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003326:	4b89      	ldr	r3, [pc, #548]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d06c      	beq.n	800340c <HAL_RCC_OscConfig+0x12c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d168      	bne.n	800340c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e24c      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x76>
 8003348:	4b80      	ldr	r3, [pc, #512]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a7f      	ldr	r2, [pc, #508]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 800334e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	e02e      	b.n	80033b4 <HAL_RCC_OscConfig+0xd4>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x98>
 800335e:	4b7b      	ldr	r3, [pc, #492]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7a      	ldr	r2, [pc, #488]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b78      	ldr	r3, [pc, #480]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a77      	ldr	r2, [pc, #476]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e01d      	b.n	80033b4 <HAL_RCC_OscConfig+0xd4>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0xbc>
 8003382:	4b72      	ldr	r3, [pc, #456]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a71      	ldr	r2, [pc, #452]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b6f      	ldr	r3, [pc, #444]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a6e      	ldr	r2, [pc, #440]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e00b      	b.n	80033b4 <HAL_RCC_OscConfig+0xd4>
 800339c:	4b6b      	ldr	r3, [pc, #428]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a6a      	ldr	r2, [pc, #424]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 80033a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b68      	ldr	r3, [pc, #416]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a67      	ldr	r2, [pc, #412]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 80033ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fd ff7c 	bl	80012b8 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c4:	f7fd ff78 	bl	80012b8 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	; 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e200      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	4b5d      	ldr	r3, [pc, #372]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0xe4>
 80033e2:	e014      	b.n	800340e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fd ff68 	bl	80012b8 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fd ff64 	bl	80012b8 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e1ec      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x10c>
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d063      	beq.n	80034e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800341a:	4b4c      	ldr	r3, [pc, #304]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003426:	4b49      	ldr	r3, [pc, #292]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d11c      	bne.n	800346c <HAL_RCC_OscConfig+0x18c>
 8003432:	4b46      	ldr	r3, [pc, #280]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d116      	bne.n	800346c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343e:	4b43      	ldr	r3, [pc, #268]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_RCC_OscConfig+0x176>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d001      	beq.n	8003456 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e1c0      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4939      	ldr	r1, [pc, #228]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346a:	e03a      	b.n	80034e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003474:	4b36      	ldr	r3, [pc, #216]	; (8003550 <HAL_RCC_OscConfig+0x270>)
 8003476:	2201      	movs	r2, #1
 8003478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7fd ff1d 	bl	80012b8 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003482:	f7fd ff19 	bl	80012b8 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e1a1      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	4b2d      	ldr	r3, [pc, #180]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a0:	4b2a      	ldr	r3, [pc, #168]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4927      	ldr	r1, [pc, #156]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	600b      	str	r3, [r1, #0]
 80034b4:	e015      	b.n	80034e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b6:	4b26      	ldr	r3, [pc, #152]	; (8003550 <HAL_RCC_OscConfig+0x270>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fd fefc 	bl	80012b8 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c4:	f7fd fef8 	bl	80012b8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e180      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d03a      	beq.n	8003564 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d019      	beq.n	800352a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fc:	f7fd fedc 	bl	80012b8 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003504:	f7fd fed8 	bl	80012b8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e160      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <HAL_RCC_OscConfig+0x26c>)
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003522:	2001      	movs	r0, #1
 8003524:	f000 fa9c 	bl	8003a60 <RCC_Delay>
 8003528:	e01c      	b.n	8003564 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003530:	f7fd fec2 	bl	80012b8 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003536:	e00f      	b.n	8003558 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003538:	f7fd febe 	bl	80012b8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d908      	bls.n	8003558 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e146      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	42420000 	.word	0x42420000
 8003554:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b92      	ldr	r3, [pc, #584]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e9      	bne.n	8003538 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a6 	beq.w	80036be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b8b      	ldr	r3, [pc, #556]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	4b88      	ldr	r3, [pc, #544]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	4a87      	ldr	r2, [pc, #540]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	61d3      	str	r3, [r2, #28]
 800358e:	4b85      	ldr	r3, [pc, #532]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b82      	ldr	r3, [pc, #520]	; (80037a8 <HAL_RCC_OscConfig+0x4c8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b7f      	ldr	r3, [pc, #508]	; (80037a8 <HAL_RCC_OscConfig+0x4c8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7e      	ldr	r2, [pc, #504]	; (80037a8 <HAL_RCC_OscConfig+0x4c8>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fd fe7f 	bl	80012b8 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fd fe7b 	bl	80012b8 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b64      	cmp	r3, #100	; 0x64
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e103      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b75      	ldr	r3, [pc, #468]	; (80037a8 <HAL_RCC_OscConfig+0x4c8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x312>
 80035e4:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	4a6e      	ldr	r2, [pc, #440]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6213      	str	r3, [r2, #32]
 80035f0:	e02d      	b.n	800364e <HAL_RCC_OscConfig+0x36e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x334>
 80035fa:	4b6a      	ldr	r3, [pc, #424]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	4a69      	ldr	r2, [pc, #420]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	6213      	str	r3, [r2, #32]
 8003606:	4b67      	ldr	r3, [pc, #412]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	4a66      	ldr	r2, [pc, #408]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	6213      	str	r3, [r2, #32]
 8003612:	e01c      	b.n	800364e <HAL_RCC_OscConfig+0x36e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	2b05      	cmp	r3, #5
 800361a:	d10c      	bne.n	8003636 <HAL_RCC_OscConfig+0x356>
 800361c:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4a60      	ldr	r2, [pc, #384]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	f043 0304 	orr.w	r3, r3, #4
 8003626:	6213      	str	r3, [r2, #32]
 8003628:	4b5e      	ldr	r3, [pc, #376]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4a5d      	ldr	r2, [pc, #372]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6213      	str	r3, [r2, #32]
 8003634:	e00b      	b.n	800364e <HAL_RCC_OscConfig+0x36e>
 8003636:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	4a5a      	ldr	r2, [pc, #360]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6213      	str	r3, [r2, #32]
 8003642:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	4a57      	ldr	r2, [pc, #348]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d015      	beq.n	8003682 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003656:	f7fd fe2f 	bl	80012b8 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	e00a      	b.n	8003674 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365e:	f7fd fe2b 	bl	80012b8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	; 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0b1      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ee      	beq.n	800365e <HAL_RCC_OscConfig+0x37e>
 8003680:	e014      	b.n	80036ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003682:	f7fd fe19 	bl	80012b8 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fd fe15 	bl	80012b8 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f241 3288 	movw	r2, #5000	; 0x1388
 8003698:	4293      	cmp	r3, r2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e09b      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a0:	4b40      	ldr	r3, [pc, #256]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ee      	bne.n	800368a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b2:	4b3c      	ldr	r3, [pc, #240]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4a3b      	ldr	r2, [pc, #236]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8087 	beq.w	80037d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d061      	beq.n	8003798 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d146      	bne.n	800376a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036dc:	4b33      	ldr	r3, [pc, #204]	; (80037ac <HAL_RCC_OscConfig+0x4cc>)
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e2:	f7fd fde9 	bl	80012b8 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fd fde5 	bl	80012b8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e06d      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fc:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d108      	bne.n	8003724 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003712:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4921      	ldr	r1, [pc, #132]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003724:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a19      	ldr	r1, [r3, #32]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	430b      	orrs	r3, r1
 8003736:	491b      	ldr	r1, [pc, #108]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800373c:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <HAL_RCC_OscConfig+0x4cc>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fd fdb9 	bl	80012b8 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374a:	f7fd fdb5 	bl	80012b8 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e03d      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800375c:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x46a>
 8003768:	e035      	b.n	80037d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <HAL_RCC_OscConfig+0x4cc>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fd fda2 	bl	80012b8 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003778:	f7fd fd9e 	bl	80012b8 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e026      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x498>
 8003796:	e01e      	b.n	80037d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d107      	bne.n	80037b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e019      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40007000 	.word	0x40007000
 80037ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_OscConfig+0x500>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d001      	beq.n	80037d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000

080037e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0d0      	b.n	800399a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_ClockConfig+0x1c0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d910      	bls.n	8003828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 0207 	bic.w	r2, r3, #7
 800380e:	4965      	ldr	r1, [pc, #404]	; (80039a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b8      	b.n	800399a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003840:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a58      	ldr	r2, [pc, #352]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800384a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003858:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003862:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	494d      	ldr	r1, [pc, #308]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d040      	beq.n	8003904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d115      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07f      	b.n	800399a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e073      	b.n	800399a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e06b      	b.n	800399a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c2:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4936      	ldr	r1, [pc, #216]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d4:	f7fd fcf0 	bl	80012b8 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038dc:	f7fd fcec 	bl	80012b8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e053      	b.n	800399a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 020c 	and.w	r2, r3, #12
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	429a      	cmp	r2, r3
 8003902:	d1eb      	bne.n	80038dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d210      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 0207 	bic.w	r2, r3, #7
 800391a:	4922      	ldr	r1, [pc, #136]	; (80039a4 <HAL_RCC_ClockConfig+0x1c0>)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e032      	b.n	800399a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4916      	ldr	r1, [pc, #88]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	490e      	ldr	r1, [pc, #56]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003972:	f000 f821 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003976:	4602      	mov	r2, r0
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	490a      	ldr	r1, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x1c8>)
 8003984:	5ccb      	ldrb	r3, [r1, r3]
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1cc>)
 800398c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd fc4e 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40022000 	.word	0x40022000
 80039a8:	40021000 	.word	0x40021000
 80039ac:	080094c4 	.word	0x080094c4
 80039b0:	2000000c 	.word	0x2000000c
 80039b4:	20000010 	.word	0x20000010

080039b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x94>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d002      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x30>
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x36>
 80039e6:	e027      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ea:	613b      	str	r3, [r7, #16]
      break;
 80039ec:	e027      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	0c9b      	lsrs	r3, r3, #18
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039f8:	5cd3      	ldrb	r3, [r2, r3]
 80039fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d010      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x94>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	0c5b      	lsrs	r3, r3, #17
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a12:	5cd3      	ldrb	r3, [r2, r3]
 8003a14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a1a:	fb03 f202 	mul.w	r2, r3, r2
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	e004      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	613b      	str	r3, [r7, #16]
      break;
 8003a36:	e002      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a3a:	613b      	str	r3, [r7, #16]
      break;
 8003a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a3e:	693b      	ldr	r3, [r7, #16]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	007a1200 	.word	0x007a1200
 8003a54:	080094d4 	.word	0x080094d4
 8003a58:	080094e4 	.word	0x080094e4
 8003a5c:	003d0900 	.word	0x003d0900

08003a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <RCC_Delay+0x34>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <RCC_Delay+0x38>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0a5b      	lsrs	r3, r3, #9
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a7c:	bf00      	nop
  }
  while (Delay --);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1e5a      	subs	r2, r3, #1
 8003a82:	60fa      	str	r2, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f9      	bne.n	8003a7c <RCC_Delay+0x1c>
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	2000000c 	.word	0x2000000c
 8003a98:	10624dd3 	.word	0x10624dd3

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d07d      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003abc:	4b4f      	ldr	r3, [pc, #316]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10d      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b4c      	ldr	r3, [pc, #304]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	61d3      	str	r3, [r2, #28]
 8003ad4:	4b49      	ldr	r3, [pc, #292]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d118      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a42      	ldr	r2, [pc, #264]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afc:	f7fd fbdc 	bl	80012b8 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b02:	e008      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b04:	f7fd fbd8 	bl	80012b8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e06d      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b22:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02e      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d027      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b40:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4a:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b56:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d014      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fd fba7 	bl	80012b8 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fd fba3 	bl	80012b8 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e036      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ee      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4917      	ldr	r1, [pc, #92]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	490b      	ldr	r1, [pc, #44]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4904      	ldr	r1, [pc, #16]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42420440 	.word	0x42420440

08003c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e041      	b.n	8003c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fa08 	bl	8001044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 fc18 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d001      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e03a      	b.n	8003d36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a18      	ldr	r2, [pc, #96]	; (8003d40 <HAL_TIM_Base_Start_IT+0x98>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00e      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x58>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cea:	d009      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x58>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x58>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d111      	bne.n	8003d24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d010      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	e007      	b.n	8003d34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800

08003d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e041      	b.n	8003de2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd f98c 	bl	8001090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f000 fb76 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start+0x24>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e022      	b.n	8003e56 <HAL_TIM_PWM_Start+0x6a>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d109      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x3e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e015      	b.n	8003e56 <HAL_TIM_PWM_Start+0x6a>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start+0x58>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e008      	b.n	8003e56 <HAL_TIM_PWM_Start+0x6a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e05e      	b.n	8003f1c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x82>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e6c:	e013      	b.n	8003e96 <HAL_TIM_PWM_Start+0xaa>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0x92>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7c:	e00b      	b.n	8003e96 <HAL_TIM_PWM_Start+0xaa>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d104      	bne.n	8003e8e <HAL_TIM_PWM_Start+0xa2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8c:	e003      	b.n	8003e96 <HAL_TIM_PWM_Start+0xaa>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2202      	movs	r2, #2
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fd78 	bl	8004994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <HAL_TIM_PWM_Start+0x138>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d107      	bne.n	8003ebe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a18      	ldr	r2, [pc, #96]	; (8003f24 <HAL_TIM_PWM_Start+0x138>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0xfa>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0xfa>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <HAL_TIM_PWM_Start+0x13c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0xfa>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a12      	ldr	r2, [pc, #72]	; (8003f2c <HAL_TIM_PWM_Start+0x140>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d111      	bne.n	8003f0a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b06      	cmp	r3, #6
 8003ef6:	d010      	beq.n	8003f1a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	e007      	b.n	8003f1a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800

08003f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d020      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0202 	mvn.w	r2, #2
 8003f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa63 	bl	8004446 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fa56 	bl	8004434 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fa65 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0204 	mvn.w	r2, #4
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa3d 	bl	8004446 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa30 	bl	8004434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fa3f 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d020      	beq.n	800402c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01b      	beq.n	800402c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0208 	mvn.w	r2, #8
 8003ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2204      	movs	r2, #4
 8004002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa17 	bl	8004446 <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fa0a 	bl	8004434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fa19 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d020      	beq.n	8004078 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01b      	beq.n	8004078 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0210 	mvn.w	r2, #16
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2208      	movs	r2, #8
 800404e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9f1 	bl	8004446 <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9e4 	bl	8004434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f9f3 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0201 	mvn.w	r2, #1
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9c3 	bl	8004422 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fcf5 	bl	8004aaa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00c      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f9c3 	bl	800446a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00c      	beq.n	8004108 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0220 	mvn.w	r2, #32
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fcc8 	bl	8004a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800412a:	2302      	movs	r3, #2
 800412c:	e0ae      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b0c      	cmp	r3, #12
 800413a:	f200 809f 	bhi.w	800427c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004179 	.word	0x08004179
 8004148:	0800427d 	.word	0x0800427d
 800414c:	0800427d 	.word	0x0800427d
 8004150:	0800427d 	.word	0x0800427d
 8004154:	080041b9 	.word	0x080041b9
 8004158:	0800427d 	.word	0x0800427d
 800415c:	0800427d 	.word	0x0800427d
 8004160:	0800427d 	.word	0x0800427d
 8004164:	080041fb 	.word	0x080041fb
 8004168:	0800427d 	.word	0x0800427d
 800416c:	0800427d 	.word	0x0800427d
 8004170:	0800427d 	.word	0x0800427d
 8004174:	0800423b 	.word	0x0800423b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f9ea 	bl	8004558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0208 	orr.w	r2, r2, #8
 8004192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0204 	bic.w	r2, r2, #4
 80041a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	619a      	str	r2, [r3, #24]
      break;
 80041b6:	e064      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fa30 	bl	8004624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	619a      	str	r2, [r3, #24]
      break;
 80041f8:	e043      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fa79 	bl	80046f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0208 	orr.w	r2, r2, #8
 8004214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0204 	bic.w	r2, r2, #4
 8004224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69d9      	ldr	r1, [r3, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
      break;
 8004238:	e023      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fac3 	bl	80047cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69d9      	ldr	r1, [r3, #28]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	021a      	lsls	r2, r3, #8
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	61da      	str	r2, [r3, #28]
      break;
 800427a:	e002      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
      break;
 8004280:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIM_ConfigClockSource+0x1c>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e0b4      	b.n	800441a <HAL_TIM_ConfigClockSource+0x186>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e8:	d03e      	beq.n	8004368 <HAL_TIM_ConfigClockSource+0xd4>
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ee:	f200 8087 	bhi.w	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 80042f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f6:	f000 8086 	beq.w	8004406 <HAL_TIM_ConfigClockSource+0x172>
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fe:	d87f      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004300:	2b70      	cmp	r3, #112	; 0x70
 8004302:	d01a      	beq.n	800433a <HAL_TIM_ConfigClockSource+0xa6>
 8004304:	2b70      	cmp	r3, #112	; 0x70
 8004306:	d87b      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004308:	2b60      	cmp	r3, #96	; 0x60
 800430a:	d050      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x11a>
 800430c:	2b60      	cmp	r3, #96	; 0x60
 800430e:	d877      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004310:	2b50      	cmp	r3, #80	; 0x50
 8004312:	d03c      	beq.n	800438e <HAL_TIM_ConfigClockSource+0xfa>
 8004314:	2b50      	cmp	r3, #80	; 0x50
 8004316:	d873      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d058      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x13a>
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d86f      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b30      	cmp	r3, #48	; 0x30
 8004322:	d064      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15a>
 8004324:	2b30      	cmp	r3, #48	; 0x30
 8004326:	d86b      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004328:	2b20      	cmp	r3, #32
 800432a:	d060      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15a>
 800432c:	2b20      	cmp	r3, #32
 800432e:	d867      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d05c      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15a>
 8004334:	2b10      	cmp	r3, #16
 8004336:	d05a      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15a>
 8004338:	e062      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800434a:	f000 fb04 	bl	8004956 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800435c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	609a      	str	r2, [r3, #8]
      break;
 8004366:	e04f      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004378:	f000 faed 	bl	8004956 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800438a:	609a      	str	r2, [r3, #8]
      break;
 800438c:	e03c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	461a      	mov	r2, r3
 800439c:	f000 fa64 	bl	8004868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2150      	movs	r1, #80	; 0x50
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fabb 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 80043ac:	e02c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 fa82 	bl	80048c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2160      	movs	r1, #96	; 0x60
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 faab 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e01c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 fa44 	bl	8004868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2140      	movs	r1, #64	; 0x40
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fa9b 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e00c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f000 fa92 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 80043fe:	e003      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      break;
 8004404:	e000      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr

0800446a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a2f      	ldr	r2, [pc, #188]	; (800454c <TIM_Base_SetConfig+0xd0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00b      	beq.n	80044ac <TIM_Base_SetConfig+0x30>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d007      	beq.n	80044ac <TIM_Base_SetConfig+0x30>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a2c      	ldr	r2, [pc, #176]	; (8004550 <TIM_Base_SetConfig+0xd4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_Base_SetConfig+0x30>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a2b      	ldr	r2, [pc, #172]	; (8004554 <TIM_Base_SetConfig+0xd8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a22      	ldr	r2, [pc, #136]	; (800454c <TIM_Base_SetConfig+0xd0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0x62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0x62>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <TIM_Base_SetConfig+0xd4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0x62>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <TIM_Base_SetConfig+0xd8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a0d      	ldr	r2, [pc, #52]	; (800454c <TIM_Base_SetConfig+0xd0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d103      	bne.n	8004524 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f023 0201 	bic.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	611a      	str	r2, [r3, #16]
  }
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800

08004558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f023 0201 	bic.w	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 0302 	bic.w	r3, r3, #2
 80045a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <TIM_OC1_SetConfig+0xc8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10c      	bne.n	80045ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f023 0308 	bic.w	r3, r3, #8
 80045ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f023 0304 	bic.w	r3, r3, #4
 80045cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a13      	ldr	r2, [pc, #76]	; (8004620 <TIM_OC1_SetConfig+0xc8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d111      	bne.n	80045fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	621a      	str	r2, [r3, #32]
}
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40012c00 	.word	0x40012c00

08004624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f023 0210 	bic.w	r2, r3, #16
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0320 	bic.w	r3, r3, #32
 800466e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <TIM_OC2_SetConfig+0xd0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d10d      	bne.n	80046a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <TIM_OC2_SetConfig+0xd0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d113      	bne.n	80046d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	621a      	str	r2, [r3, #32]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr
 80046f4:	40012c00 	.word	0x40012c00

080046f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0303 	bic.w	r3, r3, #3
 800472e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <TIM_OC3_SetConfig+0xd0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10d      	bne.n	8004772 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800475c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <TIM_OC3_SetConfig+0xd0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d113      	bne.n	80047a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40012c00 	.word	0x40012c00

080047cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	031b      	lsls	r3, r3, #12
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <TIM_OC4_SetConfig+0x98>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d109      	bne.n	8004840 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr
 8004864:	40012c00 	.word	0x40012c00

08004868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f023 0201 	bic.w	r2, r3, #1
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 030a 	bic.w	r3, r3, #10
 80048a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0210 	bic.w	r2, r3, #16
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	031b      	lsls	r3, r3, #12
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004900:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	621a      	str	r2, [r3, #32]
}
 8004918:	bf00      	nop
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	f043 0307 	orr.w	r3, r3, #7
 8004944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	609a      	str	r2, [r3, #8]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr

08004956 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004956:	b480      	push	{r7}
 8004958:	b087      	sub	sp, #28
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004970:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	021a      	lsls	r2, r3, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	431a      	orrs	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4313      	orrs	r3, r2
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	609a      	str	r2, [r3, #8]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	2201      	movs	r2, #1
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1a      	ldr	r2, [r3, #32]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	401a      	ands	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	fa01 f303 	lsl.w	r3, r1, r3
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e046      	b.n	8004a82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a40:	d009      	beq.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a10      	ldr	r2, [pc, #64]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d10c      	bne.n	8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	40012c00 	.word	0x40012c00
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40000800 	.word	0x40000800

08004a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ae6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004aea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b0a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	4013      	ands	r3, r2
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr

08004b36 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr

08004b4e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	4638      	mov	r0, r7
 8004b58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b09d      	sub	sp, #116	; 0x74
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	78db      	ldrb	r3, [r3, #3]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d81f      	bhi.n	8004bfa <USB_ActivateEndpoint+0x72>
 8004bba:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <USB_ActivateEndpoint+0x38>)
 8004bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc0:	08004bd1 	.word	0x08004bd1
 8004bc4:	08004bed 	.word	0x08004bed
 8004bc8:	08004c03 	.word	0x08004c03
 8004bcc:	08004bdf 	.word	0x08004bdf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bd0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004bd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004bdc:	e012      	b.n	8004c04 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004bde:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004be2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004be6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004bea:	e00b      	b.n	8004c04 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bf4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004bf8:	e004      	b.n	8004c04 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004c00:	e000      	b.n	8004c04 <USB_ActivateEndpoint+0x7c>
      break;
 8004c02:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	441a      	add	r2, r3
 8004c0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	7b1b      	ldrb	r3, [r3, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f040 8178 	bne.w	8004f66 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8084 	beq.w	8004d88 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	4413      	add	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	011a      	lsls	r2, r3, #4
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	88db      	ldrh	r3, [r3, #6]
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	827b      	strh	r3, [r7, #18]
 8004cc2:	8a7b      	ldrh	r3, [r7, #18]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01b      	beq.n	8004d04 <USB_ActivateEndpoint+0x17c>
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	823b      	strh	r3, [r7, #16]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	8a3b      	ldrh	r3, [r7, #16]
 8004cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	78db      	ldrb	r3, [r3, #3]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d020      	beq.n	8004d4e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d22:	81bb      	strh	r3, [r7, #12]
 8004d24:	89bb      	ldrh	r3, [r7, #12]
 8004d26:	f083 0320 	eor.w	r3, r3, #32
 8004d2a:	81bb      	strh	r3, [r7, #12]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	89bb      	ldrh	r3, [r7, #12]
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]
 8004d4c:	e2d5      	b.n	80052fa <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d64:	81fb      	strh	r3, [r7, #14]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	89fb      	ldrh	r3, [r7, #14]
 8004d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
 8004d86:	e2b8      	b.n	80052fa <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	4413      	add	r3, r2
 8004d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	011a      	lsls	r2, r3, #4
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	88db      	ldrh	r3, [r3, #6]
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	4413      	add	r3, r2
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	011a      	lsls	r2, r3, #4
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	4413      	add	r3, r2
 8004dda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b3e      	cmp	r3, #62	; 0x3e
 8004df6:	d91d      	bls.n	8004e34 <USB_ActivateEndpoint+0x2ac>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <USB_ActivateEndpoint+0x28a>
 8004e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	029b      	lsls	r3, r3, #10
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	4313      	orrs	r3, r2
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	e026      	b.n	8004e82 <USB_ActivateEndpoint+0x2fa>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <USB_ActivateEndpoint+0x2ca>
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	801a      	strh	r2, [r3, #0]
 8004e50:	e017      	b.n	8004e82 <USB_ActivateEndpoint+0x2fa>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <USB_ActivateEndpoint+0x2e4>
 8004e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e68:	3301      	adds	r3, #1
 8004e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	029b      	lsls	r3, r3, #10
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01b      	beq.n	8004ed2 <USB_ActivateEndpoint+0x34a>
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb0:	843b      	strh	r3, [r7, #32]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	8c3b      	ldrh	r3, [r7, #32]
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d124      	bne.n	8004f24 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef0:	83bb      	strh	r3, [r7, #28]
 8004ef2:	8bbb      	ldrh	r3, [r7, #28]
 8004ef4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ef8:	83bb      	strh	r3, [r7, #28]
 8004efa:	8bbb      	ldrh	r3, [r7, #28]
 8004efc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f00:	83bb      	strh	r3, [r7, #28]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	8bbb      	ldrh	r3, [r7, #28]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]
 8004f22:	e1ea      	b.n	80052fa <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	83fb      	strh	r3, [r7, #30]
 8004f3c:	8bfb      	ldrh	r3, [r7, #30]
 8004f3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f42:	83fb      	strh	r3, [r7, #30]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	8bfb      	ldrh	r3, [r7, #30]
 8004f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]
 8004f64:	e1c9      	b.n	80052fa <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	78db      	ldrb	r3, [r3, #3]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d11e      	bne.n	8004fac <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f84:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	8013      	strh	r3, [r2, #0]
 8004faa:	e01d      	b.n	8004fe8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	441a      	add	r2, r3
 8004fd0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff8:	4413      	add	r3, r2
 8004ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	011a      	lsls	r2, r3, #4
 8005002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005004:	4413      	add	r3, r2
 8005006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800500a:	65bb      	str	r3, [r7, #88]	; 0x58
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	891b      	ldrh	r3, [r3, #8]
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	b29b      	uxth	r3, r3
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	657b      	str	r3, [r7, #84]	; 0x54
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005026:	b29b      	uxth	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	4413      	add	r3, r2
 800502e:	657b      	str	r3, [r7, #84]	; 0x54
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	011a      	lsls	r2, r3, #4
 8005036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005038:	4413      	add	r3, r2
 800503a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800503e:	653b      	str	r3, [r7, #80]	; 0x50
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	895b      	ldrh	r3, [r3, #10]
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	b29b      	uxth	r3, r3
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	785b      	ldrb	r3, [r3, #1]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f040 8093 	bne.w	8005180 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800506a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800506e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01b      	beq.n	80050ae <USB_ActivateEndpoint+0x526>
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80050bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01b      	beq.n	80050fe <USB_ActivateEndpoint+0x576>
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050dc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	441a      	add	r2, r3
 80050e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80050ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005114:	873b      	strh	r3, [r7, #56]	; 0x38
 8005116:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005118:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800511c:	873b      	strh	r3, [r7, #56]	; 0x38
 800511e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005120:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005124:	873b      	strh	r3, [r7, #56]	; 0x38
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005142:	b29b      	uxth	r3, r3
 8005144:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800516a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517a:	b29b      	uxth	r3, r3
 800517c:	8013      	strh	r3, [r2, #0]
 800517e:	e0bc      	b.n	80052fa <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005190:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01d      	beq.n	80051d8 <USB_ActivateEndpoint+0x650>
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80051c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80051e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01d      	beq.n	8005230 <USB_ActivateEndpoint+0x6a8>
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	441a      	add	r2, r3
 8005218:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800521c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800522c:	b29b      	uxth	r3, r3
 800522e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	78db      	ldrb	r3, [r3, #3]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d024      	beq.n	8005282 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005252:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005256:	f083 0320 	eor.w	r3, r3, #32
 800525a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	441a      	add	r2, r3
 8005268:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800526c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527c:	b29b      	uxth	r3, r3
 800527e:	8013      	strh	r3, [r2, #0]
 8005280:	e01d      	b.n	80052be <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005298:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80052aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80052e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80052fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3774      	adds	r7, #116	; 0x74
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005308:	b480      	push	{r7}
 800530a:	b08d      	sub	sp, #52	; 0x34
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	7b1b      	ldrb	r3, [r3, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f040 808e 	bne.w	8005438 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	785b      	ldrb	r3, [r3, #1]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d044      	beq.n	80053ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	81bb      	strh	r3, [r7, #12]
 8005332:	89bb      	ldrh	r3, [r7, #12]
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01b      	beq.n	8005374 <USB_DeactivateEndpoint+0x6c>
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005352:	817b      	strh	r3, [r7, #10]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	441a      	add	r2, r3
 800535e:	897b      	ldrh	r3, [r7, #10]
 8005360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005370:	b29b      	uxth	r3, r3
 8005372:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800538a:	813b      	strh	r3, [r7, #8]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	441a      	add	r2, r3
 8005396:	893b      	ldrh	r3, [r7, #8]
 8005398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	8013      	strh	r3, [r2, #0]
 80053ac:	e192      	b.n	80056d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	827b      	strh	r3, [r7, #18]
 80053bc:	8a7b      	ldrh	r3, [r7, #18]
 80053be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01b      	beq.n	80053fe <USB_DeactivateEndpoint+0xf6>
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053dc:	823b      	strh	r3, [r7, #16]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	441a      	add	r2, r3
 80053e8:	8a3b      	ldrh	r3, [r7, #16]
 80053ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005414:	81fb      	strh	r3, [r7, #14]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	89fb      	ldrh	r3, [r7, #14]
 8005422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005432:	b29b      	uxth	r3, r3
 8005434:	8013      	strh	r3, [r2, #0]
 8005436:	e14d      	b.n	80056d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 80a5 	bne.w	800558c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	843b      	strh	r3, [r7, #32]
 8005450:	8c3b      	ldrh	r3, [r7, #32]
 8005452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01b      	beq.n	8005492 <USB_DeactivateEndpoint+0x18a>
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005470:	83fb      	strh	r3, [r7, #30]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	441a      	add	r2, r3
 800547c:	8bfb      	ldrh	r3, [r7, #30]
 800547e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800548a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548e:	b29b      	uxth	r3, r3
 8005490:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	83bb      	strh	r3, [r7, #28]
 80054a0:	8bbb      	ldrh	r3, [r7, #28]
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01b      	beq.n	80054e2 <USB_DeactivateEndpoint+0x1da>
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c0:	837b      	strh	r3, [r7, #26]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	441a      	add	r2, r3
 80054cc:	8b7b      	ldrh	r3, [r7, #26]
 80054ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054de:	b29b      	uxth	r3, r3
 80054e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f8:	833b      	strh	r3, [r7, #24]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	8b3b      	ldrh	r3, [r7, #24]
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005512:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	82fb      	strh	r3, [r7, #22]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	8afb      	ldrh	r3, [r7, #22]
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005568:	82bb      	strh	r3, [r7, #20]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	441a      	add	r2, r3
 8005574:	8abb      	ldrh	r3, [r7, #20]
 8005576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005586:	b29b      	uxth	r3, r3
 8005588:	8013      	strh	r3, [r2, #0]
 800558a:	e0a3      	b.n	80056d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800559a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800559c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <USB_DeactivateEndpoint+0x2d4>
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	441a      	add	r2, r3
 80055c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80055c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d8:	b29b      	uxth	r3, r3
 80055da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80055ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01b      	beq.n	800562c <USB_DeactivateEndpoint+0x324>
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	853b      	strh	r3, [r7, #40]	; 0x28
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005624:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005628:	b29b      	uxth	r3, r3
 800562a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	441a      	add	r2, r3
 8005686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005698:	b29b      	uxth	r3, r3
 800569a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3734      	adds	r7, #52	; 0x34
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b0c2      	sub	sp, #264	; 0x108
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ee:	6018      	str	r0, [r3, #0]
 80056f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	2b01      	cmp	r3, #1
 8005708:	f040 86b7 	bne.w	800647a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800570c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	429a      	cmp	r2, r3
 8005726:	d908      	bls.n	800573a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005738:	e007      	b.n	800574a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800573a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800574a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	7b1b      	ldrb	r3, [r3, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d13a      	bne.n	80057d0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800575a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6959      	ldr	r1, [r3, #20]
 8005766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	88da      	ldrh	r2, [r3, #6]
 8005772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005776:	b29b      	uxth	r3, r3
 8005778:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800577c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005780:	6800      	ldr	r0, [r0, #0]
 8005782:	f001 fc9c 	bl	80070be <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4413      	add	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	011a      	lsls	r2, r3, #4
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4413      	add	r3, r2
 80057bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	f000 be1f 	b.w	800640e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80057d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	78db      	ldrb	r3, [r3, #3]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	f040 8462 	bne.w	80060a6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80057e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a1a      	ldr	r2, [r3, #32]
 80057ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	f240 83df 	bls.w	8005fbe <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800582a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005850:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005858:	b29b      	uxth	r3, r3
 800585a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800585c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6a1a      	ldr	r2, [r3, #32]
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800586c:	1ad2      	subs	r2, r2, r3
 800586e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800587a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 81c7 	beq.w	8005c30 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	633b      	str	r3, [r7, #48]	; 0x30
 80058ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d177      	bne.n	80059ae <USB_EPStartXfer+0x2ce>
 80058be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d8:	b29b      	uxth	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	4413      	add	r3, r2
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	011a      	lsls	r2, r3, #4
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	4413      	add	r3, r2
 80058f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005904:	b29a      	uxth	r2, r3
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	801a      	strh	r2, [r3, #0]
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590e:	2b3e      	cmp	r3, #62	; 0x3e
 8005910:	d921      	bls.n	8005956 <USB_EPStartXfer+0x276>
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	2b00      	cmp	r3, #0
 8005926:	d104      	bne.n	8005932 <USB_EPStartXfer+0x252>
 8005928:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800592c:	3b01      	subs	r3, #1
 800592e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29a      	uxth	r2, r3
 8005938:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800593c:	b29b      	uxth	r3, r3
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	b29b      	uxth	r3, r3
 8005942:	4313      	orrs	r3, r2
 8005944:	b29b      	uxth	r3, r3
 8005946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800594e:	b29a      	uxth	r2, r3
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	801a      	strh	r2, [r3, #0]
 8005954:	e050      	b.n	80059f8 <USB_EPStartXfer+0x318>
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <USB_EPStartXfer+0x294>
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29a      	uxth	r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e041      	b.n	80059f8 <USB_EPStartXfer+0x318>
 8005974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <USB_EPStartXfer+0x2b4>
 800598a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800598e:	3301      	adds	r3, #1
 8005990:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29a      	uxth	r2, r3
 800599a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800599e:	b29b      	uxth	r3, r3
 80059a0:	029b      	lsls	r3, r3, #10
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	4313      	orrs	r3, r2
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	e024      	b.n	80059f8 <USB_EPStartXfer+0x318>
 80059ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d11c      	bne.n	80059f8 <USB_EPStartXfer+0x318>
 80059be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	4413      	add	r3, r2
 80059d4:	633b      	str	r3, [r7, #48]	; 0x30
 80059d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	011a      	lsls	r2, r3, #4
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	4413      	add	r3, r2
 80059e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	895b      	ldrh	r3, [r3, #10]
 8005a04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6959      	ldr	r1, [r3, #20]
 8005a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a26:	6800      	ldr	r0, [r0, #0]
 8005a28:	f001 fb49 	bl	80070be <USB_WritePMA>
            ep->xfer_buff += len;
 8005a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695a      	ldr	r2, [r3, #20]
 8005a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3c:	441a      	add	r2, r3
 8005a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6a1a      	ldr	r2, [r3, #32]
 8005a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d90f      	bls.n	8005a86 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a76:	1ad2      	subs	r2, r2, r3
 8005a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	621a      	str	r2, [r3, #32]
 8005a84:	e00e      	b.n	8005aa4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d177      	bne.n	8005ba4 <USB_EPStartXfer+0x4c4>
 8005ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
 8005ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	011a      	lsls	r2, r3, #4
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b04:	2b3e      	cmp	r3, #62	; 0x3e
 8005b06:	d921      	bls.n	8005b4c <USB_EPStartXfer+0x46c>
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <USB_EPStartXfer+0x448>
 8005b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b22:	3b01      	subs	r3, #1
 8005b24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	029b      	lsls	r3, r3, #10
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e056      	b.n	8005bfa <USB_EPStartXfer+0x51a>
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <USB_EPStartXfer+0x48a>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	e047      	b.n	8005bfa <USB_EPStartXfer+0x51a>
 8005b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <USB_EPStartXfer+0x4aa>
 8005b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b84:	3301      	adds	r3, #1
 8005b86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	029b      	lsls	r3, r3, #10
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	801a      	strh	r2, [r3, #0]
 8005ba2:	e02a      	b.n	8005bfa <USB_EPStartXfer+0x51a>
 8005ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d122      	bne.n	8005bfa <USB_EPStartXfer+0x51a>
 8005bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	623b      	str	r3, [r7, #32]
 8005bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	623b      	str	r3, [r7, #32]
 8005bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	011a      	lsls	r2, r3, #4
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	4413      	add	r3, r2
 8005bea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	891b      	ldrh	r3, [r3, #8]
 8005c06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6959      	ldr	r1, [r3, #20]
 8005c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c28:	6800      	ldr	r0, [r0, #0]
 8005c2a:	f001 fa48 	bl	80070be <USB_WritePMA>
 8005c2e:	e3ee      	b.n	800640e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d177      	bne.n	8005d30 <USB_EPStartXfer+0x650>
 8005c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c60:	4413      	add	r3, r2
 8005c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	011a      	lsls	r2, r3, #4
 8005c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c74:	4413      	add	r3, r2
 8005c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c90:	2b3e      	cmp	r3, #62	; 0x3e
 8005c92:	d921      	bls.n	8005cd8 <USB_EPStartXfer+0x5f8>
 8005c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d104      	bne.n	8005cb4 <USB_EPStartXfer+0x5d4>
 8005caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	029b      	lsls	r3, r3, #10
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	e056      	b.n	8005d86 <USB_EPStartXfer+0x6a6>
 8005cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <USB_EPStartXfer+0x616>
 8005ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	e047      	b.n	8005d86 <USB_EPStartXfer+0x6a6>
 8005cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <USB_EPStartXfer+0x636>
 8005d0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d10:	3301      	adds	r3, #1
 8005d12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	029b      	lsls	r3, r3, #10
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	4313      	orrs	r3, r2
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e02a      	b.n	8005d86 <USB_EPStartXfer+0x6a6>
 8005d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d122      	bne.n	8005d86 <USB_EPStartXfer+0x6a6>
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d60:	4413      	add	r3, r2
 8005d62:	653b      	str	r3, [r7, #80]	; 0x50
 8005d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	011a      	lsls	r2, r3, #4
 8005d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d74:	4413      	add	r3, r2
 8005d76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	891b      	ldrh	r3, [r3, #8]
 8005d92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6959      	ldr	r1, [r3, #20]
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005dac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005db0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005db4:	6800      	ldr	r0, [r0, #0]
 8005db6:	f001 f982 	bl	80070be <USB_WritePMA>
            ep->xfer_buff += len;
 8005dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695a      	ldr	r2, [r3, #20]
 8005dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dca:	441a      	add	r2, r3
 8005dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d90f      	bls.n	8005e14 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e04:	1ad2      	subs	r2, r2, r3
 8005e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	621a      	str	r2, [r3, #32]
 8005e12:	e00e      	b.n	8005e32 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d177      	bne.n	8005f3e <USB_EPStartXfer+0x85e>
 8005e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	4413      	add	r3, r2
 8005e70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	011a      	lsls	r2, r3, #4
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	4413      	add	r3, r2
 8005e84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	801a      	strh	r2, [r3, #0]
 8005e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005ea0:	d921      	bls.n	8005ee6 <USB_EPStartXfer+0x806>
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb0:	f003 031f 	and.w	r3, r3, #31
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <USB_EPStartXfer+0x7e2>
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	029b      	lsls	r3, r3, #10
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e050      	b.n	8005f88 <USB_EPStartXfer+0x8a8>
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <USB_EPStartXfer+0x824>
 8005eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	e041      	b.n	8005f88 <USB_EPStartXfer+0x8a8>
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d004      	beq.n	8005f24 <USB_EPStartXfer+0x844>
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	3301      	adds	r3, #1
 8005f20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	029b      	lsls	r3, r3, #10
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	4313      	orrs	r3, r2
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	801a      	strh	r2, [r3, #0]
 8005f3c:	e024      	b.n	8005f88 <USB_EPStartXfer+0x8a8>
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d11c      	bne.n	8005f88 <USB_EPStartXfer+0x8a8>
 8005f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f62:	4413      	add	r3, r2
 8005f64:	643b      	str	r3, [r7, #64]	; 0x40
 8005f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	011a      	lsls	r2, r3, #4
 8005f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f76:	4413      	add	r3, r2
 8005f78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	895b      	ldrh	r3, [r3, #10]
 8005f94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6959      	ldr	r1, [r3, #20]
 8005fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005fae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005fb2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005fb6:	6800      	ldr	r0, [r0, #0]
 8005fb8:	f001 f881 	bl	80070be <USB_WritePMA>
 8005fbc:	e227      	b.n	800640e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006026:	b29b      	uxth	r3, r3
 8006028:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800602a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006044:	b29b      	uxth	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800604a:	4413      	add	r3, r2
 800604c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800604e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	011a      	lsls	r2, r3, #4
 800605c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605e:	4413      	add	r3, r2
 8006060:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006064:	65bb      	str	r3, [r7, #88]	; 0x58
 8006066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606a:	b29a      	uxth	r2, r3
 800606c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800606e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	891b      	ldrh	r3, [r3, #8]
 800607c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6959      	ldr	r1, [r3, #20]
 800608c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006090:	b29b      	uxth	r3, r3
 8006092:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006096:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800609a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800609e:	6800      	ldr	r0, [r0, #0]
 80060a0:	f001 f80d 	bl	80070be <USB_WritePMA>
 80060a4:	e1b3      	b.n	800640e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80060a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6a1a      	ldr	r2, [r3, #32]
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80c6 	beq.w	8006278 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	673b      	str	r3, [r7, #112]	; 0x70
 80060f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d177      	bne.n	80061f8 <USB_EPStartXfer+0xb18>
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	66bb      	str	r3, [r7, #104]	; 0x68
 8006114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006118:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006122:	b29b      	uxth	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006128:	4413      	add	r3, r2
 800612a:	66bb      	str	r3, [r7, #104]	; 0x68
 800612c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	011a      	lsls	r2, r3, #4
 800613a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800613c:	4413      	add	r3, r2
 800613e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006142:	667b      	str	r3, [r7, #100]	; 0x64
 8006144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800614e:	b29a      	uxth	r2, r3
 8006150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006158:	2b3e      	cmp	r3, #62	; 0x3e
 800615a:	d921      	bls.n	80061a0 <USB_EPStartXfer+0xac0>
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <USB_EPStartXfer+0xa9c>
 8006172:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006176:	3b01      	subs	r3, #1
 8006178:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800617c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29a      	uxth	r2, r3
 8006182:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006186:	b29b      	uxth	r3, r3
 8006188:	029b      	lsls	r3, r3, #10
 800618a:	b29b      	uxth	r3, r3
 800618c:	4313      	orrs	r3, r2
 800618e:	b29b      	uxth	r3, r3
 8006190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006198:	b29a      	uxth	r2, r3
 800619a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e050      	b.n	8006242 <USB_EPStartXfer+0xb62>
 80061a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <USB_EPStartXfer+0xade>
 80061a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	e041      	b.n	8006242 <USB_EPStartXfer+0xb62>
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <USB_EPStartXfer+0xafe>
 80061d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80061d8:	3301      	adds	r3, #1
 80061da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80061de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	029b      	lsls	r3, r3, #10
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	4313      	orrs	r3, r2
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	e024      	b.n	8006242 <USB_EPStartXfer+0xb62>
 80061f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d11c      	bne.n	8006242 <USB_EPStartXfer+0xb62>
 8006208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800621c:	4413      	add	r3, r2
 800621e:	673b      	str	r3, [r7, #112]	; 0x70
 8006220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	011a      	lsls	r2, r3, #4
 800622e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006230:	4413      	add	r3, r2
 8006232:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006236:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623c:	b29a      	uxth	r2, r3
 800623e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006240:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	895b      	ldrh	r3, [r3, #10]
 800624e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6959      	ldr	r1, [r3, #20]
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006262:	b29b      	uxth	r3, r3
 8006264:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006268:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800626c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006270:	6800      	ldr	r0, [r0, #0]
 8006272:	f000 ff24 	bl	80070be <USB_WritePMA>
 8006276:	e0ca      	b.n	800640e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d177      	bne.n	8006378 <USB_EPStartXfer+0xc98>
 8006288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062a8:	4413      	add	r3, r2
 80062aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	011a      	lsls	r2, r3, #4
 80062ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062bc:	4413      	add	r3, r2
 80062be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80062c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d8:	2b3e      	cmp	r3, #62	; 0x3e
 80062da:	d921      	bls.n	8006320 <USB_EPStartXfer+0xc40>
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d104      	bne.n	80062fc <USB_EPStartXfer+0xc1c>
 80062f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062f6:	3b01      	subs	r3, #1
 80062f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29a      	uxth	r2, r3
 8006302:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006306:	b29b      	uxth	r3, r3
 8006308:	029b      	lsls	r3, r3, #10
 800630a:	b29b      	uxth	r3, r3
 800630c:	4313      	orrs	r3, r2
 800630e:	b29b      	uxth	r3, r3
 8006310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006318:	b29a      	uxth	r2, r3
 800631a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e05c      	b.n	80063da <USB_EPStartXfer+0xcfa>
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <USB_EPStartXfer+0xc5e>
 8006328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006336:	b29a      	uxth	r2, r3
 8006338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800633a:	801a      	strh	r2, [r3, #0]
 800633c:	e04d      	b.n	80063da <USB_EPStartXfer+0xcfa>
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006342:	085b      	lsrs	r3, r3, #1
 8006344:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <USB_EPStartXfer+0xc7e>
 8006354:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006358:	3301      	adds	r3, #1
 800635a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800635e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29a      	uxth	r2, r3
 8006364:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006368:	b29b      	uxth	r3, r3
 800636a:	029b      	lsls	r3, r3, #10
 800636c:	b29b      	uxth	r3, r3
 800636e:	4313      	orrs	r3, r2
 8006370:	b29a      	uxth	r2, r3
 8006372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e030      	b.n	80063da <USB_EPStartXfer+0xcfa>
 8006378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d128      	bne.n	80063da <USB_EPStartXfer+0xcfa>
 8006388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	461a      	mov	r2, r3
 80063a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ac:	4413      	add	r3, r2
 80063ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	011a      	lsls	r2, r3, #4
 80063c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	891b      	ldrh	r3, [r3, #8]
 80063e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6959      	ldr	r1, [r3, #20]
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006400:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006404:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006408:	6800      	ldr	r0, [r0, #0]
 800640a:	f000 fe58 	bl	80070be <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800640e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006434:	817b      	strh	r3, [r7, #10]
 8006436:	897b      	ldrh	r3, [r7, #10]
 8006438:	f083 0310 	eor.w	r3, r3, #16
 800643c:	817b      	strh	r3, [r7, #10]
 800643e:	897b      	ldrh	r3, [r7, #10]
 8006440:	f083 0320 	eor.w	r3, r3, #32
 8006444:	817b      	strh	r3, [r7, #10]
 8006446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	441a      	add	r2, r3
 8006460:	897b      	ldrh	r3, [r7, #10]
 8006462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006472:	b29b      	uxth	r3, r3
 8006474:	8013      	strh	r3, [r2, #0]
 8006476:	f000 bcde 	b.w	8006e36 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800647a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	7b1b      	ldrb	r3, [r3, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 80bb 	bne.w	8006602 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d917      	bls.n	80064d8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80064a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80064b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c8:	1ad2      	subs	r2, r2, r3
 80064ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	619a      	str	r2, [r3, #24]
 80064d6:	e00e      	b.n	80064f6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80064d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80064e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2200      	movs	r2, #0
 80064f4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006512:	b29b      	uxth	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800651a:	4413      	add	r3, r2
 800651c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	011a      	lsls	r2, r3, #4
 800652e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006532:	4413      	add	r3, r2
 8006534:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006538:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800653c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006548:	b29a      	uxth	r2, r3
 800654a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006554:	2b3e      	cmp	r3, #62	; 0x3e
 8006556:	d924      	bls.n	80065a2 <USB_EPStartXfer+0xec2>
 8006558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006566:	f003 031f 	and.w	r3, r3, #31
 800656a:	2b00      	cmp	r3, #0
 800656c:	d104      	bne.n	8006578 <USB_EPStartXfer+0xe98>
 800656e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006572:	3b01      	subs	r3, #1
 8006574:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29a      	uxth	r2, r3
 8006580:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006584:	b29b      	uxth	r3, r3
 8006586:	029b      	lsls	r3, r3, #10
 8006588:	b29b      	uxth	r3, r3
 800658a:	4313      	orrs	r3, r2
 800658c:	b29b      	uxth	r3, r3
 800658e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006596:	b29a      	uxth	r2, r3
 8006598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	f000 bc10 	b.w	8006dc2 <USB_EPStartXfer+0x16e2>
 80065a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10c      	bne.n	80065c4 <USB_EPStartXfer+0xee4>
 80065aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065c0:	801a      	strh	r2, [r3, #0]
 80065c2:	e3fe      	b.n	8006dc2 <USB_EPStartXfer+0x16e2>
 80065c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <USB_EPStartXfer+0xf04>
 80065da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065de:	3301      	adds	r3, #1
 80065e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	029b      	lsls	r3, r3, #10
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	4313      	orrs	r3, r2
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	e3df      	b.n	8006dc2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	78db      	ldrb	r3, [r3, #3]
 800660e:	2b02      	cmp	r3, #2
 8006610:	f040 8218 	bne.w	8006a44 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 809d 	bne.w	8006760 <USB_EPStartXfer+0x1080>
 8006626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006642:	b29b      	uxth	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800664a:	4413      	add	r3, r2
 800664c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	011a      	lsls	r2, r3, #4
 800665e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006662:	4413      	add	r3, r2
 8006664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800666c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006678:	b29a      	uxth	r2, r3
 800667a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b3e      	cmp	r3, #62	; 0x3e
 800668e:	d92b      	bls.n	80066e8 <USB_EPStartXfer+0x1008>
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 031f 	and.w	r3, r3, #31
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d104      	bne.n	80066c0 <USB_EPStartXfer+0xfe0>
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ba:	3b01      	subs	r3, #1
 80066bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	029b      	lsls	r3, r3, #10
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	4313      	orrs	r3, r2
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066de:	b29a      	uxth	r2, r3
 80066e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066e4:	801a      	strh	r2, [r3, #0]
 80066e6:	e070      	b.n	80067ca <USB_EPStartXfer+0x10ea>
 80066e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10c      	bne.n	8006712 <USB_EPStartXfer+0x1032>
 80066f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006708:	b29a      	uxth	r2, r3
 800670a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	e05b      	b.n	80067ca <USB_EPStartXfer+0x10ea>
 8006712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <USB_EPStartXfer+0x1062>
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673c:	3301      	adds	r3, #1
 800673e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29a      	uxth	r2, r3
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	b29b      	uxth	r3, r3
 8006750:	029b      	lsls	r3, r3, #10
 8006752:	b29b      	uxth	r3, r3
 8006754:	4313      	orrs	r3, r2
 8006756:	b29a      	uxth	r2, r3
 8006758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	e034      	b.n	80067ca <USB_EPStartXfer+0x10ea>
 8006760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d12c      	bne.n	80067ca <USB_EPStartXfer+0x10ea>
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678c:	b29b      	uxth	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006794:	4413      	add	r3, r2
 8006796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800679a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	011a      	lsls	r2, r3, #4
 80067a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80067d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 809d 	bne.w	8006924 <USB_EPStartXfer+0x1244>
 80067ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006806:	b29b      	uxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800680e:	4413      	add	r3, r2
 8006810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	011a      	lsls	r2, r3, #4
 8006822:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006826:	4413      	add	r3, r2
 8006828:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800682c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800683c:	b29a      	uxth	r2, r3
 800683e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006842:	801a      	strh	r2, [r3, #0]
 8006844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b3e      	cmp	r3, #62	; 0x3e
 8006852:	d92b      	bls.n	80068ac <USB_EPStartXfer+0x11cc>
 8006854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 031f 	and.w	r3, r3, #31
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <USB_EPStartXfer+0x11a4>
 800687a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687e:	3b01      	subs	r3, #1
 8006880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29a      	uxth	r2, r3
 800688c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006890:	b29b      	uxth	r3, r3
 8006892:	029b      	lsls	r3, r3, #10
 8006894:	b29b      	uxth	r3, r3
 8006896:	4313      	orrs	r3, r2
 8006898:	b29b      	uxth	r3, r3
 800689a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800689e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	e069      	b.n	8006980 <USB_EPStartXfer+0x12a0>
 80068ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10c      	bne.n	80068d6 <USB_EPStartXfer+0x11f6>
 80068bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e054      	b.n	8006980 <USB_EPStartXfer+0x12a0>
 80068d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <USB_EPStartXfer+0x1226>
 80068fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006900:	3301      	adds	r3, #1
 8006902:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29a      	uxth	r2, r3
 800690e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006912:	b29b      	uxth	r3, r3
 8006914:	029b      	lsls	r3, r3, #10
 8006916:	b29b      	uxth	r3, r3
 8006918:	4313      	orrs	r3, r2
 800691a:	b29a      	uxth	r2, r3
 800691c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e02d      	b.n	8006980 <USB_EPStartXfer+0x12a0>
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	785b      	ldrb	r3, [r3, #1]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d125      	bne.n	8006980 <USB_EPStartXfer+0x12a0>
 8006934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006942:	b29b      	uxth	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800694a:	4413      	add	r3, r2
 800694c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	011a      	lsls	r2, r3, #4
 800695e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006962:	4413      	add	r3, r2
 8006964:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800696c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	b29a      	uxth	r2, r3
 800697a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800697e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8218 	beq.w	8006dc2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <USB_EPStartXfer+0x12ea>
 80069be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10d      	bne.n	80069e6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 81f5 	bne.w	8006dc2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 81ee 	bne.w	8006dc2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80069e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	441a      	add	r2, r3
 8006a2a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	8013      	strh	r3, [r2, #0]
 8006a42:	e1be      	b.n	8006dc2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	78db      	ldrb	r3, [r3, #3]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	f040 81b4 	bne.w	8006dbe <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d917      	bls.n	8006aa2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a92:	1ad2      	subs	r2, r2, r3
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	619a      	str	r2, [r3, #24]
 8006aa0:	e00e      	b.n	8006ac0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2200      	movs	r2, #0
 8006abe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	785b      	ldrb	r3, [r3, #1]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 8085 	bne.w	8006bdc <USB_EPStartXfer+0x14fc>
 8006ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006af6:	4413      	add	r3, r2
 8006af8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	011a      	lsls	r2, r3, #4
 8006b0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b0e:	4413      	add	r3, r2
 8006b10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b30:	2b3e      	cmp	r3, #62	; 0x3e
 8006b32:	d923      	bls.n	8006b7c <USB_EPStartXfer+0x149c>
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b42:	f003 031f 	and.w	r3, r3, #31
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <USB_EPStartXfer+0x1474>
 8006b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	029b      	lsls	r3, r3, #10
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b78:	801a      	strh	r2, [r3, #0]
 8006b7a:	e060      	b.n	8006c3e <USB_EPStartXfer+0x155e>
 8006b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10c      	bne.n	8006b9e <USB_EPStartXfer+0x14be>
 8006b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	e04f      	b.n	8006c3e <USB_EPStartXfer+0x155e>
 8006b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <USB_EPStartXfer+0x14de>
 8006bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb8:	3301      	adds	r3, #1
 8006bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	029b      	lsls	r3, r3, #10
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	e030      	b.n	8006c3e <USB_EPStartXfer+0x155e>
 8006bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d128      	bne.n	8006c3e <USB_EPStartXfer+0x155e>
 8006bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c10:	4413      	add	r3, r2
 8006c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	011a      	lsls	r2, r3, #4
 8006c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c3c:	801a      	strh	r2, [r3, #0]
 8006c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f040 8085 	bne.w	8006d68 <USB_EPStartXfer+0x1688>
 8006c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c82:	4413      	add	r3, r2
 8006c84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	011a      	lsls	r2, r3, #4
 8006c96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ca4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbc:	2b3e      	cmp	r3, #62	; 0x3e
 8006cbe:	d923      	bls.n	8006d08 <USB_EPStartXfer+0x1628>
 8006cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <USB_EPStartXfer+0x1600>
 8006cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ce0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	029b      	lsls	r3, r3, #10
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d04:	801a      	strh	r2, [r3, #0]
 8006d06:	e05c      	b.n	8006dc2 <USB_EPStartXfer+0x16e2>
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10c      	bne.n	8006d2a <USB_EPStartXfer+0x164a>
 8006d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d26:	801a      	strh	r2, [r3, #0]
 8006d28:	e04b      	b.n	8006dc2 <USB_EPStartXfer+0x16e2>
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <USB_EPStartXfer+0x166a>
 8006d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d44:	3301      	adds	r3, #1
 8006d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	029b      	lsls	r3, r3, #10
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	e02c      	b.n	8006dc2 <USB_EPStartXfer+0x16e2>
 8006d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d124      	bne.n	8006dc2 <USB_EPStartXfer+0x16e2>
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d8e:	4413      	add	r3, r2
 8006d90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	011a      	lsls	r2, r3, #4
 8006da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006da6:	4413      	add	r3, r2
 8006da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	e001      	b.n	8006dc2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e03a      	b.n	8006e38 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006dec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006df0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006df4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006df8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006dfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	441a      	add	r2, r3
 8006e1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d020      	beq.n	8006e96 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6a:	81bb      	strh	r3, [r7, #12]
 8006e6c:	89bb      	ldrh	r3, [r7, #12]
 8006e6e:	f083 0310 	eor.w	r3, r3, #16
 8006e72:	81bb      	strh	r3, [r7, #12]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	441a      	add	r2, r3
 8006e7e:	89bb      	ldrh	r3, [r7, #12]
 8006e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	8013      	strh	r3, [r2, #0]
 8006e94:	e01f      	b.n	8006ed6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eac:	81fb      	strh	r3, [r7, #14]
 8006eae:	89fb      	ldrh	r3, [r7, #14]
 8006eb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006eb4:	81fb      	strh	r3, [r7, #14]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	441a      	add	r2, r3
 8006ec0:	89fb      	ldrh	r3, [r7, #14]
 8006ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b087      	sub	sp, #28
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	7b1b      	ldrb	r3, [r3, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f040 809d 	bne.w	8007030 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d04c      	beq.n	8006f98 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	823b      	strh	r3, [r7, #16]
 8006f0c:	8a3b      	ldrh	r3, [r7, #16]
 8006f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01b      	beq.n	8006f4e <USB_EPClearStall+0x6c>
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2c:	81fb      	strh	r3, [r7, #14]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	441a      	add	r2, r3
 8006f38:	89fb      	ldrh	r3, [r7, #14]
 8006f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	78db      	ldrb	r3, [r3, #3]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d06c      	beq.n	8007030 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6c:	81bb      	strh	r3, [r7, #12]
 8006f6e:	89bb      	ldrh	r3, [r7, #12]
 8006f70:	f083 0320 	eor.w	r3, r3, #32
 8006f74:	81bb      	strh	r3, [r7, #12]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	441a      	add	r2, r3
 8006f80:	89bb      	ldrh	r3, [r7, #12]
 8006f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	8013      	strh	r3, [r2, #0]
 8006f96:	e04b      	b.n	8007030 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	82fb      	strh	r3, [r7, #22]
 8006fa6:	8afb      	ldrh	r3, [r7, #22]
 8006fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01b      	beq.n	8006fe8 <USB_EPClearStall+0x106>
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	82bb      	strh	r3, [r7, #20]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	8abb      	ldrh	r3, [r7, #20]
 8006fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	827b      	strh	r3, [r7, #18]
 8007000:	8a7b      	ldrh	r3, [r7, #18]
 8007002:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007006:	827b      	strh	r3, [r7, #18]
 8007008:	8a7b      	ldrh	r3, [r7, #18]
 800700a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800700e:	827b      	strh	r3, [r7, #18]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	441a      	add	r2, r3
 800701a:	8a7b      	ldrh	r3, [r7, #18]
 800701c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702c:	b29b      	uxth	r3, r3
 800702e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	bc80      	pop	{r7}
 800703a:	4770      	bx	lr

0800703c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2280      	movs	r2, #128	; 0x80
 8007052:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr

08007062 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr

08007076 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr

0800708a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007098:	b29b      	uxth	r3, r3
 800709a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800709c:	68fb      	ldr	r3, [r7, #12]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr

080070a8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr

080070be <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070be:	b480      	push	{r7}
 80070c0:	b08b      	sub	sp, #44	; 0x2c
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	4611      	mov	r1, r2
 80070ca:	461a      	mov	r2, r3
 80070cc:	460b      	mov	r3, r1
 80070ce:	80fb      	strh	r3, [r7, #6]
 80070d0:	4613      	mov	r3, r2
 80070d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070d4:	88bb      	ldrh	r3, [r7, #4]
 80070d6:	3301      	adds	r3, #1
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070e4:	88fb      	ldrh	r3, [r7, #6]
 80070e6:	005a      	lsls	r2, r3, #1
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070f0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
 80070f6:	e01e      	b.n	8007136 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	3301      	adds	r3, #1
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	021b      	lsls	r3, r3, #8
 8007106:	b21a      	sxth	r2, r3
 8007108:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800710c:	4313      	orrs	r3, r2
 800710e:	b21b      	sxth	r3, r3
 8007110:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	8a7a      	ldrh	r2, [r7, #18]
 8007116:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	3302      	adds	r3, #2
 800711c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	3302      	adds	r3, #2
 8007122:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	3301      	adds	r3, #1
 8007128:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	3301      	adds	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	3b01      	subs	r3, #1
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1dd      	bne.n	80070f8 <USB_WritePMA+0x3a>
  }
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	372c      	adds	r7, #44	; 0x2c
 8007142:	46bd      	mov	sp, r7
 8007144:	bc80      	pop	{r7}
 8007146:	4770      	bx	lr

08007148 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007148:	b480      	push	{r7}
 800714a:	b08b      	sub	sp, #44	; 0x2c
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4611      	mov	r1, r2
 8007154:	461a      	mov	r2, r3
 8007156:	460b      	mov	r3, r1
 8007158:	80fb      	strh	r3, [r7, #6]
 800715a:	4613      	mov	r3, r2
 800715c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800715e:	88bb      	ldrh	r3, [r7, #4]
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	b29b      	uxth	r3, r3
 8007164:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800716e:	88fb      	ldrh	r3, [r7, #6]
 8007170:	005a      	lsls	r2, r3, #1
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800717a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
 8007180:	e01b      	b.n	80071ba <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	3302      	adds	r3, #2
 800718e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	3301      	adds	r3, #1
 800719c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	3301      	adds	r3, #1
 80071ac:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	3302      	adds	r3, #2
 80071b2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	3b01      	subs	r3, #1
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e0      	bne.n	8007182 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80071c0:	88bb      	ldrh	r3, [r7, #4]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	701a      	strb	r2, [r3, #0]
  }
}
 80071dc:	bf00      	nop
 80071de:	372c      	adds	r7, #44	; 0x2c
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr

080071e6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7c1b      	ldrb	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d115      	bne.n	800722a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007202:	2202      	movs	r2, #2
 8007204:	2181      	movs	r1, #129	; 0x81
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fe8d 	bl	8008f26 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007216:	2202      	movs	r2, #2
 8007218:	2101      	movs	r1, #1
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fe83 	bl	8008f26 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007228:	e012      	b.n	8007250 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800722a:	2340      	movs	r3, #64	; 0x40
 800722c:	2202      	movs	r2, #2
 800722e:	2181      	movs	r1, #129	; 0x81
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 fe78 	bl	8008f26 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800723c:	2340      	movs	r3, #64	; 0x40
 800723e:	2202      	movs	r2, #2
 8007240:	2101      	movs	r1, #1
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 fe6f 	bl	8008f26 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007250:	2308      	movs	r3, #8
 8007252:	2203      	movs	r2, #3
 8007254:	2182      	movs	r1, #130	; 0x82
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 fe65 	bl	8008f26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007262:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007266:	f001 ff85 	bl	8009174 <USBD_static_malloc>
 800726a:	4602      	mov	r2, r0
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800727c:	2301      	movs	r3, #1
 800727e:	73fb      	strb	r3, [r7, #15]
 8007280:	e026      	b.n	80072d0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007288:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	7c1b      	ldrb	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d109      	bne.n	80072c0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072b6:	2101      	movs	r1, #1
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 ff24 	bl	8009106 <USBD_LL_PrepareReceive>
 80072be:	e007      	b.n	80072d0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072c6:	2340      	movs	r3, #64	; 0x40
 80072c8:	2101      	movs	r1, #1
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 ff1b 	bl	8009106 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80072ea:	2181      	movs	r1, #129	; 0x81
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 fe40 	bl	8008f72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80072f8:	2101      	movs	r1, #1
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fe39 	bl	8008f72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007308:	2182      	movs	r1, #130	; 0x82
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 fe31 	bl	8008f72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00e      	beq.n	800733e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007330:	4618      	mov	r0, r3
 8007332:	f001 ff2b 	bl	800918c <USBD_static_free>
    pdev->pClassData = NULL;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800733e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007358:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800736e:	2b00      	cmp	r3, #0
 8007370:	d039      	beq.n	80073e6 <USBD_CDC_Setup+0x9e>
 8007372:	2b20      	cmp	r3, #32
 8007374:	d17f      	bne.n	8007476 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	88db      	ldrh	r3, [r3, #6]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d029      	beq.n	80073d2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	b25b      	sxtb	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	da11      	bge.n	80073ac <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007394:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	88d2      	ldrh	r2, [r2, #6]
 800739a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800739c:	6939      	ldr	r1, [r7, #16]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	88db      	ldrh	r3, [r3, #6]
 80073a2:	461a      	mov	r2, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 fa0a 	bl	80087be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80073aa:	e06b      	b.n	8007484 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	785a      	ldrb	r2, [r3, #1]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	88db      	ldrh	r3, [r3, #6]
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80073c2:	6939      	ldr	r1, [r7, #16]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	88db      	ldrh	r3, [r3, #6]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fa25 	bl	800881a <USBD_CtlPrepareRx>
      break;
 80073d0:	e058      	b.n	8007484 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	7850      	ldrb	r0, [r2, #1]
 80073de:	2200      	movs	r2, #0
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	4798      	blx	r3
      break;
 80073e4:	e04e      	b.n	8007484 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	785b      	ldrb	r3, [r3, #1]
 80073ea:	2b0b      	cmp	r3, #11
 80073ec:	d02e      	beq.n	800744c <USBD_CDC_Setup+0x104>
 80073ee:	2b0b      	cmp	r3, #11
 80073f0:	dc38      	bgt.n	8007464 <USBD_CDC_Setup+0x11c>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <USBD_CDC_Setup+0xb4>
 80073f6:	2b0a      	cmp	r3, #10
 80073f8:	d014      	beq.n	8007424 <USBD_CDC_Setup+0xdc>
 80073fa:	e033      	b.n	8007464 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007402:	2b03      	cmp	r3, #3
 8007404:	d107      	bne.n	8007416 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007406:	f107 030c 	add.w	r3, r7, #12
 800740a:	2202      	movs	r2, #2
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 f9d5 	bl	80087be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007414:	e02e      	b.n	8007474 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f966 	bl	80086ea <USBD_CtlError>
            ret = USBD_FAIL;
 800741e:	2302      	movs	r3, #2
 8007420:	75fb      	strb	r3, [r7, #23]
          break;
 8007422:	e027      	b.n	8007474 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742a:	2b03      	cmp	r3, #3
 800742c:	d107      	bne.n	800743e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800742e:	f107 030f 	add.w	r3, r7, #15
 8007432:	2201      	movs	r2, #1
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 f9c1 	bl	80087be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800743c:	e01a      	b.n	8007474 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 f952 	bl	80086ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007446:	2302      	movs	r3, #2
 8007448:	75fb      	strb	r3, [r7, #23]
          break;
 800744a:	e013      	b.n	8007474 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007452:	2b03      	cmp	r3, #3
 8007454:	d00d      	beq.n	8007472 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f001 f946 	bl	80086ea <USBD_CtlError>
            ret = USBD_FAIL;
 800745e:	2302      	movs	r3, #2
 8007460:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007462:	e006      	b.n	8007472 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 f93f 	bl	80086ea <USBD_CtlError>
          ret = USBD_FAIL;
 800746c:	2302      	movs	r3, #2
 800746e:	75fb      	strb	r3, [r7, #23]
          break;
 8007470:	e000      	b.n	8007474 <USBD_CDC_Setup+0x12c>
          break;
 8007472:	bf00      	nop
      }
      break;
 8007474:	e006      	b.n	8007484 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 f936 	bl	80086ea <USBD_CtlError>
      ret = USBD_FAIL;
 800747e:	2302      	movs	r3, #2
 8007480:	75fb      	strb	r3, [r7, #23]
      break;
 8007482:	bf00      	nop
  }

  return ret;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074a8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d03a      	beq.n	800752a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	4613      	mov	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	331c      	adds	r3, #28
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d029      	beq.n	800751e <USBD_CDC_DataIn+0x90>
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	331c      	adds	r3, #28
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	78f9      	ldrb	r1, [r7, #3]
 80074de:	68b8      	ldr	r0, [r7, #8]
 80074e0:	460b      	mov	r3, r1
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	4403      	add	r3, r0
 80074ea:	3320      	adds	r3, #32
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	fbb2 f1f3 	udiv	r1, r2, r3
 80074f2:	fb01 f303 	mul.w	r3, r1, r3
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d110      	bne.n	800751e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80074fc:	78fa      	ldrb	r2, [r7, #3]
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	331c      	adds	r3, #28
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007510:	78f9      	ldrb	r1, [r7, #3]
 8007512:	2300      	movs	r3, #0
 8007514:	2200      	movs	r2, #0
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 fdd2 	bl	80090c0 <USBD_LL_Transmit>
 800751c:	e003      	b.n	8007526 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	e000      	b.n	800752c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800752a:	2302      	movs	r3, #2
  }
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007546:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 fdfd 	bl	800914c <USBD_LL_GetRxDataSize>
 8007552:	4602      	mov	r2, r0
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00d      	beq.n	8007580 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007578:	4611      	mov	r1, r2
 800757a:	4798      	blx	r3

    return USBD_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	e000      	b.n	8007582 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007580:	2302      	movs	r3, #2
  }
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007598:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d015      	beq.n	80075d0 <USBD_CDC_EP0_RxReady+0x46>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80075aa:	2bff      	cmp	r3, #255	; 0xff
 80075ac:	d010      	beq.n	80075d0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80075bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075c4:	b292      	uxth	r2, r2
 80075c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	22ff      	movs	r2, #255	; 0xff
 80075cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2243      	movs	r2, #67	; 0x43
 80075e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80075ea:	4b03      	ldr	r3, [pc, #12]	; (80075f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	200000a0 	.word	0x200000a0

080075fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2243      	movs	r2, #67	; 0x43
 8007608:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800760a:	4b03      	ldr	r3, [pc, #12]	; (8007618 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	2000005c 	.word	0x2000005c

0800761c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2243      	movs	r2, #67	; 0x43
 8007628:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800762a:	4b03      	ldr	r3, [pc, #12]	; (8007638 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	200000e4 	.word	0x200000e4

0800763c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	220a      	movs	r2, #10
 8007648:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800764a:	4b03      	ldr	r3, [pc, #12]	; (8007658 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	20000018 	.word	0x20000018

0800765c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007666:	2302      	movs	r3, #2
 8007668:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr

08007688 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80076a6:	88fa      	ldrh	r2, [r7, #6]
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bc80      	pop	{r7}
 80076b8:	4770      	bx	lr

080076ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr

080076e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01c      	beq.n	8007734 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007700:	2b00      	cmp	r3, #0
 8007702:	d115      	bne.n	8007730 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007722:	b29b      	uxth	r3, r3
 8007724:	2181      	movs	r1, #129	; 0x81
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 fcca 	bl	80090c0 <USBD_LL_Transmit>

      return USBD_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	e002      	b.n	8007736 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007734:	2302      	movs	r3, #2
  }
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007754:	2b00      	cmp	r3, #0
 8007756:	d017      	beq.n	8007788 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	7c1b      	ldrb	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800776a:	2101      	movs	r1, #1
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fcca 	bl	8009106 <USBD_LL_PrepareReceive>
 8007772:	e007      	b.n	8007784 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800777a:	2340      	movs	r3, #64	; 0x40
 800777c:	2101      	movs	r1, #1
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fcc1 	bl	8009106 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	e000      	b.n	800778a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007788:	2302      	movs	r3, #2
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	4613      	mov	r3, r2
 800779e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80077a6:	2302      	movs	r3, #2
 80077a8:	e01a      	b.n	80077e0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	79fa      	ldrb	r2, [r7, #7]
 80077d6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f001 fb2f 	bl	8008e3c <USBD_LL_Init>

  return USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]
 8007808:	e001      	b.n	800780e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800780a:	2302      	movs	r3, #2
 800780c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr

0800781a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fb64 	bl	8008ef0 <USBD_LL_Start>

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	bc80      	pop	{r7}
 8007844:	4770      	bx	lr

08007846 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	460b      	mov	r3, r1
 8007850:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007852:	2302      	movs	r3, #2
 8007854:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00c      	beq.n	800787a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	78fa      	ldrb	r2, [r7, #3]
 800786a:	4611      	mov	r1, r2
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	78fa      	ldrb	r2, [r7, #3]
 800789a:	4611      	mov	r1, r2
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	4798      	blx	r3

  return USBD_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fed8 	bl	8008672 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80078d0:	461a      	mov	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80078de:	f003 031f 	and.w	r3, r3, #31
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d016      	beq.n	8007914 <USBD_LL_SetupStage+0x6a>
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d81c      	bhi.n	8007924 <USBD_LL_SetupStage+0x7a>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <USBD_LL_SetupStage+0x4a>
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d008      	beq.n	8007904 <USBD_LL_SetupStage+0x5a>
 80078f2:	e017      	b.n	8007924 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f9cb 	bl	8007c98 <USBD_StdDevReq>
      break;
 8007902:	e01a      	b.n	800793a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa2d 	bl	8007d6c <USBD_StdItfReq>
      break;
 8007912:	e012      	b.n	800793a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa6d 	bl	8007dfc <USBD_StdEPReq>
      break;
 8007922:	e00a      	b.n	800793a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800792a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800792e:	b2db      	uxtb	r3, r3
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fb3c 	bl	8008fb0 <USBD_LL_StallEP>
      break;
 8007938:	bf00      	nop
  }

  return USBD_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	460b      	mov	r3, r1
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007952:	7afb      	ldrb	r3, [r7, #11]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d14b      	bne.n	80079f0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800795e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007966:	2b03      	cmp	r3, #3
 8007968:	d134      	bne.n	80079d4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	429a      	cmp	r2, r3
 8007974:	d919      	bls.n	80079aa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800798c:	429a      	cmp	r2, r3
 800798e:	d203      	bcs.n	8007998 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007994:	b29b      	uxth	r3, r3
 8007996:	e002      	b.n	800799e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800799c:	b29b      	uxth	r3, r3
 800799e:	461a      	mov	r2, r3
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 ff57 	bl	8008856 <USBD_CtlContinueRx>
 80079a8:	e038      	b.n	8007a1c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d105      	bne.n	80079cc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 ff54 	bl	800887a <USBD_CtlSendStatus>
 80079d2:	e023      	b.n	8007a1c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079da:	2b05      	cmp	r3, #5
 80079dc:	d11e      	bne.n	8007a1c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80079e6:	2100      	movs	r1, #0
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f001 fae1 	bl	8008fb0 <USBD_LL_StallEP>
 80079ee:	e015      	b.n	8007a1c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00d      	beq.n	8007a18 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d108      	bne.n	8007a18 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	7afa      	ldrb	r2, [r7, #11]
 8007a10:	4611      	mov	r1, r2
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	4798      	blx	r3
 8007a16:	e001      	b.n	8007a1c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e000      	b.n	8007a1e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	607a      	str	r2, [r7, #4]
 8007a32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d17f      	bne.n	8007b3a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3314      	adds	r3, #20
 8007a3e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d15c      	bne.n	8007b04 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d915      	bls.n	8007a82 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 fec1 	bl	80087f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a74:	2300      	movs	r3, #0
 8007a76:	2200      	movs	r2, #0
 8007a78:	2100      	movs	r1, #0
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f001 fb43 	bl	8009106 <USBD_LL_PrepareReceive>
 8007a80:	e04e      	b.n	8007b20 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	6912      	ldr	r2, [r2, #16]
 8007a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a8e:	fb01 f202 	mul.w	r2, r1, r2
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11c      	bne.n	8007ad2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d316      	bcc.n	8007ad2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d20f      	bcs.n	8007ad2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fe9d 	bl	80087f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2100      	movs	r1, #0
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f001 fb1b 	bl	8009106 <USBD_LL_PrepareReceive>
 8007ad0:	e026      	b.n	8007b20 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d105      	bne.n	8007af4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007af4:	2180      	movs	r1, #128	; 0x80
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f001 fa5a 	bl	8008fb0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fecf 	bl	80088a0 <USBD_CtlReceiveStatus>
 8007b02:	e00d      	b.n	8007b20 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d004      	beq.n	8007b18 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007b18:	2180      	movs	r1, #128	; 0x80
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 fa48 	bl	8008fb0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d11d      	bne.n	8007b66 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff fe81 	bl	8007832 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b38:	e015      	b.n	8007b66 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00d      	beq.n	8007b62 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d108      	bne.n	8007b62 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	7afa      	ldrb	r2, [r7, #11]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	4798      	blx	r3
 8007b60:	e001      	b.n	8007b66 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b62:	2302      	movs	r3, #2
 8007b64:	e000      	b.n	8007b68 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b78:	2340      	movs	r3, #64	; 0x40
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 f9d1 	bl	8008f26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2240      	movs	r2, #64	; 0x40
 8007b90:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b94:	2340      	movs	r3, #64	; 0x40
 8007b96:	2200      	movs	r2, #0
 8007b98:	2180      	movs	r1, #128	; 0x80
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 f9c3 	bl	8008f26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2240      	movs	r2, #64	; 0x40
 8007baa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d009      	beq.n	8007be8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6852      	ldr	r2, [r2, #4]
 8007be0:	b2d2      	uxtb	r2, r2
 8007be2:	4611      	mov	r1, r2
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	4798      	blx	r3
  }

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bc80      	pop	{r7}
 8007c0e:	4770      	bx	lr

08007c10 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2204      	movs	r2, #4
 8007c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d105      	bne.n	8007c56 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr

08007c62 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d10b      	bne.n	8007c8c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cae:	2b40      	cmp	r3, #64	; 0x40
 8007cb0:	d005      	beq.n	8007cbe <USBD_StdDevReq+0x26>
 8007cb2:	2b40      	cmp	r3, #64	; 0x40
 8007cb4:	d84f      	bhi.n	8007d56 <USBD_StdDevReq+0xbe>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <USBD_StdDevReq+0x36>
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d14b      	bne.n	8007d56 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4798      	blx	r3
      break;
 8007ccc:	e048      	b.n	8007d60 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	2b09      	cmp	r3, #9
 8007cd4:	d839      	bhi.n	8007d4a <USBD_StdDevReq+0xb2>
 8007cd6:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <USBD_StdDevReq+0x44>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007d2d 	.word	0x08007d2d
 8007ce0:	08007d41 	.word	0x08007d41
 8007ce4:	08007d4b 	.word	0x08007d4b
 8007ce8:	08007d37 	.word	0x08007d37
 8007cec:	08007d4b 	.word	0x08007d4b
 8007cf0:	08007d0f 	.word	0x08007d0f
 8007cf4:	08007d05 	.word	0x08007d05
 8007cf8:	08007d4b 	.word	0x08007d4b
 8007cfc:	08007d23 	.word	0x08007d23
 8007d00:	08007d19 	.word	0x08007d19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9dc 	bl	80080c4 <USBD_GetDescriptor>
          break;
 8007d0c:	e022      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fb3f 	bl	8008394 <USBD_SetAddress>
          break;
 8007d16:	e01d      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fb7e 	bl	800841c <USBD_SetConfig>
          break;
 8007d20:	e018      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fc07 	bl	8008538 <USBD_GetConfig>
          break;
 8007d2a:	e013      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fc37 	bl	80085a2 <USBD_GetStatus>
          break;
 8007d34:	e00e      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fc65 	bl	8008608 <USBD_SetFeature>
          break;
 8007d3e:	e009      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fc74 	bl	8008630 <USBD_ClrFeature>
          break;
 8007d48:	e004      	b.n	8007d54 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fccc 	bl	80086ea <USBD_CtlError>
          break;
 8007d52:	bf00      	nop
      }
      break;
 8007d54:	e004      	b.n	8007d60 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fcc6 	bl	80086ea <USBD_CtlError>
      break;
 8007d5e:	bf00      	nop
  }

  return ret;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop

08007d6c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d005      	beq.n	8007d92 <USBD_StdItfReq+0x26>
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	d82e      	bhi.n	8007de8 <USBD_StdItfReq+0x7c>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <USBD_StdItfReq+0x26>
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	d12a      	bne.n	8007de8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d81d      	bhi.n	8007dda <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	889b      	ldrh	r3, [r3, #4]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d813      	bhi.n	8007dd0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	88db      	ldrh	r3, [r3, #6]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d110      	bne.n	8007de4 <USBD_StdItfReq+0x78>
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10d      	bne.n	8007de4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fd56 	bl	800887a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dce:	e009      	b.n	8007de4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fc89 	bl	80086ea <USBD_CtlError>
          break;
 8007dd8:	e004      	b.n	8007de4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fc84 	bl	80086ea <USBD_CtlError>
          break;
 8007de2:	e000      	b.n	8007de6 <USBD_StdItfReq+0x7a>
          break;
 8007de4:	bf00      	nop
      }
      break;
 8007de6:	e004      	b.n	8007df2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fc7d 	bl	80086ea <USBD_CtlError>
      break;
 8007df0:	bf00      	nop
  }

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	889b      	ldrh	r3, [r3, #4]
 8007e0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e18:	2b40      	cmp	r3, #64	; 0x40
 8007e1a:	d007      	beq.n	8007e2c <USBD_StdEPReq+0x30>
 8007e1c:	2b40      	cmp	r3, #64	; 0x40
 8007e1e:	f200 8146 	bhi.w	80080ae <USBD_StdEPReq+0x2b2>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00a      	beq.n	8007e3c <USBD_StdEPReq+0x40>
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	f040 8141 	bne.w	80080ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3
      break;
 8007e3a:	e13d      	b.n	80080b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e44:	2b20      	cmp	r3, #32
 8007e46:	d10a      	bne.n	8007e5e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	e12d      	b.n	80080ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d007      	beq.n	8007e76 <USBD_StdEPReq+0x7a>
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	f300 811b 	bgt.w	80080a2 <USBD_StdEPReq+0x2a6>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d072      	beq.n	8007f56 <USBD_StdEPReq+0x15a>
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d03a      	beq.n	8007eea <USBD_StdEPReq+0xee>
 8007e74:	e115      	b.n	80080a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d002      	beq.n	8007e86 <USBD_StdEPReq+0x8a>
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d015      	beq.n	8007eb0 <USBD_StdEPReq+0xb4>
 8007e84:	e02b      	b.n	8007ede <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00c      	beq.n	8007ea6 <USBD_StdEPReq+0xaa>
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	2b80      	cmp	r3, #128	; 0x80
 8007e90:	d009      	beq.n	8007ea6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 f88a 	bl	8008fb0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e9c:	2180      	movs	r1, #128	; 0x80
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f886 	bl	8008fb0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ea4:	e020      	b.n	8007ee8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fc1e 	bl	80086ea <USBD_CtlError>
              break;
 8007eae:	e01b      	b.n	8007ee8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	885b      	ldrh	r3, [r3, #2]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10e      	bne.n	8007ed6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00b      	beq.n	8007ed6 <USBD_StdEPReq+0xda>
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b80      	cmp	r3, #128	; 0x80
 8007ec2:	d008      	beq.n	8007ed6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	88db      	ldrh	r3, [r3, #6]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 f86d 	bl	8008fb0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fccf 	bl	800887a <USBD_CtlSendStatus>

              break;
 8007edc:	e004      	b.n	8007ee8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fc02 	bl	80086ea <USBD_CtlError>
              break;
 8007ee6:	bf00      	nop
          }
          break;
 8007ee8:	e0e0      	b.n	80080ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d002      	beq.n	8007efa <USBD_StdEPReq+0xfe>
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d015      	beq.n	8007f24 <USBD_StdEPReq+0x128>
 8007ef8:	e026      	b.n	8007f48 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00c      	beq.n	8007f1a <USBD_StdEPReq+0x11e>
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d009      	beq.n	8007f1a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 f850 	bl	8008fb0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f10:	2180      	movs	r1, #128	; 0x80
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 f84c 	bl	8008fb0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f18:	e01c      	b.n	8007f54 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fbe4 	bl	80086ea <USBD_CtlError>
              break;
 8007f22:	e017      	b.n	8007f54 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	885b      	ldrh	r3, [r3, #2]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d112      	bne.n	8007f52 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 f857 	bl	8008fee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fc9a 	bl	800887a <USBD_CtlSendStatus>
              }
              break;
 8007f46:	e004      	b.n	8007f52 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fbcd 	bl	80086ea <USBD_CtlError>
              break;
 8007f50:	e000      	b.n	8007f54 <USBD_StdEPReq+0x158>
              break;
 8007f52:	bf00      	nop
          }
          break;
 8007f54:	e0aa      	b.n	80080ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d002      	beq.n	8007f66 <USBD_StdEPReq+0x16a>
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d032      	beq.n	8007fca <USBD_StdEPReq+0x1ce>
 8007f64:	e097      	b.n	8008096 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <USBD_StdEPReq+0x180>
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	2b80      	cmp	r3, #128	; 0x80
 8007f70:	d004      	beq.n	8007f7c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fbb8 	bl	80086ea <USBD_CtlError>
                break;
 8007f7a:	e091      	b.n	80080a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da0b      	bge.n	8007f9c <USBD_StdEPReq+0x1a0>
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	3310      	adds	r3, #16
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	4413      	add	r3, r2
 8007f98:	3304      	adds	r3, #4
 8007f9a:	e00b      	b.n	8007fb4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fbfb 	bl	80087be <USBD_CtlSendData>
              break;
 8007fc8:	e06a      	b.n	80080a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da11      	bge.n	8007ff6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	f003 020f 	and.w	r2, r3, #15
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	3318      	adds	r3, #24
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d117      	bne.n	800801c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fb7b 	bl	80086ea <USBD_CtlError>
                  break;
 8007ff4:	e054      	b.n	80080a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	f003 020f 	and.w	r2, r3, #15
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fb68 	bl	80086ea <USBD_CtlError>
                  break;
 800801a:	e041      	b.n	80080a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800801c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008020:	2b00      	cmp	r3, #0
 8008022:	da0b      	bge.n	800803c <USBD_StdEPReq+0x240>
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	3310      	adds	r3, #16
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	4413      	add	r3, r2
 8008038:	3304      	adds	r3, #4
 800803a:	e00b      	b.n	8008054 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	3304      	adds	r3, #4
 8008054:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <USBD_StdEPReq+0x266>
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b80      	cmp	r3, #128	; 0x80
 8008060:	d103      	bne.n	800806a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	e00e      	b.n	8008088 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 ffdc 	bl	800902c <USBD_LL_IsStallEP>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2201      	movs	r2, #1
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	e002      	b.n	8008088 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2202      	movs	r2, #2
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fb95 	bl	80087be <USBD_CtlSendData>
              break;
 8008094:	e004      	b.n	80080a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fb26 	bl	80086ea <USBD_CtlError>
              break;
 800809e:	bf00      	nop
          }
          break;
 80080a0:	e004      	b.n	80080ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fb20 	bl	80086ea <USBD_CtlError>
          break;
 80080aa:	bf00      	nop
      }
      break;
 80080ac:	e004      	b.n	80080b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fb1a 	bl	80086ea <USBD_CtlError>
      break;
 80080b6:	bf00      	nop
  }

  return ret;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	885b      	ldrh	r3, [r3, #2]
 80080de:	0a1b      	lsrs	r3, r3, #8
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	3b01      	subs	r3, #1
 80080e4:	2b06      	cmp	r3, #6
 80080e6:	f200 8128 	bhi.w	800833a <USBD_GetDescriptor+0x276>
 80080ea:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <USBD_GetDescriptor+0x2c>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	0800810d 	.word	0x0800810d
 80080f4:	08008125 	.word	0x08008125
 80080f8:	08008165 	.word	0x08008165
 80080fc:	0800833b 	.word	0x0800833b
 8008100:	0800833b 	.word	0x0800833b
 8008104:	080082db 	.word	0x080082db
 8008108:	08008307 	.word	0x08008307
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	7c12      	ldrb	r2, [r2, #16]
 8008118:	f107 0108 	add.w	r1, r7, #8
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	60f8      	str	r0, [r7, #12]
      break;
 8008122:	e112      	b.n	800834a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7c1b      	ldrb	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10d      	bne.n	8008148 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	f107 0208 	add.w	r2, r7, #8
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
 800813c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3301      	adds	r3, #1
 8008142:	2202      	movs	r2, #2
 8008144:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008146:	e100      	b.n	800834a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	f107 0208 	add.w	r2, r7, #8
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
 8008158:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3301      	adds	r3, #1
 800815e:	2202      	movs	r2, #2
 8008160:	701a      	strb	r2, [r3, #0]
      break;
 8008162:	e0f2      	b.n	800834a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	885b      	ldrh	r3, [r3, #2]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b05      	cmp	r3, #5
 800816c:	f200 80ac 	bhi.w	80082c8 <USBD_GetDescriptor+0x204>
 8008170:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <USBD_GetDescriptor+0xb4>)
 8008172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008176:	bf00      	nop
 8008178:	08008191 	.word	0x08008191
 800817c:	080081c5 	.word	0x080081c5
 8008180:	080081f9 	.word	0x080081f9
 8008184:	0800822d 	.word	0x0800822d
 8008188:	08008261 	.word	0x08008261
 800818c:	08008295 	.word	0x08008295
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	7c12      	ldrb	r2, [r2, #16]
 80081a8:	f107 0108 	add.w	r1, r7, #8
 80081ac:	4610      	mov	r0, r2
 80081ae:	4798      	blx	r3
 80081b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081b2:	e091      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa97 	bl	80086ea <USBD_CtlError>
            err++;
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	3301      	adds	r3, #1
 80081c0:	72fb      	strb	r3, [r7, #11]
          break;
 80081c2:	e089      	b.n	80082d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	7c12      	ldrb	r2, [r2, #16]
 80081dc:	f107 0108 	add.w	r1, r7, #8
 80081e0:	4610      	mov	r0, r2
 80081e2:	4798      	blx	r3
 80081e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081e6:	e077      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa7d 	bl	80086ea <USBD_CtlError>
            err++;
 80081f0:	7afb      	ldrb	r3, [r7, #11]
 80081f2:	3301      	adds	r3, #1
 80081f4:	72fb      	strb	r3, [r7, #11]
          break;
 80081f6:	e06f      	b.n	80082d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00b      	beq.n	800821c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	7c12      	ldrb	r2, [r2, #16]
 8008210:	f107 0108 	add.w	r1, r7, #8
 8008214:	4610      	mov	r0, r2
 8008216:	4798      	blx	r3
 8008218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800821a:	e05d      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa63 	bl	80086ea <USBD_CtlError>
            err++;
 8008224:	7afb      	ldrb	r3, [r7, #11]
 8008226:	3301      	adds	r3, #1
 8008228:	72fb      	strb	r3, [r7, #11]
          break;
 800822a:	e055      	b.n	80082d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	7c12      	ldrb	r2, [r2, #16]
 8008244:	f107 0108 	add.w	r1, r7, #8
 8008248:	4610      	mov	r0, r2
 800824a:	4798      	blx	r3
 800824c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800824e:	e043      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fa49 	bl	80086ea <USBD_CtlError>
            err++;
 8008258:	7afb      	ldrb	r3, [r7, #11]
 800825a:	3301      	adds	r3, #1
 800825c:	72fb      	strb	r3, [r7, #11]
          break;
 800825e:	e03b      	b.n	80082d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	7c12      	ldrb	r2, [r2, #16]
 8008278:	f107 0108 	add.w	r1, r7, #8
 800827c:	4610      	mov	r0, r2
 800827e:	4798      	blx	r3
 8008280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008282:	e029      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fa2f 	bl	80086ea <USBD_CtlError>
            err++;
 800828c:	7afb      	ldrb	r3, [r7, #11]
 800828e:	3301      	adds	r3, #1
 8008290:	72fb      	strb	r3, [r7, #11]
          break;
 8008292:	e021      	b.n	80082d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00b      	beq.n	80082b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	7c12      	ldrb	r2, [r2, #16]
 80082ac:	f107 0108 	add.w	r1, r7, #8
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
 80082b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082b6:	e00f      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa15 	bl	80086ea <USBD_CtlError>
            err++;
 80082c0:	7afb      	ldrb	r3, [r7, #11]
 80082c2:	3301      	adds	r3, #1
 80082c4:	72fb      	strb	r3, [r7, #11]
          break;
 80082c6:	e007      	b.n	80082d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa0d 	bl	80086ea <USBD_CtlError>
          err++;
 80082d0:	7afb      	ldrb	r3, [r7, #11]
 80082d2:	3301      	adds	r3, #1
 80082d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80082d6:	e038      	b.n	800834a <USBD_GetDescriptor+0x286>
 80082d8:	e037      	b.n	800834a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	7c1b      	ldrb	r3, [r3, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ea:	f107 0208 	add.w	r2, r7, #8
 80082ee:	4610      	mov	r0, r2
 80082f0:	4798      	blx	r3
 80082f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082f4:	e029      	b.n	800834a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f9f6 	bl	80086ea <USBD_CtlError>
        err++;
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	3301      	adds	r3, #1
 8008302:	72fb      	strb	r3, [r7, #11]
      break;
 8008304:	e021      	b.n	800834a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	7c1b      	ldrb	r3, [r3, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10d      	bne.n	800832a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	f107 0208 	add.w	r2, r7, #8
 800831a:	4610      	mov	r0, r2
 800831c:	4798      	blx	r3
 800831e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3301      	adds	r3, #1
 8008324:	2207      	movs	r2, #7
 8008326:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008328:	e00f      	b.n	800834a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f9dc 	bl	80086ea <USBD_CtlError>
        err++;
 8008332:	7afb      	ldrb	r3, [r7, #11]
 8008334:	3301      	adds	r3, #1
 8008336:	72fb      	strb	r3, [r7, #11]
      break;
 8008338:	e007      	b.n	800834a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f9d4 	bl	80086ea <USBD_CtlError>
      err++;
 8008342:	7afb      	ldrb	r3, [r7, #11]
 8008344:	3301      	adds	r3, #1
 8008346:	72fb      	strb	r3, [r7, #11]
      break;
 8008348:	bf00      	nop
  }

  if (err != 0U)
 800834a:	7afb      	ldrb	r3, [r7, #11]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d11c      	bne.n	800838a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008350:	893b      	ldrh	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d011      	beq.n	800837a <USBD_GetDescriptor+0x2b6>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	88db      	ldrh	r3, [r3, #6]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00d      	beq.n	800837a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88da      	ldrh	r2, [r3, #6]
 8008362:	893b      	ldrh	r3, [r7, #8]
 8008364:	4293      	cmp	r3, r2
 8008366:	bf28      	it	cs
 8008368:	4613      	movcs	r3, r2
 800836a:	b29b      	uxth	r3, r3
 800836c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800836e:	893b      	ldrh	r3, [r7, #8]
 8008370:	461a      	mov	r2, r3
 8008372:	68f9      	ldr	r1, [r7, #12]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa22 	bl	80087be <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	88db      	ldrh	r3, [r3, #6]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d104      	bne.n	800838c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa79 	bl	800887a <USBD_CtlSendStatus>
 8008388:	e000      	b.n	800838c <USBD_GetDescriptor+0x2c8>
    return;
 800838a:	bf00      	nop
    }
  }
}
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop

08008394 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	889b      	ldrh	r3, [r3, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d130      	bne.n	8008408 <USBD_SetAddress+0x74>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	88db      	ldrh	r3, [r3, #6]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d12c      	bne.n	8008408 <USBD_SetAddress+0x74>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	885b      	ldrh	r3, [r3, #2]
 80083b2:	2b7f      	cmp	r3, #127	; 0x7f
 80083b4:	d828      	bhi.n	8008408 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	885b      	ldrh	r3, [r3, #2]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d104      	bne.n	80083d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f98b 	bl	80086ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d4:	e01d      	b.n	8008412 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	7bfa      	ldrb	r2, [r7, #15]
 80083da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fe4d 	bl	8009082 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa46 	bl	800887a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d004      	beq.n	80083fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fc:	e009      	b.n	8008412 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008406:	e004      	b.n	8008412 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f96d 	bl	80086ea <USBD_CtlError>
  }
}
 8008410:	bf00      	nop
 8008412:	bf00      	nop
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	885b      	ldrh	r3, [r3, #2]
 800842a:	b2da      	uxtb	r2, r3
 800842c:	4b41      	ldr	r3, [pc, #260]	; (8008534 <USBD_SetConfig+0x118>)
 800842e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008430:	4b40      	ldr	r3, [pc, #256]	; (8008534 <USBD_SetConfig+0x118>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d904      	bls.n	8008442 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f955 	bl	80086ea <USBD_CtlError>
 8008440:	e075      	b.n	800852e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008448:	2b02      	cmp	r3, #2
 800844a:	d002      	beq.n	8008452 <USBD_SetConfig+0x36>
 800844c:	2b03      	cmp	r3, #3
 800844e:	d023      	beq.n	8008498 <USBD_SetConfig+0x7c>
 8008450:	e062      	b.n	8008518 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008452:	4b38      	ldr	r3, [pc, #224]	; (8008534 <USBD_SetConfig+0x118>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d01a      	beq.n	8008490 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800845a:	4b36      	ldr	r3, [pc, #216]	; (8008534 <USBD_SetConfig+0x118>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2203      	movs	r2, #3
 8008468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800846c:	4b31      	ldr	r3, [pc, #196]	; (8008534 <USBD_SetConfig+0x118>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7ff f9e7 	bl	8007846 <USBD_SetClassConfig>
 8008478:	4603      	mov	r3, r0
 800847a:	2b02      	cmp	r3, #2
 800847c:	d104      	bne.n	8008488 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f932 	bl	80086ea <USBD_CtlError>
            return;
 8008486:	e052      	b.n	800852e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f9f6 	bl	800887a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800848e:	e04e      	b.n	800852e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f9f2 	bl	800887a <USBD_CtlSendStatus>
        break;
 8008496:	e04a      	b.n	800852e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008498:	4b26      	ldr	r3, [pc, #152]	; (8008534 <USBD_SetConfig+0x118>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d112      	bne.n	80084c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80084a8:	4b22      	ldr	r3, [pc, #136]	; (8008534 <USBD_SetConfig+0x118>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	461a      	mov	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80084b2:	4b20      	ldr	r3, [pc, #128]	; (8008534 <USBD_SetConfig+0x118>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff f9e3 	bl	8007884 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f9db 	bl	800887a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80084c4:	e033      	b.n	800852e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80084c6:	4b1b      	ldr	r3, [pc, #108]	; (8008534 <USBD_SetConfig+0x118>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d01d      	beq.n	8008510 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff f9d1 	bl	8007884 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80084e2:	4b14      	ldr	r3, [pc, #80]	; (8008534 <USBD_SetConfig+0x118>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084ec:	4b11      	ldr	r3, [pc, #68]	; (8008534 <USBD_SetConfig+0x118>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff f9a7 	bl	8007846 <USBD_SetClassConfig>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d104      	bne.n	8008508 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f8f2 	bl	80086ea <USBD_CtlError>
            return;
 8008506:	e012      	b.n	800852e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f9b6 	bl	800887a <USBD_CtlSendStatus>
        break;
 800850e:	e00e      	b.n	800852e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f9b2 	bl	800887a <USBD_CtlSendStatus>
        break;
 8008516:	e00a      	b.n	800852e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f8e5 	bl	80086ea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008520:	4b04      	ldr	r3, [pc, #16]	; (8008534 <USBD_SetConfig+0x118>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff f9ac 	bl	8007884 <USBD_ClrClassConfig>
        break;
 800852c:	bf00      	nop
    }
  }
}
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	2000116c 	.word	0x2000116c

08008538 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	88db      	ldrh	r3, [r3, #6]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d004      	beq.n	8008554 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f8cc 	bl	80086ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008552:	e022      	b.n	800859a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800855a:	2b02      	cmp	r3, #2
 800855c:	dc02      	bgt.n	8008564 <USBD_GetConfig+0x2c>
 800855e:	2b00      	cmp	r3, #0
 8008560:	dc03      	bgt.n	800856a <USBD_GetConfig+0x32>
 8008562:	e015      	b.n	8008590 <USBD_GetConfig+0x58>
 8008564:	2b03      	cmp	r3, #3
 8008566:	d00b      	beq.n	8008580 <USBD_GetConfig+0x48>
 8008568:	e012      	b.n	8008590 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3308      	adds	r3, #8
 8008574:	2201      	movs	r2, #1
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f920 	bl	80087be <USBD_CtlSendData>
        break;
 800857e:	e00c      	b.n	800859a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3304      	adds	r3, #4
 8008584:	2201      	movs	r2, #1
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f918 	bl	80087be <USBD_CtlSendData>
        break;
 800858e:	e004      	b.n	800859a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f8a9 	bl	80086ea <USBD_CtlError>
        break;
 8008598:	bf00      	nop
}
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b2:	3b01      	subs	r3, #1
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d81e      	bhi.n	80085f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	88db      	ldrh	r3, [r3, #6]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d004      	beq.n	80085ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f891 	bl	80086ea <USBD_CtlError>
        break;
 80085c8:	e01a      	b.n	8008600 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f043 0202 	orr.w	r2, r3, #2
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	330c      	adds	r3, #12
 80085ea:	2202      	movs	r2, #2
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f8e5 	bl	80087be <USBD_CtlSendData>
      break;
 80085f4:	e004      	b.n	8008600 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f876 	bl	80086ea <USBD_CtlError>
      break;
 80085fe:	bf00      	nop
  }
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	885b      	ldrh	r3, [r3, #2]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d106      	bne.n	8008628 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f929 	bl	800887a <USBD_CtlSendStatus>
  }
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008640:	3b01      	subs	r3, #1
 8008642:	2b02      	cmp	r3, #2
 8008644:	d80b      	bhi.n	800865e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d10c      	bne.n	8008668 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f90f 	bl	800887a <USBD_CtlSendStatus>
      }
      break;
 800865c:	e004      	b.n	8008668 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f842 	bl	80086ea <USBD_CtlError>
      break;
 8008666:	e000      	b.n	800866a <USBD_ClrFeature+0x3a>
      break;
 8008668:	bf00      	nop
  }
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	785a      	ldrb	r2, [r3, #1]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	3302      	adds	r3, #2
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	b29a      	uxth	r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	3303      	adds	r3, #3
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	b29b      	uxth	r3, r3
 800869c:	021b      	lsls	r3, r3, #8
 800869e:	b29b      	uxth	r3, r3
 80086a0:	4413      	add	r3, r2
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	3304      	adds	r3, #4
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	3305      	adds	r3, #5
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	021b      	lsls	r3, r3, #8
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	4413      	add	r3, r2
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	3306      	adds	r3, #6
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	3307      	adds	r3, #7
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	021b      	lsls	r3, r3, #8
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	4413      	add	r3, r2
 80086da:	b29a      	uxth	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	80da      	strh	r2, [r3, #6]

}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bc80      	pop	{r7}
 80086e8:	4770      	bx	lr

080086ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80086f4:	2180      	movs	r1, #128	; 0x80
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fc5a 	bl	8008fb0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086fc:	2100      	movs	r1, #0
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fc56 	bl	8008fb0 <USBD_LL_StallEP>
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d032      	beq.n	8008788 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f834 	bl	8008790 <USBD_GetLen>
 8008728:	4603      	mov	r3, r0
 800872a:	3301      	adds	r3, #1
 800872c:	b29b      	uxth	r3, r3
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	75fa      	strb	r2, [r7, #23]
 800873c:	461a      	mov	r2, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4413      	add	r3, r2
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	7812      	ldrb	r2, [r2, #0]
 8008746:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	75fa      	strb	r2, [r7, #23]
 800874e:	461a      	mov	r2, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	4413      	add	r3, r2
 8008754:	2203      	movs	r2, #3
 8008756:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008758:	e012      	b.n	8008780 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	60fa      	str	r2, [r7, #12]
 8008760:	7dfa      	ldrb	r2, [r7, #23]
 8008762:	1c51      	adds	r1, r2, #1
 8008764:	75f9      	strb	r1, [r7, #23]
 8008766:	4611      	mov	r1, r2
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	440a      	add	r2, r1
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008770:	7dfb      	ldrb	r3, [r7, #23]
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	75fa      	strb	r2, [r7, #23]
 8008776:	461a      	mov	r2, r3
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4413      	add	r3, r2
 800877c:	2200      	movs	r2, #0
 800877e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e8      	bne.n	800875a <USBD_GetString+0x4e>
    }
  }
}
 8008788:	bf00      	nop
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800879c:	e005      	b.n	80087aa <USBD_GetLen+0x1a>
  {
    len++;
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	3301      	adds	r3, #1
 80087a2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3301      	adds	r3, #1
 80087a8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1f5      	bne.n	800879e <USBD_GetLen+0xe>
  }

  return len;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr

080087be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	4613      	mov	r3, r2
 80087ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087d4:	88fa      	ldrh	r2, [r7, #6]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087e0:	88fb      	ldrh	r3, [r7, #6]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	2100      	movs	r1, #0
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 fc6a 	bl	80090c0 <USBD_LL_Transmit>

  return USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	4613      	mov	r3, r2
 8008802:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008804:	88fb      	ldrh	r3, [r7, #6]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	2100      	movs	r1, #0
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 fc58 	bl	80090c0 <USBD_LL_Transmit>

  return USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	4613      	mov	r3, r2
 8008826:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2203      	movs	r2, #3
 800882c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008830:	88fa      	ldrh	r2, [r7, #6]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008838:	88fa      	ldrh	r2, [r7, #6]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008840:	88fb      	ldrh	r3, [r7, #6]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	2100      	movs	r1, #0
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fc5d 	bl	8009106 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	4613      	mov	r3, r2
 8008862:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008864:	88fb      	ldrh	r3, [r7, #6]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	2100      	movs	r1, #0
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 fc4b 	bl	8009106 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2204      	movs	r2, #4
 8008886:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800888a:	2300      	movs	r3, #0
 800888c:	2200      	movs	r2, #0
 800888e:	2100      	movs	r1, #0
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fc15 	bl	80090c0 <USBD_LL_Transmit>

  return USBD_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2205      	movs	r2, #5
 80088ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088b0:	2300      	movs	r3, #0
 80088b2:	2200      	movs	r2, #0
 80088b4:	2100      	movs	r1, #0
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fc25 	bl	8009106 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088cc:	2200      	movs	r2, #0
 80088ce:	4912      	ldr	r1, [pc, #72]	; (8008918 <MX_USB_DEVICE_Init+0x50>)
 80088d0:	4812      	ldr	r0, [pc, #72]	; (800891c <MX_USB_DEVICE_Init+0x54>)
 80088d2:	f7fe ff5e 	bl	8007792 <USBD_Init>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088dc:	f7f8 fb7a 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088e0:	490f      	ldr	r1, [pc, #60]	; (8008920 <MX_USB_DEVICE_Init+0x58>)
 80088e2:	480e      	ldr	r0, [pc, #56]	; (800891c <MX_USB_DEVICE_Init+0x54>)
 80088e4:	f7fe ff80 	bl	80077e8 <USBD_RegisterClass>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088ee:	f7f8 fb71 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088f2:	490c      	ldr	r1, [pc, #48]	; (8008924 <MX_USB_DEVICE_Init+0x5c>)
 80088f4:	4809      	ldr	r0, [pc, #36]	; (800891c <MX_USB_DEVICE_Init+0x54>)
 80088f6:	f7fe feb1 	bl	800765c <USBD_CDC_RegisterInterface>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008900:	f7f8 fb68 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008904:	4805      	ldr	r0, [pc, #20]	; (800891c <MX_USB_DEVICE_Init+0x54>)
 8008906:	f7fe ff88 	bl	800781a <USBD_Start>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008910:	f7f8 fb60 	bl	8000fd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008914:	bf00      	nop
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20000138 	.word	0x20000138
 800891c:	20001170 	.word	0x20001170
 8008920:	20000024 	.word	0x20000024
 8008924:	20000128 	.word	0x20000128

08008928 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800892c:	2200      	movs	r2, #0
 800892e:	4905      	ldr	r1, [pc, #20]	; (8008944 <CDC_Init_FS+0x1c>)
 8008930:	4805      	ldr	r0, [pc, #20]	; (8008948 <CDC_Init_FS+0x20>)
 8008932:	f7fe fea9 	bl	8007688 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008936:	4905      	ldr	r1, [pc, #20]	; (800894c <CDC_Init_FS+0x24>)
 8008938:	4803      	ldr	r0, [pc, #12]	; (8008948 <CDC_Init_FS+0x20>)
 800893a:	f7fe febe 	bl	80076ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800893e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008940:	4618      	mov	r0, r3
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20001834 	.word	0x20001834
 8008948:	20001170 	.word	0x20001170
 800894c:	20001434 	.word	0x20001434

08008950 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008954:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008956:	4618      	mov	r0, r3
 8008958:	46bd      	mov	sp, r7
 800895a:	bc80      	pop	{r7}
 800895c:	4770      	bx	lr
	...

08008960 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	71fb      	strb	r3, [r7, #7]
 800896c:	4613      	mov	r3, r2
 800896e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b23      	cmp	r3, #35	; 0x23
 8008974:	d84a      	bhi.n	8008a0c <CDC_Control_FS+0xac>
 8008976:	a201      	add	r2, pc, #4	; (adr r2, 800897c <CDC_Control_FS+0x1c>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	08008a0d 	.word	0x08008a0d
 8008980:	08008a0d 	.word	0x08008a0d
 8008984:	08008a0d 	.word	0x08008a0d
 8008988:	08008a0d 	.word	0x08008a0d
 800898c:	08008a0d 	.word	0x08008a0d
 8008990:	08008a0d 	.word	0x08008a0d
 8008994:	08008a0d 	.word	0x08008a0d
 8008998:	08008a0d 	.word	0x08008a0d
 800899c:	08008a0d 	.word	0x08008a0d
 80089a0:	08008a0d 	.word	0x08008a0d
 80089a4:	08008a0d 	.word	0x08008a0d
 80089a8:	08008a0d 	.word	0x08008a0d
 80089ac:	08008a0d 	.word	0x08008a0d
 80089b0:	08008a0d 	.word	0x08008a0d
 80089b4:	08008a0d 	.word	0x08008a0d
 80089b8:	08008a0d 	.word	0x08008a0d
 80089bc:	08008a0d 	.word	0x08008a0d
 80089c0:	08008a0d 	.word	0x08008a0d
 80089c4:	08008a0d 	.word	0x08008a0d
 80089c8:	08008a0d 	.word	0x08008a0d
 80089cc:	08008a0d 	.word	0x08008a0d
 80089d0:	08008a0d 	.word	0x08008a0d
 80089d4:	08008a0d 	.word	0x08008a0d
 80089d8:	08008a0d 	.word	0x08008a0d
 80089dc:	08008a0d 	.word	0x08008a0d
 80089e0:	08008a0d 	.word	0x08008a0d
 80089e4:	08008a0d 	.word	0x08008a0d
 80089e8:	08008a0d 	.word	0x08008a0d
 80089ec:	08008a0d 	.word	0x08008a0d
 80089f0:	08008a0d 	.word	0x08008a0d
 80089f4:	08008a0d 	.word	0x08008a0d
 80089f8:	08008a0d 	.word	0x08008a0d
 80089fc:	08008a0d 	.word	0x08008a0d
 8008a00:	08008a0d 	.word	0x08008a0d
 8008a04:	08008a0d 	.word	0x08008a0d
 8008a08:	08008a0d 	.word	0x08008a0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a0c:	bf00      	nop
  }

  return (USBD_OK);
 8008a0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bc80      	pop	{r7}
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop

08008a1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4808      	ldr	r0, [pc, #32]	; (8008a4c <CDC_Receive_FS+0x30>)
 8008a2a:	f7fe fe46 	bl	80076ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a2e:	4807      	ldr	r0, [pc, #28]	; (8008a4c <CDC_Receive_FS+0x30>)
 8008a30:	f7fe fe85 	bl	800773e <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7f7 fbb2 	bl	80001a4 <CDC_ReceiveCallback>
  return (USBD_OK);
 8008a40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20001170 	.word	0x20001170

08008a50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a60:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <CDC_Transmit_FS+0x48>)
 8008a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e00b      	b.n	8008a8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a76:	887b      	ldrh	r3, [r7, #2]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	4806      	ldr	r0, [pc, #24]	; (8008a98 <CDC_Transmit_FS+0x48>)
 8008a7e:	f7fe fe03 	bl	8007688 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a82:	4805      	ldr	r0, [pc, #20]	; (8008a98 <CDC_Transmit_FS+0x48>)
 8008a84:	f7fe fe2c 	bl	80076e0 <USBD_CDC_TransmitPacket>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20001170 	.word	0x20001170

08008a9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2212      	movs	r2, #18
 8008aac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008aae:	4b03      	ldr	r3, [pc, #12]	; (8008abc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	20000154 	.word	0x20000154

08008ac0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	6039      	str	r1, [r7, #0]
 8008aca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2204      	movs	r2, #4
 8008ad0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ad2:	4b03      	ldr	r3, [pc, #12]	; (8008ae0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bc80      	pop	{r7}
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20000168 	.word	0x20000168

08008ae4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	6039      	str	r1, [r7, #0]
 8008aee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008af0:	79fb      	ldrb	r3, [r7, #7]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d105      	bne.n	8008b02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	4907      	ldr	r1, [pc, #28]	; (8008b18 <USBD_FS_ProductStrDescriptor+0x34>)
 8008afa:	4808      	ldr	r0, [pc, #32]	; (8008b1c <USBD_FS_ProductStrDescriptor+0x38>)
 8008afc:	f7ff fe06 	bl	800870c <USBD_GetString>
 8008b00:	e004      	b.n	8008b0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	4904      	ldr	r1, [pc, #16]	; (8008b18 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b06:	4805      	ldr	r0, [pc, #20]	; (8008b1c <USBD_FS_ProductStrDescriptor+0x38>)
 8008b08:	f7ff fe00 	bl	800870c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b0c:	4b02      	ldr	r3, [pc, #8]	; (8008b18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20001c34 	.word	0x20001c34
 8008b1c:	0800927c 	.word	0x0800927c

08008b20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	6039      	str	r1, [r7, #0]
 8008b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	4904      	ldr	r1, [pc, #16]	; (8008b40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b30:	4804      	ldr	r0, [pc, #16]	; (8008b44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b32:	f7ff fdeb 	bl	800870c <USBD_GetString>
  return USBD_StrDesc;
 8008b36:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20001c34 	.word	0x20001c34
 8008b44:	08009294 	.word	0x08009294

08008b48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	6039      	str	r1, [r7, #0]
 8008b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	221a      	movs	r2, #26
 8008b58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b5a:	f000 f843 	bl	8008be4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b5e:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	2000016c 	.word	0x2000016c

08008b6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d105      	bne.n	8008b8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	4907      	ldr	r1, [pc, #28]	; (8008ba0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b82:	4808      	ldr	r0, [pc, #32]	; (8008ba4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b84:	f7ff fdc2 	bl	800870c <USBD_GetString>
 8008b88:	e004      	b.n	8008b94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	4904      	ldr	r1, [pc, #16]	; (8008ba0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b8e:	4805      	ldr	r0, [pc, #20]	; (8008ba4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b90:	f7ff fdbc 	bl	800870c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b94:	4b02      	ldr	r3, [pc, #8]	; (8008ba0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20001c34 	.word	0x20001c34
 8008ba4:	080092a8 	.word	0x080092a8

08008ba8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	6039      	str	r1, [r7, #0]
 8008bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d105      	bne.n	8008bc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	4907      	ldr	r1, [pc, #28]	; (8008bdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bbe:	4808      	ldr	r0, [pc, #32]	; (8008be0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bc0:	f7ff fda4 	bl	800870c <USBD_GetString>
 8008bc4:	e004      	b.n	8008bd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	4904      	ldr	r1, [pc, #16]	; (8008bdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bca:	4805      	ldr	r0, [pc, #20]	; (8008be0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bcc:	f7ff fd9e 	bl	800870c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bd0:	4b02      	ldr	r3, [pc, #8]	; (8008bdc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20001c34 	.word	0x20001c34
 8008be0:	080092b4 	.word	0x080092b4

08008be4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bea:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <Get_SerialNum+0x44>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bf0:	4b0e      	ldr	r3, [pc, #56]	; (8008c2c <Get_SerialNum+0x48>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bf6:	4b0e      	ldr	r3, [pc, #56]	; (8008c30 <Get_SerialNum+0x4c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d009      	beq.n	8008c1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c0a:	2208      	movs	r2, #8
 8008c0c:	4909      	ldr	r1, [pc, #36]	; (8008c34 <Get_SerialNum+0x50>)
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f000 f814 	bl	8008c3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c14:	2204      	movs	r2, #4
 8008c16:	4908      	ldr	r1, [pc, #32]	; (8008c38 <Get_SerialNum+0x54>)
 8008c18:	68b8      	ldr	r0, [r7, #8]
 8008c1a:	f000 f80f 	bl	8008c3c <IntToUnicode>
  }
}
 8008c1e:	bf00      	nop
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	1ffff7e8 	.word	0x1ffff7e8
 8008c2c:	1ffff7ec 	.word	0x1ffff7ec
 8008c30:	1ffff7f0 	.word	0x1ffff7f0
 8008c34:	2000016e 	.word	0x2000016e
 8008c38:	2000017e 	.word	0x2000017e

08008c3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	4613      	mov	r3, r2
 8008c48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c4e:	2300      	movs	r3, #0
 8008c50:	75fb      	strb	r3, [r7, #23]
 8008c52:	e027      	b.n	8008ca4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	0f1b      	lsrs	r3, r3, #28
 8008c58:	2b09      	cmp	r3, #9
 8008c5a:	d80b      	bhi.n	8008c74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	0f1b      	lsrs	r3, r3, #28
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	4619      	mov	r1, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	440b      	add	r3, r1
 8008c6c:	3230      	adds	r2, #48	; 0x30
 8008c6e:	b2d2      	uxtb	r2, r2
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	e00a      	b.n	8008c8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	0f1b      	lsrs	r3, r3, #28
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	4619      	mov	r1, r3
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	440b      	add	r3, r1
 8008c84:	3237      	adds	r2, #55	; 0x37
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	011b      	lsls	r3, r3, #4
 8008c8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	3301      	adds	r3, #1
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	4413      	add	r3, r2
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	75fb      	strb	r3, [r7, #23]
 8008ca4:	7dfa      	ldrb	r2, [r7, #23]
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d3d3      	bcc.n	8008c54 <IntToUnicode+0x18>
  }
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bc80      	pop	{r7}
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a0d      	ldr	r2, [pc, #52]	; (8008cfc <HAL_PCD_MspInit+0x44>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d113      	bne.n	8008cf2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008cca:	4b0d      	ldr	r3, [pc, #52]	; (8008d00 <HAL_PCD_MspInit+0x48>)
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	4a0c      	ldr	r2, [pc, #48]	; (8008d00 <HAL_PCD_MspInit+0x48>)
 8008cd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cd4:	61d3      	str	r3, [r2, #28]
 8008cd6:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <HAL_PCD_MspInit+0x48>)
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	2014      	movs	r0, #20
 8008ce8:	f7f8 fbc7 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008cec:	2014      	movs	r0, #20
 8008cee:	f7f8 fbe0 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008cf2:	bf00      	nop
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40005c00 	.word	0x40005c00
 8008d00:	40021000 	.word	0x40021000

08008d04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f7fe fdc5 	bl	80078aa <USBD_LL_SetupStage>
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 8008d3a:	78fa      	ldrb	r2, [r7, #3]
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	440b      	add	r3, r1
 8008d48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	4619      	mov	r1, r3
 8008d52:	f7fe fdf7 	bl	8007944 <USBD_LL_DataOutStage>
}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 8008d70:	78fa      	ldrb	r2, [r7, #3]
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	4613      	mov	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	440b      	add	r3, r1
 8008d7e:	3324      	adds	r3, #36	; 0x24
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	4619      	mov	r1, r3
 8008d86:	f7fe fe4e 	bl	8007a26 <USBD_LL_DataInStage>
}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b082      	sub	sp, #8
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe ff5e 	bl	8007c62 <USBD_LL_SOF>
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008db6:	2301      	movs	r3, #1
 8008db8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	799b      	ldrb	r3, [r3, #6]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d001      	beq.n	8008dc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008dc2:	f7f8 f907 	bl	8000fd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dcc:	7bfa      	ldrb	r2, [r7, #15]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fe ff0e 	bl	8007bf2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe fec7 	bl	8007b70 <USBD_LL_Reset>
}
 8008de2:	bf00      	nop
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe ff08 	bl	8007c10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7a9b      	ldrb	r3, [r3, #10]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e08:	4b04      	ldr	r3, [pc, #16]	; (8008e1c <HAL_PCD_SuspendCallback+0x30>)
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	4a03      	ldr	r2, [pc, #12]	; (8008e1c <HAL_PCD_SuspendCallback+0x30>)
 8008e0e:	f043 0306 	orr.w	r3, r3, #6
 8008e12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	e000ed00 	.word	0xe000ed00

08008e20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe ff02 	bl	8007c38 <USBD_LL_Resume>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008e44:	4a28      	ldr	r2, [pc, #160]	; (8008ee8 <USBD_LL_Init+0xac>)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a26      	ldr	r2, [pc, #152]	; (8008ee8 <USBD_LL_Init+0xac>)
 8008e50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008e54:	4b24      	ldr	r3, [pc, #144]	; (8008ee8 <USBD_LL_Init+0xac>)
 8008e56:	4a25      	ldr	r2, [pc, #148]	; (8008eec <USBD_LL_Init+0xb0>)
 8008e58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e5a:	4b23      	ldr	r3, [pc, #140]	; (8008ee8 <USBD_LL_Init+0xac>)
 8008e5c:	2208      	movs	r2, #8
 8008e5e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008e60:	4b21      	ldr	r3, [pc, #132]	; (8008ee8 <USBD_LL_Init+0xac>)
 8008e62:	2202      	movs	r2, #2
 8008e64:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008e66:	4b20      	ldr	r3, [pc, #128]	; (8008ee8 <USBD_LL_Init+0xac>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008e6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ee8 <USBD_LL_Init+0xac>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008e72:	4b1d      	ldr	r3, [pc, #116]	; (8008ee8 <USBD_LL_Init+0xac>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e78:	481b      	ldr	r0, [pc, #108]	; (8008ee8 <USBD_LL_Init+0xac>)
 8008e7a:	f7f8 fcd0 	bl	800181e <HAL_PCD_Init>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008e84:	f7f8 f8a6 	bl	8000fd4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e8e:	2318      	movs	r3, #24
 8008e90:	2200      	movs	r2, #0
 8008e92:	2100      	movs	r1, #0
 8008e94:	f7fa f9e2 	bl	800325c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e9e:	2358      	movs	r3, #88	; 0x58
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2180      	movs	r1, #128	; 0x80
 8008ea4:	f7fa f9da 	bl	800325c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008eae:	23c0      	movs	r3, #192	; 0xc0
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2181      	movs	r1, #129	; 0x81
 8008eb4:	f7fa f9d2 	bl	800325c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ebe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	f7fa f9c9 	bl	800325c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2182      	movs	r1, #130	; 0x82
 8008ed8:	f7fa f9c0 	bl	800325c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20001e34 	.word	0x20001e34
 8008eec:	40005c00 	.word	0x40005c00

08008ef0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7f8 fd7f 	bl	8001a0a <HAL_PCD_Start>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f94e 	bl	80091b4 <USBD_Get_USB_Status>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	4608      	mov	r0, r1
 8008f30:	4611      	mov	r1, r2
 8008f32:	461a      	mov	r2, r3
 8008f34:	4603      	mov	r3, r0
 8008f36:	70fb      	strb	r3, [r7, #3]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70bb      	strb	r3, [r7, #2]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f4e:	78bb      	ldrb	r3, [r7, #2]
 8008f50:	883a      	ldrh	r2, [r7, #0]
 8008f52:	78f9      	ldrb	r1, [r7, #3]
 8008f54:	f7f8 fed3 	bl	8001cfe <HAL_PCD_EP_Open>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 f928 	bl	80091b4 <USBD_Get_USB_Status>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7f8 ff11 	bl	8001db8 <HAL_PCD_EP_Close>
 8008f96:	4603      	mov	r3, r0
 8008f98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 f909 	bl	80091b4 <USBD_Get_USB_Status>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fca:	78fa      	ldrb	r2, [r7, #3]
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f8 ffb9 	bl	8001f46 <HAL_PCD_EP_SetStall>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 f8ea 	bl	80091b4 <USBD_Get_USB_Status>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009008:	78fa      	ldrb	r2, [r7, #3]
 800900a:	4611      	mov	r1, r2
 800900c:	4618      	mov	r0, r3
 800900e:	f7f8 fffa 	bl	8002006 <HAL_PCD_EP_ClrStall>
 8009012:	4603      	mov	r3, r0
 8009014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009016:	7bfb      	ldrb	r3, [r7, #15]
 8009018:	4618      	mov	r0, r3
 800901a:	f000 f8cb 	bl	80091b4 <USBD_Get_USB_Status>
 800901e:	4603      	mov	r3, r0
 8009020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009022:	7bbb      	ldrb	r3, [r7, #14]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800903e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009044:	2b00      	cmp	r3, #0
 8009046:	da0b      	bge.n	8009060 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800904e:	68f9      	ldr	r1, [r7, #12]
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	440b      	add	r3, r1
 800905a:	3312      	adds	r3, #18
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	e00b      	b.n	8009078 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009066:	68f9      	ldr	r1, [r7, #12]
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	440b      	add	r3, r1
 8009072:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8009076:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	bc80      	pop	{r7}
 8009080:	4770      	bx	lr

08009082 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	4611      	mov	r1, r2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7f8 fe08 	bl	8001cb6 <HAL_PCD_SetAddress>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f881 	bl	80091b4 <USBD_Get_USB_Status>
 80090b2:	4603      	mov	r3, r0
 80090b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	607a      	str	r2, [r7, #4]
 80090ca:	461a      	mov	r2, r3
 80090cc:	460b      	mov	r3, r1
 80090ce:	72fb      	strb	r3, [r7, #11]
 80090d0:	4613      	mov	r3, r2
 80090d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090e2:	893b      	ldrh	r3, [r7, #8]
 80090e4:	7af9      	ldrb	r1, [r7, #11]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	f7f8 fef6 	bl	8001ed8 <HAL_PCD_EP_Transmit>
 80090ec:	4603      	mov	r3, r0
 80090ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f0:	7dfb      	ldrb	r3, [r7, #23]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f85e 	bl	80091b4 <USBD_Get_USB_Status>
 80090f8:	4603      	mov	r3, r0
 80090fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b086      	sub	sp, #24
 800910a:	af00      	add	r7, sp, #0
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	461a      	mov	r2, r3
 8009112:	460b      	mov	r3, r1
 8009114:	72fb      	strb	r3, [r7, #11]
 8009116:	4613      	mov	r3, r2
 8009118:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009128:	893b      	ldrh	r3, [r7, #8]
 800912a:	7af9      	ldrb	r1, [r7, #11]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	f7f8 fe8b 	bl	8001e48 <HAL_PCD_EP_Receive>
 8009132:	4603      	mov	r3, r0
 8009134:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009136:	7dfb      	ldrb	r3, [r7, #23]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f83b 	bl	80091b4 <USBD_Get_USB_Status>
 800913e:	4603      	mov	r3, r0
 8009140:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009142:	7dbb      	ldrb	r3, [r7, #22]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f7f8 fea1 	bl	8001eaa <HAL_PCD_EP_GetRxCount>
 8009168:	4603      	mov	r3, r0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <USBD_static_malloc+0x14>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	bc80      	pop	{r7}
 8009186:	4770      	bx	lr
 8009188:	2000210c 	.word	0x2000210c

0800918c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]

}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr

0800919e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	460b      	mov	r3, r1
 80091a8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80091aa:	bf00      	nop
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bc80      	pop	{r7}
 80091b2:	4770      	bx	lr

080091b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4603      	mov	r3, r0
 80091bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091c2:	79fb      	ldrb	r3, [r7, #7]
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d817      	bhi.n	80091f8 <USBD_Get_USB_Status+0x44>
 80091c8:	a201      	add	r2, pc, #4	; (adr r2, 80091d0 <USBD_Get_USB_Status+0x1c>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	080091e1 	.word	0x080091e1
 80091d4:	080091e7 	.word	0x080091e7
 80091d8:	080091ed 	.word	0x080091ed
 80091dc:	080091f3 	.word	0x080091f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73fb      	strb	r3, [r7, #15]
    break;
 80091e4:	e00b      	b.n	80091fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091e6:	2302      	movs	r3, #2
 80091e8:	73fb      	strb	r3, [r7, #15]
    break;
 80091ea:	e008      	b.n	80091fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091ec:	2301      	movs	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
    break;
 80091f0:	e005      	b.n	80091fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091f2:	2302      	movs	r3, #2
 80091f4:	73fb      	strb	r3, [r7, #15]
    break;
 80091f6:	e002      	b.n	80091fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091f8:	2302      	movs	r3, #2
 80091fa:	73fb      	strb	r3, [r7, #15]
    break;
 80091fc:	bf00      	nop
  }
  return usb_status;
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	bc80      	pop	{r7}
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop

0800920c <memset>:
 800920c:	4603      	mov	r3, r0
 800920e:	4402      	add	r2, r0
 8009210:	4293      	cmp	r3, r2
 8009212:	d100      	bne.n	8009216 <memset+0xa>
 8009214:	4770      	bx	lr
 8009216:	f803 1b01 	strb.w	r1, [r3], #1
 800921a:	e7f9      	b.n	8009210 <memset+0x4>

0800921c <__libc_init_array>:
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	2600      	movs	r6, #0
 8009220:	4d0c      	ldr	r5, [pc, #48]	; (8009254 <__libc_init_array+0x38>)
 8009222:	4c0d      	ldr	r4, [pc, #52]	; (8009258 <__libc_init_array+0x3c>)
 8009224:	1b64      	subs	r4, r4, r5
 8009226:	10a4      	asrs	r4, r4, #2
 8009228:	42a6      	cmp	r6, r4
 800922a:	d109      	bne.n	8009240 <__libc_init_array+0x24>
 800922c:	f000 f81a 	bl	8009264 <_init>
 8009230:	2600      	movs	r6, #0
 8009232:	4d0a      	ldr	r5, [pc, #40]	; (800925c <__libc_init_array+0x40>)
 8009234:	4c0a      	ldr	r4, [pc, #40]	; (8009260 <__libc_init_array+0x44>)
 8009236:	1b64      	subs	r4, r4, r5
 8009238:	10a4      	asrs	r4, r4, #2
 800923a:	42a6      	cmp	r6, r4
 800923c:	d105      	bne.n	800924a <__libc_init_array+0x2e>
 800923e:	bd70      	pop	{r4, r5, r6, pc}
 8009240:	f855 3b04 	ldr.w	r3, [r5], #4
 8009244:	4798      	blx	r3
 8009246:	3601      	adds	r6, #1
 8009248:	e7ee      	b.n	8009228 <__libc_init_array+0xc>
 800924a:	f855 3b04 	ldr.w	r3, [r5], #4
 800924e:	4798      	blx	r3
 8009250:	3601      	adds	r6, #1
 8009252:	e7f2      	b.n	800923a <__libc_init_array+0x1e>
 8009254:	080094e8 	.word	0x080094e8
 8009258:	080094e8 	.word	0x080094e8
 800925c:	080094e8 	.word	0x080094e8
 8009260:	080094ec 	.word	0x080094ec

08009264 <_init>:
 8009264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009266:	bf00      	nop
 8009268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926a:	bc08      	pop	{r3}
 800926c:	469e      	mov	lr, r3
 800926e:	4770      	bx	lr

08009270 <_fini>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr
