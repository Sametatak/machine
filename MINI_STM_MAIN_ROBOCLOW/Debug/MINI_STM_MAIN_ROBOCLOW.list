
MINI_STM_MAIN_ROBOCLOW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000958c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800990c  0800990c  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  0800990c  0800990c  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800990c  0800990c  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009910  08009910  00019910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08009914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021e4  20000188  08009a9c  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000236c  08009a9c  0002236c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e13  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034b4  00000000  00000000  00035007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  000384c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e69  00000000  00000000  00039780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a463  00000000  00000000  0003a5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001696d  00000000  00000000  00054a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f479  00000000  00000000  0006b3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004de4  00000000  00000000  000fa834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ff618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08009680 	.word	0x08009680

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08009680 	.word	0x08009680

0800014c <calculateCRC>:
#define BACKWARD_COMMAND2 0x05
#define STOP_COMMAND 0x00
#define FULL_SPEED 127

/* CRC Calculation Function */
int16_t calculateCRC(uint8_t *buffer, uint16_t length) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
    int16_t crc = 0xFFFF;
 8000158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015c:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < length; ++i) {
 800015e:	2300      	movs	r3, #0
 8000160:	60bb      	str	r3, [r7, #8]
 8000162:	e012      	b.n	800018a <calculateCRC+0x3e>
        crc = (crc >> 8) ^ crcTable[(crc & 0xFF) ^ buffer[i]];
 8000164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000168:	121b      	asrs	r3, r3, #8
 800016a:	b21a      	sxth	r2, r3
 800016c:	89fb      	ldrh	r3, [r7, #14]
 800016e:	b2db      	uxtb	r3, r3
 8000170:	68b9      	ldr	r1, [r7, #8]
 8000172:	6878      	ldr	r0, [r7, #4]
 8000174:	4401      	add	r1, r0
 8000176:	7809      	ldrb	r1, [r1, #0]
 8000178:	404b      	eors	r3, r1
 800017a:	4909      	ldr	r1, [pc, #36]	; (80001a0 <calculateCRC+0x54>)
 800017c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000180:	4053      	eors	r3, r2
 8000182:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < length; ++i) {
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	887b      	ldrh	r3, [r7, #2]
 800018c:	68ba      	ldr	r2, [r7, #8]
 800018e:	429a      	cmp	r2, r3
 8000190:	dbe8      	blt.n	8000164 <calculateCRC+0x18>
    }
    return crc;
 8000192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000196:	4618      	mov	r0, r3
 8000198:	3714      	adds	r7, #20
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	080096e0 	.word	0x080096e0

080001a4 <CDC_ReceiveCallback>:
void CDC_Transmit_String(char* string) {
    CDC_Transmit_FS((uint8_t*)string, strlen(string));
}


void CDC_ReceiveCallback(uint8_t *buf, uint32_t len) {
 80001a4:	b480      	push	{r7}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	6039      	str	r1, [r7, #0]

    if (calculated_crc != received_crc) {
        return;
    }
	*/
    slave_address = buf[0];
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	b25a      	sxtb	r2, r3
 80001b4:	4b34      	ldr	r3, [pc, #208]	; (8000288 <CDC_ReceiveCallback+0xe4>)
 80001b6:	701a      	strb	r2, [r3, #0]
    function_code = buf[1];
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3301      	adds	r3, #1
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	b21a      	sxth	r2, r3
 80001c0:	4b32      	ldr	r3, [pc, #200]	; (800028c <CDC_ReceiveCallback+0xe8>)
 80001c2:	801a      	strh	r2, [r3, #0]
    starting_address = (buf[2] << 8) | buf[3];
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	3302      	adds	r3, #2
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	021b      	lsls	r3, r3, #8
 80001cc:	b21a      	sxth	r2, r3
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	3303      	adds	r3, #3
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	b21b      	sxth	r3, r3
 80001d6:	4313      	orrs	r3, r2
 80001d8:	b21a      	sxth	r2, r3
 80001da:	4b2d      	ldr	r3, [pc, #180]	; (8000290 <CDC_ReceiveCallback+0xec>)
 80001dc:	801a      	strh	r2, [r3, #0]
    length = (buf[4] << 8) | buf[5];
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	3304      	adds	r3, #4
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	021b      	lsls	r3, r3, #8
 80001e6:	b21a      	sxth	r2, r3
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	3305      	adds	r3, #5
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	b21b      	sxth	r3, r3
 80001f0:	4313      	orrs	r3, r2
 80001f2:	b21a      	sxth	r2, r3
 80001f4:	4b27      	ldr	r3, [pc, #156]	; (8000294 <CDC_ReceiveCallback+0xf0>)
 80001f6:	801a      	strh	r2, [r3, #0]
    new_data_received = 1;
 80001f8:	4b27      	ldr	r3, [pc, #156]	; (8000298 <CDC_ReceiveCallback+0xf4>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	701a      	strb	r2, [r3, #0]

    if (function_code == 16 && len >= 9 + length) {
 80001fe:	4b23      	ldr	r3, [pc, #140]	; (800028c <CDC_ReceiveCallback+0xe8>)
 8000200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000204:	2b10      	cmp	r3, #16
 8000206:	d139      	bne.n	800027c <CDC_ReceiveCallback+0xd8>
 8000208:	4b22      	ldr	r3, [pc, #136]	; (8000294 <CDC_ReceiveCallback+0xf0>)
 800020a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800020e:	3309      	adds	r3, #9
 8000210:	461a      	mov	r2, r3
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	4293      	cmp	r3, r2
 8000216:	d331      	bcc.n	800027c <CDC_ReceiveCallback+0xd8>
        number_of_bytes = buf[6];
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	3306      	adds	r3, #6
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	b25a      	sxtb	r2, r3
 8000220:	4b1e      	ldr	r3, [pc, #120]	; (800029c <CDC_ReceiveCallback+0xf8>)
 8000222:	701a      	strb	r2, [r3, #0]
        for (int8_t i = 0; i < number_of_bytes; i += 2) {
 8000224:	2300      	movs	r3, #0
 8000226:	73fb      	strb	r3, [r7, #15]
 8000228:	e021      	b.n	800026e <CDC_ReceiveCallback+0xca>
            value[i / 2] = (buf[7 + i] << 8) | buf[8 + i];
 800022a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800022e:	3307      	adds	r3, #7
 8000230:	461a      	mov	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	b219      	sxth	r1, r3
 800023c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000240:	3308      	adds	r3, #8
 8000242:	461a      	mov	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4413      	add	r3, r2
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b21a      	sxth	r2, r3
 800024c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000250:	0fd8      	lsrs	r0, r3, #31
 8000252:	4403      	add	r3, r0
 8000254:	105b      	asrs	r3, r3, #1
 8000256:	b25b      	sxtb	r3, r3
 8000258:	4618      	mov	r0, r3
 800025a:	ea41 0302 	orr.w	r3, r1, r2
 800025e:	b21a      	sxth	r2, r3
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <CDC_ReceiveCallback+0xfc>)
 8000262:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
        for (int8_t i = 0; i < number_of_bytes; i += 2) {
 8000266:	7bfb      	ldrb	r3, [r7, #15]
 8000268:	3302      	adds	r3, #2
 800026a:	b2db      	uxtb	r3, r3
 800026c:	73fb      	strb	r3, [r7, #15]
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <CDC_ReceiveCallback+0xf8>)
 8000270:	f993 3000 	ldrsb.w	r3, [r3]
 8000274:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000278:	429a      	cmp	r2, r3
 800027a:	dbd6      	blt.n	800022a <CDC_ReceiveCallback+0x86>
        }
    }
}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	20000004 	.word	0x20000004
 800028c:	2000027e 	.word	0x2000027e
 8000290:	20000292 	.word	0x20000292
 8000294:	2000027c 	.word	0x2000027c
 8000298:	20000280 	.word	0x20000280
 800029c:	20000290 	.word	0x20000290
 80002a0:	20000288 	.word	0x20000288

080002a4 <initialize_device>:

void initialize_device(int8_t slave_address) {
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
    for (int16_t i = 0; i < 300; i++) {
 80002ae:	2300      	movs	r3, #0
 80002b0:	81fb      	strh	r3, [r7, #14]
 80002b2:	e00f      	b.n	80002d4 <initialize_device+0x30>
        modbusDevices[slave_address].data[i] = 0;
 80002b4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80002b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002bc:	490b      	ldr	r1, [pc, #44]	; (80002ec <initialize_device+0x48>)
 80002be:	01d2      	lsls	r2, r2, #7
 80002c0:	4413      	add	r3, r2
 80002c2:	2200      	movs	r2, #0
 80002c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int16_t i = 0; i < 300; i++) {
 80002c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	3301      	adds	r3, #1
 80002d0:	b29b      	uxth	r3, r3
 80002d2:	81fb      	strh	r3, [r7, #14]
 80002d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80002dc:	dbea      	blt.n	80002b4 <initialize_device+0x10>
    }
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	200002a0 	.word	0x200002a0

080002f0 <write_to_modbus>:

void write_to_modbus(uint8_t index,int16_t value){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	460a      	mov	r2, r1
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	4613      	mov	r3, r2
 80002fe:	80bb      	strh	r3, [r7, #4]
	modbusDevices[slave_address].data[index]= value;
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <write_to_modbus+0x30>)
 8000302:	f993 3000 	ldrsb.w	r3, [r3]
 8000306:	461a      	mov	r2, r3
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4906      	ldr	r1, [pc, #24]	; (8000324 <write_to_modbus+0x34>)
 800030c:	01d2      	lsls	r2, r2, #7
 800030e:	4413      	add	r3, r2
 8000310:	88ba      	ldrh	r2, [r7, #4]
 8000312:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	20000004 	.word	0x20000004
 8000324:	200002a0 	.word	0x200002a0

08000328 <write_command>:

void write_command(int8_t slave_address, int16_t starting_address, int16_t length) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	460b      	mov	r3, r1
 8000334:	80bb      	strh	r3, [r7, #4]
 8000336:	4613      	mov	r3, r2
 8000338:	807b      	strh	r3, [r7, #2]
	modbusDevices[slave_address].data[starting_address] = length;
 800033a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800033e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000342:	4905      	ldr	r1, [pc, #20]	; (8000358 <write_command+0x30>)
 8000344:	01d2      	lsls	r2, r2, #7
 8000346:	4413      	add	r3, r2
 8000348:	887a      	ldrh	r2, [r7, #2]
 800034a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	200002a0 	.word	0x200002a0

0800035c <write_multiple_command>:
void write_multiple_command(int8_t slave_address, int16_t starting_address, int16_t length, int16_t* value) {
 800035c:	b480      	push	{r7}
 800035e:	b087      	sub	sp, #28
 8000360:	af00      	add	r7, sp, #0
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	4603      	mov	r3, r0
 8000366:	73fb      	strb	r3, [r7, #15]
 8000368:	460b      	mov	r3, r1
 800036a:	81bb      	strh	r3, [r7, #12]
 800036c:	4613      	mov	r3, r2
 800036e:	817b      	strh	r3, [r7, #10]
    for (int16_t i = 0; i < number_of_bytes/2; i++) {
 8000370:	2300      	movs	r3, #0
 8000372:	82fb      	strh	r3, [r7, #22]
 8000374:	e019      	b.n	80003aa <write_multiple_command+0x4e>
        modbusDevices[slave_address].data[starting_address + i] = value[i];
 8000376:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	18d1      	adds	r1, r2, r3
 8000380:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000384:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8000388:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800038c:	4403      	add	r3, r0
 800038e:	f9b1 0000 	ldrsh.w	r0, [r1]
 8000392:	490f      	ldr	r1, [pc, #60]	; (80003d0 <write_multiple_command+0x74>)
 8000394:	01d2      	lsls	r2, r2, #7
 8000396:	4413      	add	r3, r2
 8000398:	4602      	mov	r2, r0
 800039a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int16_t i = 0; i < number_of_bytes/2; i++) {
 800039e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	3301      	adds	r3, #1
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	82fb      	strh	r3, [r7, #22]
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <write_multiple_command+0x78>)
 80003ac:	f993 3000 	ldrsb.w	r3, [r3]
 80003b0:	0fda      	lsrs	r2, r3, #31
 80003b2:	4413      	add	r3, r2
 80003b4:	105b      	asrs	r3, r3, #1
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	b21b      	sxth	r3, r3
 80003ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80003be:	429a      	cmp	r2, r3
 80003c0:	dbd9      	blt.n	8000376 <write_multiple_command+0x1a>
        //CDC_Transmit_FS(modbusDevices[slave_address].data, 10);
    }

}
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
 80003c6:	371c      	adds	r7, #28
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	200002a0 	.word	0x200002a0
 80003d4:	20000290 	.word	0x20000290

080003d8 <read_command>:
void read_command(int8_t slave_address, int16_t starting_address, int16_t length, int16_t crc) {
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b0a5      	sub	sp, #148	; 0x94
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4604      	mov	r4, r0
 80003e0:	4608      	mov	r0, r1
 80003e2:	4611      	mov	r1, r2
 80003e4:	461a      	mov	r2, r3
 80003e6:	4623      	mov	r3, r4
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	4603      	mov	r3, r0
 80003ec:	80bb      	strh	r3, [r7, #4]
 80003ee:	460b      	mov	r3, r1
 80003f0:	807b      	strh	r3, [r7, #2]
 80003f2:	4613      	mov	r3, r2
 80003f4:	803b      	strh	r3, [r7, #0]
    uint8_t response[128] = {0};
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	227c      	movs	r2, #124	; 0x7c
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f009 f910 	bl	8009628 <memset>
    uint8_t response_length = 3 + length * 2 + 2;
 8000408:	887b      	ldrh	r3, [r7, #2]
 800040a:	b2db      	uxtb	r3, r3
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	b2db      	uxtb	r3, r3
 8000410:	3305      	adds	r3, #5
 8000412:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    if (starting_address + length <= 128) {
 8000416:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800041a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800041e:	4413      	add	r3, r2
 8000420:	2b80      	cmp	r3, #128	; 0x80
 8000422:	dc71      	bgt.n	8000508 <read_command+0x130>
        response[0] = slave_address;
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	733b      	strb	r3, [r7, #12]
        response[1] = 0x03;
 8000428:	2303      	movs	r3, #3
 800042a:	737b      	strb	r3, [r7, #13]
        response[2] = length * 2;
 800042c:	887b      	ldrh	r3, [r7, #2]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	b2db      	uxtb	r3, r3
 8000434:	73bb      	strb	r3, [r7, #14]

        for (int8_t i = 0; i < length; i++) {
 8000436:	2300      	movs	r3, #0
 8000438:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800043c:	e032      	b.n	80004a4 <read_command+0xcc>
            response[3 + i * 2] = modbusDevices[slave_address].data[starting_address + i] >> 8;
 800043e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000442:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000446:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800044a:	440b      	add	r3, r1
 800044c:	4930      	ldr	r1, [pc, #192]	; (8000510 <read_command+0x138>)
 800044e:	01d2      	lsls	r2, r2, #7
 8000450:	4413      	add	r3, r2
 8000452:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000456:	121b      	asrs	r3, r3, #8
 8000458:	b21a      	sxth	r2, r3
 800045a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	3303      	adds	r3, #3
 8000462:	b2d2      	uxtb	r2, r2
 8000464:	3390      	adds	r3, #144	; 0x90
 8000466:	443b      	add	r3, r7
 8000468:	f803 2c84 	strb.w	r2, [r3, #-132]
            response[3 + i * 2 + 1] = modbusDevices[slave_address].data[starting_address + i] & 0xFF;
 800046c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000470:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000474:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8000478:	440b      	add	r3, r1
 800047a:	4925      	ldr	r1, [pc, #148]	; (8000510 <read_command+0x138>)
 800047c:	01d2      	lsls	r2, r2, #7
 800047e:	4413      	add	r3, r2
 8000480:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8000484:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8000488:	3302      	adds	r3, #2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	b2d2      	uxtb	r2, r2
 800048e:	3390      	adds	r3, #144	; 0x90
 8000490:	443b      	add	r3, r7
 8000492:	f803 2c84 	strb.w	r2, [r3, #-132]
        for (int8_t i = 0; i < length; i++) {
 8000496:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800049a:	b2db      	uxtb	r3, r3
 800049c:	3301      	adds	r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80004a4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80004a8:	b21b      	sxth	r3, r3
 80004aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	dcc5      	bgt.n	800043e <read_command+0x66>
        }

        crc = calculateCRC(response, response_length - 2);
 80004b2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	3b02      	subs	r3, #2
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	f107 030c 	add.w	r3, r7, #12
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fe42 	bl	800014c <calculateCRC>
 80004c8:	4603      	mov	r3, r0
 80004ca:	803b      	strh	r3, [r7, #0]
        response[response_length - 2] = crc & 0xFF;
 80004cc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80004d0:	3b02      	subs	r3, #2
 80004d2:	883a      	ldrh	r2, [r7, #0]
 80004d4:	b2d2      	uxtb	r2, r2
 80004d6:	3390      	adds	r3, #144	; 0x90
 80004d8:	443b      	add	r3, r7
 80004da:	f803 2c84 	strb.w	r2, [r3, #-132]
        response[response_length - 1] = crc >> 8;
 80004de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80004e2:	121b      	asrs	r3, r3, #8
 80004e4:	b21a      	sxth	r2, r3
 80004e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80004ea:	3b01      	subs	r3, #1
 80004ec:	b2d2      	uxtb	r2, r2
 80004ee:	3390      	adds	r3, #144	; 0x90
 80004f0:	443b      	add	r3, r7
 80004f2:	f803 2c84 	strb.w	r2, [r3, #-132]

        CDC_Transmit_FS(response, response_length);
 80004f6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f008 fcb2 	bl	8008e6c <CDC_Transmit_FS>
    }
}
 8000508:	bf00      	nop
 800050a:	3794      	adds	r7, #148	; 0x94
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}
 8000510:	200002a0 	.word	0x200002a0

08000514 <crc16_xmodem>:
mosfet_4_A_L	 Timer 4 Channel 4
mosfet_4_B_L	 Timer 4 Channel 2

*/

unsigned int crc16_xmodem(unsigned char *packet, int nBytes) {
 8000514:	b480      	push	{r7}
 8000516:	b087      	sub	sp, #28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
    unsigned int crc = 0x0000;  // CRC-16/XMODEM için başlangıç değeri
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
    for (int byte = 0; byte < nBytes; byte++) {
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	e026      	b.n	8000576 <crc16_xmodem+0x62>
        crc ^= ((unsigned int)packet[byte] << 8);
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	4053      	eors	r3, r2
 8000536:	617b      	str	r3, [r7, #20]
        for (unsigned char bit = 0; bit < 8; bit++) {
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]
 800053c:	e012      	b.n	8000564 <crc16_xmodem+0x50>
            if (crc & 0x8000) {
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d007      	beq.n	8000558 <crc16_xmodem+0x44>
                crc = ((crc << 1) ^ 0x1021);
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000550:	f083 0301 	eor.w	r3, r3, #1
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e002      	b.n	800055e <crc16_xmodem+0x4a>
            } else {
                crc <<= 1;
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	617b      	str	r3, [r7, #20]
        for (unsigned char bit = 0; bit < 8; bit++) {
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	3301      	adds	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	2b07      	cmp	r3, #7
 8000568:	d9e9      	bls.n	800053e <crc16_xmodem+0x2a>
            }
        }
        crc &= 0xFFFF;  // CRC'yi 16 bit ile sınırla
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	b29b      	uxth	r3, r3
 800056e:	617b      	str	r3, [r7, #20]
    for (int byte = 0; byte < nBytes; byte++) {
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	3301      	adds	r3, #1
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	429a      	cmp	r2, r3
 800057c:	dbd4      	blt.n	8000528 <crc16_xmodem+0x14>
    }
    return crc;
 800057e:	697b      	ldr	r3, [r7, #20]
}
 8000580:	4618      	mov	r0, r3
 8000582:	371c      	adds	r7, #28
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
	...

0800058c <send_motor_command>:


void send_motor_command(uint8_t command, uint8_t speed) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	460a      	mov	r2, r1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]
    uint8_t packet[5];
    packet[0] = MOTOR_ADDRESS;
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	733b      	strb	r3, [r7, #12]
    packet[1] = command;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	737b      	strb	r3, [r7, #13]
    packet[2] = speed;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73bb      	strb	r3, [r7, #14]

    // CRC'yi hesapla (CRC-16/XMODEM)
    unsigned int crc = crc16_xmodem(packet, 3);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2103      	movs	r1, #3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffb0 	bl	8000514 <crc16_xmodem>
 80005b4:	6178      	str	r0, [r7, #20]

    // CRC'yi pakete ekle (MSB önce olacak şekilde)
    packet[3] = (crc >> 8) & 0xFF;  // CRC üst bayt (MSB)
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	73fb      	strb	r3, [r7, #15]
    packet[4] = crc & 0xFF;         // CRC alt bayt (LSB)
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	743b      	strb	r3, [r7, #16]

    // Paketi UART üzerinden gönder
    HAL_UART_Transmit(&huart1, packet, 5, HAL_MAX_DELAY);
 80005c4:	f107 010c 	add.w	r1, r7, #12
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	2205      	movs	r2, #5
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <send_motor_command+0x50>)
 80005d0:	f004 faae 	bl	8004b30 <HAL_UART_Transmit>
}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000234 	.word	0x20000234

080005e0 <drive_motor_forward1>:


void drive_motor_forward1(int8_t speed) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
    send_motor_command(FORWARD_COMMAND1, speed);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2000      	movs	r0, #0
 80005f0:	f7ff ffcc 	bl	800058c <send_motor_command>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <drive_motor_backward1>:

void drive_motor_backward1(int8_t speed) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
    send_motor_command(BACKWARD_COMMAND1, speed);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4619      	mov	r1, r3
 800060a:	2001      	movs	r0, #1
 800060c:	f7ff ffbe 	bl	800058c <send_motor_command>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <drive_motor_forward2>:

void drive_motor_forward2(int8_t speed) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
    send_motor_command(FORWARD_COMMAND2, speed);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4619      	mov	r1, r3
 8000626:	2004      	movs	r0, #4
 8000628:	f7ff ffb0 	bl	800058c <send_motor_command>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <drive_motor_backward2>:

void drive_motor_backward2(int8_t speed) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
    send_motor_command(BACKWARD_COMMAND2, speed);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4619      	mov	r1, r3
 8000642:	2005      	movs	r0, #5
 8000644:	f7ff ffa2 	bl	800058c <send_motor_command>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <ConstrainTargetValue>:
    send_motor_command(STOP_COMMAND, 0);
}


int ConstrainTargetValue(int target)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    if (target < min_pwm && target > 2) {
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <ConstrainTargetValue+0x50>)
 800065a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4293      	cmp	r3, r2
 8000664:	da06      	bge.n	8000674 <ConstrainTargetValue+0x24>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b02      	cmp	r3, #2
 800066a:	dd03      	ble.n	8000674 <ConstrainTargetValue+0x24>
        return min_pwm;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <ConstrainTargetValue+0x50>)
 800066e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000672:	e010      	b.n	8000696 <ConstrainTargetValue+0x46>
    } else if (target > -min_pwm && target < -2) {
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <ConstrainTargetValue+0x50>)
 8000676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800067a:	425b      	negs	r3, r3
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	429a      	cmp	r2, r3
 8000680:	dd08      	ble.n	8000694 <ConstrainTargetValue+0x44>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f113 0f02 	cmn.w	r3, #2
 8000688:	da04      	bge.n	8000694 <ConstrainTargetValue+0x44>
        return -min_pwm;
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <ConstrainTargetValue+0x50>)
 800068c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000690:	425b      	negs	r3, r3
 8000692:	e000      	b.n	8000696 <ConstrainTargetValue+0x46>
    }
    return target;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000284 	.word	0x20000284

080006a4 <ConstrainTargetValue2>:

int ConstrainTargetValue2(int target)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
    if (target < 100 && target >-100) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b63      	cmp	r3, #99	; 0x63
 80006b0:	dc05      	bgt.n	80006be <ConstrainTargetValue2+0x1a>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80006b8:	db01      	blt.n	80006be <ConstrainTargetValue2+0x1a>
        return 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e000      	b.n	80006c0 <ConstrainTargetValue2+0x1c>
    }
    else{
    	return target;
 80006be:	687b      	ldr	r3, [r7, #4]
    }

}
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
	...

080006cc <setPWMValues__Right>:


void setPWMValues__Right(int16_t pwm)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
    // speed'i hesapla
    int16_t temp_speed = (pwm * 128) / 1000;
 80006d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006da:	01db      	lsls	r3, r3, #7
 80006dc:	4a19      	ldr	r2, [pc, #100]	; (8000744 <setPWMValues__Right+0x78>)
 80006de:	fb82 1203 	smull	r1, r2, r2, r3
 80006e2:	1192      	asrs	r2, r2, #6
 80006e4:	17db      	asrs	r3, r3, #31
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	81fb      	strh	r3, [r7, #14]

    // speed değerini -127 ile 127 arasında sınırla
    if (temp_speed > 127)
 80006ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006ee:	2b7f      	cmp	r3, #127	; 0x7f
 80006f0:	dd02      	ble.n	80006f8 <setPWMValues__Right+0x2c>
        temp_speed = 127;
 80006f2:	237f      	movs	r3, #127	; 0x7f
 80006f4:	81fb      	strh	r3, [r7, #14]
 80006f6:	e007      	b.n	8000708 <setPWMValues__Right+0x3c>
    else if (temp_speed < -127)
 80006f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006fc:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8000700:	da02      	bge.n	8000708 <setPWMValues__Right+0x3c>
        temp_speed = -127;
 8000702:	f64f 7381 	movw	r3, #65409	; 0xff81
 8000706:	81fb      	strh	r3, [r7, #14]

    int8_t speed = (int8_t)temp_speed;
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	737b      	strb	r3, [r7, #13]

    // Motoru sür
    if(speed >= 0){
 800070c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db05      	blt.n	8000720 <setPWMValues__Right+0x54>
        drive_motor_forward1(speed);
 8000714:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff61 	bl	80005e0 <drive_motor_forward1>
 800071e:	e006      	b.n	800072e <setPWMValues__Right+0x62>
    } else {
        drive_motor_backward1(-speed);
 8000720:	7b7b      	ldrb	r3, [r7, #13]
 8000722:	425b      	negs	r3, r3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	b25b      	sxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff67 	bl	80005fc <drive_motor_backward1>
    }

    write_to_modbus(4, speed);
 800072e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4619      	mov	r1, r3
 8000736:	2004      	movs	r0, #4
 8000738:	f7ff fdda 	bl	80002f0 <write_to_modbus>
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	10624dd3 	.word	0x10624dd3

08000748 <setPWMValues_Left>:

void setPWMValues_Left(int16_t pwm)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]
    // speed'i hesapla
    int16_t temp_speed = (pwm * 128) / 1000;
 8000752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000756:	01db      	lsls	r3, r3, #7
 8000758:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <setPWMValues_Left+0x78>)
 800075a:	fb82 1203 	smull	r1, r2, r2, r3
 800075e:	1192      	asrs	r2, r2, #6
 8000760:	17db      	asrs	r3, r3, #31
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	81fb      	strh	r3, [r7, #14]

    // speed değerini -127 ile 127 arasında sınırla
    if (temp_speed > 127)
 8000766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800076a:	2b7f      	cmp	r3, #127	; 0x7f
 800076c:	dd02      	ble.n	8000774 <setPWMValues_Left+0x2c>
        temp_speed = 127;
 800076e:	237f      	movs	r3, #127	; 0x7f
 8000770:	81fb      	strh	r3, [r7, #14]
 8000772:	e007      	b.n	8000784 <setPWMValues_Left+0x3c>
    else if (temp_speed < -127)
 8000774:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000778:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800077c:	da02      	bge.n	8000784 <setPWMValues_Left+0x3c>
        temp_speed = -127;
 800077e:	f64f 7381 	movw	r3, #65409	; 0xff81
 8000782:	81fb      	strh	r3, [r7, #14]

    int8_t speed = (int8_t)temp_speed;
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	737b      	strb	r3, [r7, #13]

    // Motoru sür
    if(speed >= 0){
 8000788:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db05      	blt.n	800079c <setPWMValues_Left+0x54>
        drive_motor_forward2(speed);
 8000790:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff3f 	bl	8000618 <drive_motor_forward2>
 800079a:	e006      	b.n	80007aa <setPWMValues_Left+0x62>
    } else {
        drive_motor_backward2(-speed);
 800079c:	7b7b      	ldrb	r3, [r7, #13]
 800079e:	425b      	negs	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff45 	bl	8000634 <drive_motor_backward2>
    }

    write_to_modbus(5, speed);
 80007aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	2005      	movs	r0, #5
 80007b4:	f7ff fd9c 	bl	80002f0 <write_to_modbus>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	10624dd3 	.word	0x10624dd3

080007c4 <incrementPWMValue>:




void incrementPWMValue(int16_t *pwm_value, int16_t target_value)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
	int8_t inc = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	73fb      	strb	r3, [r7, #15]
	if (*pwm_value<10 && *pwm_value >-10){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007da:	2b09      	cmp	r3, #9
 80007dc:	dc08      	bgt.n	80007f0 <incrementPWMValue+0x2c>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e4:	f113 0f09 	cmn.w	r3, #9
 80007e8:	db02      	blt.n	80007f0 <incrementPWMValue+0x2c>
		inc=1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	e001      	b.n	80007f4 <incrementPWMValue+0x30>
	}else{
		inc=2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	73fb      	strb	r3, [r7, #15]
	}
    if (*pwm_value < target_value) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dd16      	ble.n	8000830 <incrementPWMValue+0x6c>
        *pwm_value += inc;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000808:	b29a      	uxth	r2, r3
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	b29b      	uxth	r3, r3
 8000810:	4413      	add	r3, r2
 8000812:	b29b      	uxth	r3, r3
 8000814:	b21a      	sxth	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	801a      	strh	r2, [r3, #0]
        if (*pwm_value > target_value) {
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000820:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000824:	429a      	cmp	r2, r3
 8000826:	da20      	bge.n	800086a <incrementPWMValue+0xa6>
            *pwm_value = target_value;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	887a      	ldrh	r2, [r7, #2]
 800082c:	801a      	strh	r2, [r3, #0]
 800082e:	e01c      	b.n	800086a <incrementPWMValue+0xa6>
        }
    } else if (*pwm_value > target_value) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000836:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800083a:	429a      	cmp	r2, r3
 800083c:	da15      	bge.n	800086a <incrementPWMValue+0xa6>
        *pwm_value -= inc;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000844:	b29a      	uxth	r2, r3
 8000846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084a:	b29b      	uxth	r3, r3
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	b29b      	uxth	r3, r3
 8000850:	b21a      	sxth	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	801a      	strh	r2, [r3, #0]
        if (*pwm_value < target_value) {
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800085c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000860:	429a      	cmp	r2, r3
 8000862:	dd02      	ble.n	800086a <incrementPWMValue+0xa6>
            *pwm_value = target_value;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	887a      	ldrh	r2, [r7, #2]
 8000868:	801a      	strh	r2, [r3, #0]
        }
    }

    // Limit check for pwm_value
    if (*pwm_value > limit) *pwm_value = limit;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <incrementPWMValue+0xf0>)
 8000872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000876:	429a      	cmp	r2, r3
 8000878:	dd04      	ble.n	8000884 <incrementPWMValue+0xc0>
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <incrementPWMValue+0xf0>)
 800087c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	801a      	strh	r2, [r3, #0]
    if (*pwm_value < -limit) *pwm_value = -limit;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088a:	461a      	mov	r2, r3
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <incrementPWMValue+0xf0>)
 800088e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000892:	425b      	negs	r3, r3
 8000894:	429a      	cmp	r2, r3
 8000896:	da08      	bge.n	80008aa <incrementPWMValue+0xe6>
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <incrementPWMValue+0xf0>)
 800089a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	425b      	negs	r3, r3
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	801a      	strh	r2, [r3, #0]
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	20000002 	.word	0x20000002

080008b8 <UpdatePWMValues>:


void UpdatePWMValues(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
    static int prev_pwm_value1 = 0;
    static int prev_pwm_value2 = 0;
    int16_t pwm1 =0;
 80008be:	2300      	movs	r3, #0
 80008c0:	80fb      	strh	r3, [r7, #6]
    int16_t pwm2 =0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	80bb      	strh	r3, [r7, #4]
    min_pwm=pwm_min;
 80008c6:	4b68      	ldr	r3, [pc, #416]	; (8000a68 <UpdatePWMValues+0x1b0>)
 80008c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008cc:	4b67      	ldr	r3, [pc, #412]	; (8000a6c <UpdatePWMValues+0x1b4>)
 80008ce:	801a      	strh	r2, [r3, #0]

    if (((target_value1 > 0 && target_value2 < 0) || (target_value1 < 0 && target_value2 > 0)) && abs((abs( modbusDevices[01].data[0]) - abs( modbusDevices[01].data[1]))<50 )){
 80008d0:	4b67      	ldr	r3, [pc, #412]	; (8000a70 <UpdatePWMValues+0x1b8>)
 80008d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	dd04      	ble.n	80008e4 <UpdatePWMValues+0x2c>
 80008da:	4b66      	ldr	r3, [pc, #408]	; (8000a74 <UpdatePWMValues+0x1bc>)
 80008dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db09      	blt.n	80008f8 <UpdatePWMValues+0x40>
 80008e4:	4b62      	ldr	r3, [pc, #392]	; (8000a70 <UpdatePWMValues+0x1b8>)
 80008e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	da1b      	bge.n	8000926 <UpdatePWMValues+0x6e>
 80008ee:	4b61      	ldr	r3, [pc, #388]	; (8000a74 <UpdatePWMValues+0x1bc>)
 80008f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dd16      	ble.n	8000926 <UpdatePWMValues+0x6e>
 80008f8:	4b5f      	ldr	r3, [pc, #380]	; (8000a78 <UpdatePWMValues+0x1c0>)
 80008fa:	f9b3 3100 	ldrsh.w	r3, [r3, #256]	; 0x100
 80008fe:	2b00      	cmp	r3, #0
 8000900:	bfb8      	it	lt
 8000902:	425b      	neglt	r3, r3
 8000904:	b29b      	uxth	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	4b5b      	ldr	r3, [pc, #364]	; (8000a78 <UpdatePWMValues+0x1c0>)
 800090a:	f9b3 3102 	ldrsh.w	r3, [r3, #258]	; 0x102
 800090e:	2b00      	cmp	r3, #0
 8000910:	bfb8      	it	lt
 8000912:	425b      	neglt	r3, r3
 8000914:	b29b      	uxth	r3, r3
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	2b31      	cmp	r3, #49	; 0x31
 800091a:	dc04      	bgt.n	8000926 <UpdatePWMValues+0x6e>
    	min_pwm = pwm_min_angular;
 800091c:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <UpdatePWMValues+0x1c4>)
 800091e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000922:	4b52      	ldr	r3, [pc, #328]	; (8000a6c <UpdatePWMValues+0x1b4>)
 8000924:	801a      	strh	r2, [r3, #0]
    }




    incrementPWMValue(&pwm_value1, target_value1);
 8000926:	4b52      	ldr	r3, [pc, #328]	; (8000a70 <UpdatePWMValues+0x1b8>)
 8000928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092c:	4619      	mov	r1, r3
 800092e:	4854      	ldr	r0, [pc, #336]	; (8000a80 <UpdatePWMValues+0x1c8>)
 8000930:	f7ff ff48 	bl	80007c4 <incrementPWMValue>
    incrementPWMValue(&pwm_value2, target_value2);
 8000934:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <UpdatePWMValues+0x1bc>)
 8000936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093a:	4619      	mov	r1, r3
 800093c:	4851      	ldr	r0, [pc, #324]	; (8000a84 <UpdatePWMValues+0x1cc>)
 800093e:	f7ff ff41 	bl	80007c4 <incrementPWMValue>
    if (abs(prev_pwm_value1) >= abs(pwm_value1)){
 8000942:	4b51      	ldr	r3, [pc, #324]	; (8000a88 <UpdatePWMValues+0x1d0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	bfb8      	it	lt
 800094a:	425b      	neglt	r3, r3
 800094c:	4a4c      	ldr	r2, [pc, #304]	; (8000a80 <UpdatePWMValues+0x1c8>)
 800094e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000952:	2a00      	cmp	r2, #0
 8000954:	bfb8      	it	lt
 8000956:	4252      	neglt	r2, r2
 8000958:	b292      	uxth	r2, r2
 800095a:	4293      	cmp	r3, r2
 800095c:	db24      	blt.n	80009a8 <UpdatePWMValues+0xf0>
    pwm1 = ConstrainTargetValue2(pwm_value1);
 800095e:	4b48      	ldr	r3, [pc, #288]	; (8000a80 <UpdatePWMValues+0x1c8>)
 8000960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe9d 	bl	80006a4 <ConstrainTargetValue2>
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
    pwm2 = ConstrainTargetValue2(pwm_value2);
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <UpdatePWMValues+0x1cc>)
 8000970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fe95 	bl	80006a4 <ConstrainTargetValue2>
 800097a:	4603      	mov	r3, r0
 800097c:	80bb      	strh	r3, [r7, #4]

    target_value1 = ConstrainTargetValue2(target_value1);
 800097e:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <UpdatePWMValues+0x1b8>)
 8000980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fe8d 	bl	80006a4 <ConstrainTargetValue2>
 800098a:	4603      	mov	r3, r0
 800098c:	b21a      	sxth	r2, r3
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <UpdatePWMValues+0x1b8>)
 8000990:	801a      	strh	r2, [r3, #0]
    target_value2 = ConstrainTargetValue2(target_value2);
 8000992:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <UpdatePWMValues+0x1bc>)
 8000994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fe83 	bl	80006a4 <ConstrainTargetValue2>
 800099e:	4603      	mov	r3, r0
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <UpdatePWMValues+0x1bc>)
 80009a4:	801a      	strh	r2, [r3, #0]
 80009a6:	e037      	b.n	8000a18 <UpdatePWMValues+0x160>
    }
    else{
    pwm1 = ConstrainTargetValue(pwm_value1);
 80009a8:	4b35      	ldr	r3, [pc, #212]	; (8000a80 <UpdatePWMValues+0x1c8>)
 80009aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe4e 	bl	8000650 <ConstrainTargetValue>
 80009b4:	4603      	mov	r3, r0
 80009b6:	80fb      	strh	r3, [r7, #6]
    pwm2 = ConstrainTargetValue(pwm_value2);
 80009b8:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <UpdatePWMValues+0x1cc>)
 80009ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe46 	bl	8000650 <ConstrainTargetValue>
 80009c4:	4603      	mov	r3, r0
 80009c6:	80bb      	strh	r3, [r7, #4]
    pwm_value1 = ConstrainTargetValue(pwm_value1);
 80009c8:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <UpdatePWMValues+0x1c8>)
 80009ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe3e 	bl	8000650 <ConstrainTargetValue>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <UpdatePWMValues+0x1c8>)
 80009da:	801a      	strh	r2, [r3, #0]
    pwm_value2 = ConstrainTargetValue(pwm_value2);
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <UpdatePWMValues+0x1cc>)
 80009de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fe34 	bl	8000650 <ConstrainTargetValue>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <UpdatePWMValues+0x1cc>)
 80009ee:	801a      	strh	r2, [r3, #0]
    target_value1 = ConstrainTargetValue(target_value1);
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <UpdatePWMValues+0x1b8>)
 80009f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe2a 	bl	8000650 <ConstrainTargetValue>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <UpdatePWMValues+0x1b8>)
 8000a02:	801a      	strh	r2, [r3, #0]
    target_value2 = ConstrainTargetValue(target_value2);
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <UpdatePWMValues+0x1bc>)
 8000a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fe20 	bl	8000650 <ConstrainTargetValue>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <UpdatePWMValues+0x1bc>)
 8000a16:	801a      	strh	r2, [r3, #0]
    }

	setPWMValues_Left(pwm1);
 8000a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe93 	bl	8000748 <setPWMValues_Left>
	prev_pwm_value1 = pwm_value1;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <UpdatePWMValues+0x1c8>)
 8000a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <UpdatePWMValues+0x1d0>)
 8000a2c:	601a      	str	r2, [r3, #0]
	write_to_modbus(18,pwm_value1);
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <UpdatePWMValues+0x1c8>)
 8000a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a34:	4619      	mov	r1, r3
 8000a36:	2012      	movs	r0, #18
 8000a38:	f7ff fc5a 	bl	80002f0 <write_to_modbus>



	setPWMValues__Right(pwm2);
 8000a3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe43 	bl	80006cc <setPWMValues__Right>
	prev_pwm_value2 = pwm_value2;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <UpdatePWMValues+0x1cc>)
 8000a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <UpdatePWMValues+0x1d4>)
 8000a50:	601a      	str	r2, [r3, #0]
	write_to_modbus(19,pwm_value2);
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <UpdatePWMValues+0x1cc>)
 8000a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	2013      	movs	r0, #19
 8000a5c:	f7ff fc48 	bl	80002f0 <write_to_modbus>

}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000006 	.word	0x20000006
 8000a6c:	20000284 	.word	0x20000284
 8000a70:	20000296 	.word	0x20000296
 8000a74:	2000029a 	.word	0x2000029a
 8000a78:	200002a0 	.word	0x200002a0
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000294 	.word	0x20000294
 8000a84:	20000298 	.word	0x20000298
 8000a88:	200011a0 	.word	0x200011a0
 8000a8c:	200011a4 	.word	0x200011a4

08000a90 <Check_Stop_Pin>:

bool Check_Stop_Pin()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

    if(HAL_GPIO_ReadPin(STOP_GPIO_Port, STOP_Pin) == GPIO_PIN_RESET)
 8000a94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <Check_Stop_Pin+0x20>)
 8000a9a:	f000 ff27 	bl	80018ec <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <Check_Stop_Pin+0x18>
    {
        return false;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e000      	b.n	8000aaa <Check_Stop_Pin+0x1a>
    }

    else
    {
        return true;
 8000aa8:	2301      	movs	r3, #1
    }
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <SetTargetValues>:

 // Sayaç değişkeni

void SetTargetValues() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
    if(Check_Stop_Pin()) {
 8000aba:	f7ff ffe9 	bl	8000a90 <Check_Stop_Pin>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d057      	beq.n	8000b74 <SetTargetValues+0xc0>
        stopPinCounter = 0;  // Reset sayaç
 8000ac4:	4b39      	ldr	r3, [pc, #228]	; (8000bac <SetTargetValues+0xf8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
        }
        if(pwm_value2 <0 && pwm_value2 >-250 &&  modbusDevices[01].data[1] >=  0 && modbusDevices[01].data[5] == -300){
        	pwm_value2=modbusDevices[01].data[5];
        }
	*/
        int16_t temp_target_1 = modbusDevices[01].data[0];
 8000aca:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <SetTargetValues+0xfc>)
 8000acc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000ad0:	80fb      	strh	r3, [r7, #6]
        int16_t temp_target_2 = modbusDevices[01].data[1];
 8000ad2:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <SetTargetValues+0xfc>)
 8000ad4:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000ad8:	80bb      	strh	r3, [r7, #4]



        if(temp_target_1>0&&temp_target_1<min_pwm)temp_target_1=min_pwm;
 8000ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	dd09      	ble.n	8000af6 <SetTargetValues+0x42>
 8000ae2:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <SetTargetValues+0x100>)
 8000ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	da02      	bge.n	8000af6 <SetTargetValues+0x42>
 8000af0:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <SetTargetValues+0x100>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	80fb      	strh	r3, [r7, #6]
        if(temp_target_2>0&&temp_target_2<min_pwm)temp_target_2=min_pwm;
 8000af6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	dd09      	ble.n	8000b12 <SetTargetValues+0x5e>
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <SetTargetValues+0x100>)
 8000b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b04:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	da02      	bge.n	8000b12 <SetTargetValues+0x5e>
 8000b0c:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <SetTargetValues+0x100>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	80bb      	strh	r3, [r7, #4]

        if(temp_target_1<0&&temp_target_1>-min_pwm)temp_target_1=-min_pwm;
 8000b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da0e      	bge.n	8000b38 <SetTargetValues+0x84>
 8000b1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <SetTargetValues+0x100>)
 8000b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b24:	425b      	negs	r3, r3
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dd06      	ble.n	8000b38 <SetTargetValues+0x84>
 8000b2a:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <SetTargetValues+0x100>)
 8000b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	425b      	negs	r3, r3
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	80fb      	strh	r3, [r7, #6]
		if(temp_target_2<0&&temp_target_2>-min_pwm)temp_target_2=-min_pwm;
 8000b38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	da0e      	bge.n	8000b5e <SetTargetValues+0xaa>
 8000b40:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <SetTargetValues+0x100>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dd06      	ble.n	8000b5e <SetTargetValues+0xaa>
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <SetTargetValues+0x100>)
 8000b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	425b      	negs	r3, r3
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	80bb      	strh	r3, [r7, #4]

		target_value1=temp_target_1;
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <SetTargetValues+0x104>)
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	8013      	strh	r3, [r2, #0]

		target_value2=temp_target_2;
 8000b64:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <SetTargetValues+0x108>)
 8000b66:	88bb      	ldrh	r3, [r7, #4]
 8000b68:	8013      	strh	r3, [r2, #0]


        write_to_modbus(14,1);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	200e      	movs	r0, #14
 8000b6e:	f7ff fbbf 	bl	80002f0 <write_to_modbus>
            target_value1 = 0;
            target_value2 = 0;
            write_to_modbus(14,0);
        }
    }
}
 8000b72:	e017      	b.n	8000ba4 <SetTargetValues+0xf0>
        stopPinCounter++;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <SetTargetValues+0xf8>)
 8000b76:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <SetTargetValues+0xf8>)
 8000b84:	701a      	strb	r2, [r3, #0]
        if (stopPinCounter >= 5) {
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <SetTargetValues+0xf8>)
 8000b88:	f993 3000 	ldrsb.w	r3, [r3]
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	dd09      	ble.n	8000ba4 <SetTargetValues+0xf0>
            target_value1 = 0;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <SetTargetValues+0x104>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	801a      	strh	r2, [r3, #0]
            target_value2 = 0;
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <SetTargetValues+0x108>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	801a      	strh	r2, [r3, #0]
            write_to_modbus(14,0);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	200e      	movs	r0, #14
 8000ba0:	f7ff fba6 	bl	80002f0 <write_to_modbus>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000282 	.word	0x20000282
 8000bb0:	200002a0 	.word	0x200002a0
 8000bb4:	20000284 	.word	0x20000284
 8000bb8:	20000296 	.word	0x20000296
 8000bbc:	2000029a 	.word	0x2000029a

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f000 fb9e 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f8a6 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f000 f9f0 	bl	8000fb0 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000bd0:	f000 f94a 	bl	8000e68 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000bd4:	f008 f886 	bl	8008ce4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000bd8:	f000 f8f8 	bl	8000dcc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000bdc:	f000 f9be 	bl	8000f5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initialize_device(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f7ff fb5f 	bl	80002a4 <initialize_device>
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000be6:	483d      	ldr	r0, [pc, #244]	; (8000cdc <main+0x11c>)
 8000be8:	f003 f90e 	bl	8003e08 <HAL_TIM_Base_Start_IT>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <main+0x36>
  {
    /* Starting Error */
    Error_Handler();
 8000bf2:	f000 fa21 	bl	8001038 <Error_Handler>
  }
  MX_USB_DEVICE_Init();
 8000bf6:	f008 f875 	bl	8008ce4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  SetTargetValues();
 8000bfa:	f7ff ff5b 	bl	8000ab4 <SetTargetValues>

      if (new_data_received) {
 8000bfe:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <main+0x120>)
 8000c00:	f993 3000 	ldrsb.w	r3, [r3]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d03d      	beq.n	8000c84 <main+0xc4>
    	  counter_timer =  HAL_GetTick();;
 8000c08:	f000 fbd4 	bl	80013b4 <HAL_GetTick>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <main+0x124>)
 8000c12:	601a      	str	r2, [r3, #0]
    	  if(function_code == 6) {
 8000c14:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <main+0x128>)
 8000c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d10c      	bne.n	8000c38 <main+0x78>
    		  write_command(slave_address, starting_address, length);
 8000c1e:	4b33      	ldr	r3, [pc, #204]	; (8000cec <main+0x12c>)
 8000c20:	f993 3000 	ldrsb.w	r3, [r3]
 8000c24:	4a32      	ldr	r2, [pc, #200]	; (8000cf0 <main+0x130>)
 8000c26:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000c2a:	4a32      	ldr	r2, [pc, #200]	; (8000cf4 <main+0x134>)
 8000c2c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fb79 	bl	8000328 <write_command>
 8000c36:	e01f      	b.n	8000c78 <main+0xb8>
          } else if(function_code == 16) {
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <main+0x128>)
 8000c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3e:	2b10      	cmp	r3, #16
 8000c40:	d10c      	bne.n	8000c5c <main+0x9c>
        	  write_multiple_command(slave_address, starting_address, length,value);
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <main+0x12c>)
 8000c44:	f993 0000 	ldrsb.w	r0, [r3]
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <main+0x130>)
 8000c4a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <main+0x134>)
 8000c50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <main+0x138>)
 8000c56:	f7ff fb81 	bl	800035c <write_multiple_command>
 8000c5a:	e00d      	b.n	8000c78 <main+0xb8>
          }else {
        	  read_command(slave_address, starting_address, length, crc);
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <main+0x12c>)
 8000c5e:	f993 0000 	ldrsb.w	r0, [r3]
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <main+0x130>)
 8000c64:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <main+0x134>)
 8000c6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <main+0x13c>)
 8000c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c74:	f7ff fbb0 	bl	80003d8 <read_command>
    	  }
    	  start=1;
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <main+0x140>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
          new_data_received = 0;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <main+0x120>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
      }
      limit = modbusDevices[01].data[15];
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <main+0x144>)
 8000c86:	f9b3 211e 	ldrsh.w	r2, [r3, #286]	; 0x11e
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <main+0x148>)
 8000c8c:	801a      	strh	r2, [r3, #0]
      pwm_min = modbusDevices[01].data[16];
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <main+0x144>)
 8000c90:	f9b3 2120 	ldrsh.w	r2, [r3, #288]	; 0x120
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <main+0x14c>)
 8000c96:	801a      	strh	r2, [r3, #0]
      pwm_min_angular = modbusDevices[01].data[17];
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <main+0x144>)
 8000c9a:	f9b3 2122 	ldrsh.w	r2, [r3, #290]	; 0x122
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <main+0x150>)
 8000ca0:	801a      	strh	r2, [r3, #0]

      if(( HAL_GetTick()-counter_timer)>no_response_wait_time ){
 8000ca2:	f000 fb87 	bl	80013b4 <HAL_GetTick>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <main+0x124>)
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <main+0x154>)
 8000cb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d9a0      	bls.n	8000bfa <main+0x3a>
      modbusDevices[01].data[0]=0;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <main+0x144>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
      modbusDevices[01].data[1]=0;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <main+0x144>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
      modbusDevices[01].data[2]=0;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <main+0x144>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
      modbusDevices[01].data[3]=0;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <main+0x144>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	  SetTargetValues();
 8000cd8:	e78f      	b.n	8000bfa <main+0x3a>
 8000cda:	bf00      	nop
 8000cdc:	200001a4 	.word	0x200001a4
 8000ce0:	20000280 	.word	0x20000280
 8000ce4:	2000029c 	.word	0x2000029c
 8000ce8:	2000027e 	.word	0x2000027e
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	20000292 	.word	0x20000292
 8000cf4:	2000027c 	.word	0x2000027c
 8000cf8:	20000288 	.word	0x20000288
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000281 	.word	0x20000281
 8000d04:	200002a0 	.word	0x200002a0
 8000d08:	20000002 	.word	0x20000002
 8000d0c:	20000006 	.word	0x20000006
 8000d10:	20000008 	.word	0x20000008
 8000d14:	2000000a 	.word	0x2000000a

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	; 0x50
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d22:	2228      	movs	r2, #40	; 0x28
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f008 fc7e 	bl	8009628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fb34 	bl	80033dc <HAL_RCC_OscConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d7a:	f000 f95d 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7e:	230f      	movs	r3, #15
 8000d80:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fda0 	bl	80038e0 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000da6:	f000 f947 	bl	8001038 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000daa:	2310      	movs	r3, #16
 8000dac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 ff21 	bl	8003bfc <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dc0:	f000 f93a 	bl	8001038 <Error_Handler>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3750      	adds	r7, #80	; 0x50
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_TIM3_Init+0x94>)
 8000dea:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <MX_TIM3_Init+0x98>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_TIM3_Init+0x94>)
 8000df0:	2278      	movs	r2, #120	; 0x78
 8000df2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_TIM3_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_TIM3_Init+0x94>)
 8000dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_TIM3_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_TIM3_Init+0x94>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e0e:	4814      	ldr	r0, [pc, #80]	; (8000e60 <MX_TIM3_Init+0x94>)
 8000e10:	f002 ffaa 	bl	8003d68 <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f000 f90d 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_TIM3_Init+0x94>)
 8000e2c:	f003 fa40 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e36:	f000 f8ff 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <MX_TIM3_Init+0x94>)
 8000e48:	f003 fdb2 	bl	80049b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e52:	f000 f8f1 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001a4 	.word	0x200001a4
 8000e64:	40000400 	.word	0x40000400

08000e68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6e:	f107 0320 	add.w	r3, r7, #32
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e8a:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000e8c:	4a32      	ldr	r2, [pc, #200]	; (8000f58 <MX_TIM4_Init+0xf0>)
 8000e8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5;
 8000e90:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000e92:	2205      	movs	r2, #5
 8000e94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000eb0:	4828      	ldr	r0, [pc, #160]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000eb2:	f002 fffb 	bl	8003eac <HAL_TIM_PWM_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000ebc:	f000 f8bc 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4821      	ldr	r0, [pc, #132]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000ed0:	f003 fd6e 	bl	80049b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000eda:	f000 f8ad 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ede:	2360      	movs	r3, #96	; 0x60
 8000ee0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4817      	ldr	r0, [pc, #92]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000ef6:	f003 f919 	bl	800412c <HAL_TIM_PWM_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000f00:	f000 f89a 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2204      	movs	r2, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4812      	ldr	r0, [pc, #72]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000f0c:	f003 f90e 	bl	800412c <HAL_TIM_PWM_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f16:	f000 f88f 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000f22:	f003 f903 	bl	800412c <HAL_TIM_PWM_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000f2c:	f000 f884 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	220c      	movs	r2, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000f38:	f003 f8f8 	bl	800412c <HAL_TIM_PWM_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000f42:	f000 f879 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <MX_TIM4_Init+0xec>)
 8000f48:	f000 f8f2 	bl	8001130 <HAL_TIM_MspPostInit>

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001ec 	.word	0x200001ec
 8000f58:	40000800 	.word	0x40000800

08000f5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_USART1_UART_Init+0x50>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f94:	f003 fd7c 	bl	8004a90 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f9e:	f000 f84b 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000234 	.word	0x20000234
 8000fac:	40013800 	.word	0x40013800

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_GPIO_Init+0x80>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <MX_GPIO_Init+0x80>)
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_GPIO_Init+0x80>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0320 	and.w	r3, r3, #32
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_GPIO_Init+0x80>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <MX_GPIO_Init+0x80>)
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_GPIO_Init+0x80>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_GPIO_Init+0x80>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <MX_GPIO_Init+0x80>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <MX_GPIO_Init+0x80>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : STOP_Pin */
  GPIO_InitStruct.Pin = STOP_Pin;
 800100c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STOP_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4619      	mov	r1, r3
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_GPIO_Init+0x84>)
 8001022:	f000 fadf 	bl	80015e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001026:	bf00      	nop
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	40010c00 	.word	0x40010c00

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_MspInit+0x5c>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_MspInit+0x5c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_MspInit+0x5c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_MspInit+0x5c>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_MspInit+0x5c>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_MspInit+0x5c>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_MspInit+0x60>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_MspInit+0x60>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000

080010a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_TIM_Base_MspInit+0x44>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d113      	bne.n	80010e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_TIM_Base_MspInit+0x48>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <HAL_TIM_Base_MspInit+0x48>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_TIM_Base_MspInit+0x48>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	201d      	movs	r0, #29
 80010d8:	f000 fa4d 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010dc:	201d      	movs	r0, #29
 80010de:	f000 fa66 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40000400 	.word	0x40000400
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_TIM_PWM_MspInit+0x34>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10b      	bne.n	800111e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_TIM_PWM_MspInit+0x38>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_TIM_PWM_MspInit+0x38>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_TIM_PWM_MspInit+0x38>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40000800 	.word	0x40000800
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_TIM_MspPostInit+0x5c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d118      	bne.n	8001182 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_TIM_MspPostInit+0x60>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <HAL_TIM_MspPostInit+0x60>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_TIM_MspPostInit+0x60>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001168:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800116c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2302      	movs	r3, #2
 8001174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_TIM_MspPostInit+0x64>)
 800117e:	f000 fa31 	bl	80015e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001182:	bf00      	nop
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40000800 	.word	0x40000800
 8001190:	40021000 	.word	0x40021000
 8001194:	40010c00 	.word	0x40010c00

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <HAL_UART_MspInit+0x8c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d131      	bne.n	800121c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <HAL_UART_MspInit+0x94>)
 80011fe:	f000 f9f1 	bl	80015e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_UART_MspInit+0x94>)
 8001218:	f000 f9e4 	bl	80015e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40013800 	.word	0x40013800
 8001228:	40021000 	.word	0x40021000
 800122c:	40010800 	.word	0x40010800

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f000 f88b 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001286:	f000 fc64 	bl	8001b52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20001e74 	.word	0x20001e74

08001294 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <TIM3_IRQHandler+0x14>)
 800129a:	f002 fe56 	bl	8003f4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  UpdatePWMValues();
 800129e:	f7ff fb0b 	bl	80008b8 <UpdatePWMValues>
  /* USER CODE END TIM3_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001a4 	.word	0x200001a4

080012ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b8:	f7ff fff8 	bl	80012ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012be:	490c      	ldr	r1, [pc, #48]	; (80012f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012d4:	4c09      	ldr	r4, [pc, #36]	; (80012fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e2:	f008 f9a9 	bl	8009638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012e6:	f7ff fc6b 	bl	8000bc0 <main>
  bx lr
 80012ea:	4770      	bx	lr
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80012f4:	08009914 	.word	0x08009914
  ldr r2, =_sbss
 80012f8:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80012fc:	2000236c 	.word	0x2000236c

08001300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_2_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x28>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x28>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f923 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	200f      	movs	r0, #15
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fe90 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f93b 	bl	80015ca <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f903 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000000c 	.word	0x2000000c
 8001388:	20000014 	.word	0x20000014
 800138c:	20000010 	.word	0x20000010

08001390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_IncTick+0x1c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x20>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <HAL_IncTick+0x20>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000014 	.word	0x20000014
 80013b0:	200011a8 	.word	0x200011a8

080013b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <HAL_GetTick+0x10>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	200011a8 	.word	0x200011a8

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4906      	ldr	r1, [pc, #24]	; (8001460 <__NVIC_EnableIRQ+0x34>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff90 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff2d 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff42 	bl	8001410 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff90 	bl	80014b8 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5f 	bl	8001464 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff35 	bl	800142c <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b08b      	sub	sp, #44	; 0x2c
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f6:	e169      	b.n	80018cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015f8:	2201      	movs	r2, #1
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	429a      	cmp	r2, r3
 8001612:	f040 8158 	bne.w	80018c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4a9a      	ldr	r2, [pc, #616]	; (8001884 <HAL_GPIO_Init+0x2a0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d05e      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001620:	4a98      	ldr	r2, [pc, #608]	; (8001884 <HAL_GPIO_Init+0x2a0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d875      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 8001626:	4a98      	ldr	r2, [pc, #608]	; (8001888 <HAL_GPIO_Init+0x2a4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d058      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 800162c:	4a96      	ldr	r2, [pc, #600]	; (8001888 <HAL_GPIO_Init+0x2a4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d86f      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 8001632:	4a96      	ldr	r2, [pc, #600]	; (800188c <HAL_GPIO_Init+0x2a8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d052      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001638:	4a94      	ldr	r2, [pc, #592]	; (800188c <HAL_GPIO_Init+0x2a8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d869      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 800163e:	4a94      	ldr	r2, [pc, #592]	; (8001890 <HAL_GPIO_Init+0x2ac>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d04c      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001644:	4a92      	ldr	r2, [pc, #584]	; (8001890 <HAL_GPIO_Init+0x2ac>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d863      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 800164a:	4a92      	ldr	r2, [pc, #584]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d046      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001650:	4a90      	ldr	r2, [pc, #576]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d85d      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 8001656:	2b12      	cmp	r3, #18
 8001658:	d82a      	bhi.n	80016b0 <HAL_GPIO_Init+0xcc>
 800165a:	2b12      	cmp	r3, #18
 800165c:	d859      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <HAL_GPIO_Init+0x80>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	080016df 	.word	0x080016df
 8001668:	080016b9 	.word	0x080016b9
 800166c:	080016cb 	.word	0x080016cb
 8001670:	0800170d 	.word	0x0800170d
 8001674:	08001713 	.word	0x08001713
 8001678:	08001713 	.word	0x08001713
 800167c:	08001713 	.word	0x08001713
 8001680:	08001713 	.word	0x08001713
 8001684:	08001713 	.word	0x08001713
 8001688:	08001713 	.word	0x08001713
 800168c:	08001713 	.word	0x08001713
 8001690:	08001713 	.word	0x08001713
 8001694:	08001713 	.word	0x08001713
 8001698:	08001713 	.word	0x08001713
 800169c:	08001713 	.word	0x08001713
 80016a0:	08001713 	.word	0x08001713
 80016a4:	08001713 	.word	0x08001713
 80016a8:	080016c1 	.word	0x080016c1
 80016ac:	080016d5 	.word	0x080016d5
 80016b0:	4a79      	ldr	r2, [pc, #484]	; (8001898 <HAL_GPIO_Init+0x2b4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016b6:	e02c      	b.n	8001712 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	623b      	str	r3, [r7, #32]
          break;
 80016be:	e029      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	3304      	adds	r3, #4
 80016c6:	623b      	str	r3, [r7, #32]
          break;
 80016c8:	e024      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	3308      	adds	r3, #8
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e01f      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	330c      	adds	r3, #12
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e01a      	b.n	8001714 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016e6:	2304      	movs	r3, #4
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e013      	b.n	8001714 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f4:	2308      	movs	r3, #8
 80016f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	611a      	str	r2, [r3, #16]
          break;
 80016fe:	e009      	b.n	8001714 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001700:	2308      	movs	r3, #8
 8001702:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	615a      	str	r2, [r3, #20]
          break;
 800170a:	e003      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x130>
          break;
 8001712:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2bff      	cmp	r3, #255	; 0xff
 8001718:	d801      	bhi.n	800171e <HAL_GPIO_Init+0x13a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	e001      	b.n	8001722 <HAL_GPIO_Init+0x13e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3304      	adds	r3, #4
 8001722:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2bff      	cmp	r3, #255	; 0xff
 8001728:	d802      	bhi.n	8001730 <HAL_GPIO_Init+0x14c>
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	e002      	b.n	8001736 <HAL_GPIO_Init+0x152>
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	3b08      	subs	r3, #8
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	210f      	movs	r1, #15
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	401a      	ands	r2, r3
 8001748:	6a39      	ldr	r1, [r7, #32]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	431a      	orrs	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80b1 	beq.w	80018c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001764:	4b4d      	ldr	r3, [pc, #308]	; (800189c <HAL_GPIO_Init+0x2b8>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a4c      	ldr	r2, [pc, #304]	; (800189c <HAL_GPIO_Init+0x2b8>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_GPIO_Init+0x2b8>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800177c:	4a48      	ldr	r2, [pc, #288]	; (80018a0 <HAL_GPIO_Init+0x2bc>)
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a40      	ldr	r2, [pc, #256]	; (80018a4 <HAL_GPIO_Init+0x2c0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d013      	beq.n	80017d0 <HAL_GPIO_Init+0x1ec>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a3f      	ldr	r2, [pc, #252]	; (80018a8 <HAL_GPIO_Init+0x2c4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00d      	beq.n	80017cc <HAL_GPIO_Init+0x1e8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a3e      	ldr	r2, [pc, #248]	; (80018ac <HAL_GPIO_Init+0x2c8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0x1e4>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a3d      	ldr	r2, [pc, #244]	; (80018b0 <HAL_GPIO_Init+0x2cc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_Init+0x1e0>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e006      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017c4:	2304      	movs	r3, #4
 80017c6:	e004      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017d0:	2300      	movs	r3, #0
 80017d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d4:	f002 0203 	and.w	r2, r2, #3
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	4093      	lsls	r3, r2
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017e2:	492f      	ldr	r1, [pc, #188]	; (80018a0 <HAL_GPIO_Init+0x2bc>)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	492c      	ldr	r1, [pc, #176]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	4928      	ldr	r1, [pc, #160]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001814:	4013      	ands	r3, r2
 8001816:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	4922      	ldr	r1, [pc, #136]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	491e      	ldr	r1, [pc, #120]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800183c:	4013      	ands	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	4918      	ldr	r1, [pc, #96]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	43db      	mvns	r3, r3
 8001862:	4914      	ldr	r1, [pc, #80]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001864:	4013      	ands	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d021      	beq.n	80018b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e021      	b.n	80018c6 <HAL_GPIO_Init+0x2e2>
 8001882:	bf00      	nop
 8001884:	10320000 	.word	0x10320000
 8001888:	10310000 	.word	0x10310000
 800188c:	10220000 	.word	0x10220000
 8001890:	10210000 	.word	0x10210000
 8001894:	10120000 	.word	0x10120000
 8001898:	10110000 	.word	0x10110000
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40010800 	.word	0x40010800
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40011400 	.word	0x40011400
 80018b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_GPIO_Init+0x304>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	43db      	mvns	r3, r3
 80018c0:	4909      	ldr	r1, [pc, #36]	; (80018e8 <HAL_GPIO_Init+0x304>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	3301      	adds	r3, #1
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f47f ae8e 	bne.w	80015f8 <HAL_GPIO_Init+0x14>
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	372c      	adds	r7, #44	; 0x2c
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	e001      	b.n	800190e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0e8      	b.n	8001afe <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d106      	bne.n	8001946 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f007 fbc7 	bl	80090d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2203      	movs	r2, #3
 800194a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fae0 	bl	8004f1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3304      	adds	r3, #4
 8001966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001968:	f003 fab6 	bl	8004ed8 <USB_CoreInit>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2202      	movs	r2, #2
 8001976:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0bf      	b.n	8001afe <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fae4 	bl	8004f52 <USB_SetCurrentMode>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0b0      	b.n	8001afe <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e03e      	b.n	8001a20 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	3311      	adds	r3, #17
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	3310      	adds	r3, #16
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	3313      	adds	r3, #19
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	440b      	add	r3, r1
 80019ec:	3320      	adds	r3, #32
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	3324      	adds	r3, #36	; 0x24
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	791b      	ldrb	r3, [r3, #4]
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3bb      	bcc.n	80019a2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	e044      	b.n	8001aba <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	791b      	ldrb	r3, [r3, #4]
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3b5      	bcc.n	8001a30 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3304      	adds	r3, #4
 8001acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ace:	f003 fa4c 	bl	8004f6a <USB_DevInit>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e00c      	b.n	8001afe <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f005 fccb 	bl	8007492 <USB_DevDisconnect>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_PCD_Start+0x16>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e016      	b.n	8001b4a <HAL_PCD_Start+0x44>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 f9e2 	bl	8004ef2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b2e:	2101      	movs	r1, #1
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f007 fd42 	bl	80095ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f005 fc9f 	bl	800747e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b088      	sub	sp, #32
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 fca1 	bl	80074a6 <USB_ReadInterrupts>
 8001b64:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fb1a 	bl	80021aa <PCD_EP_ISR_Handler>

    return;
 8001b76:	e119      	b.n	8001dac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d013      	beq.n	8001baa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b94:	b292      	uxth	r2, r2
 8001b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f007 fb15 	bl	80091ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f905 	bl	8001db2 <HAL_PCD_SetAddress>

    return;
 8001ba8:	e100      	b.n	8001dac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00c      	beq.n	8001bce <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bc6:	b292      	uxth	r2, r2
 8001bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001bcc:	e0ee      	b.n	8001dac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bea:	b292      	uxth	r2, r2
 8001bec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001bf0:	e0dc      	b.n	8001dac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d027      	beq.n	8001c4c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0204 	bic.w	r2, r2, #4
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0208 	bic.w	r2, r2, #8
 8001c26:	b292      	uxth	r2, r2
 8001c28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f007 fb05 	bl	800923c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c44:	b292      	uxth	r2, r2
 8001c46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c4a:	e0af      	b.n	8001dac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8083 	beq.w	8001d5e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	77fb      	strb	r3, [r7, #31]
 8001c5c:	e010      	b.n	8001c80 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	7ffb      	ldrb	r3, [r7, #31]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	441a      	add	r2, r3
 8001c6a:	7ffb      	ldrb	r3, [r7, #31]
 8001c6c:	8812      	ldrh	r2, [r2, #0]
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	3320      	adds	r3, #32
 8001c74:	443b      	add	r3, r7
 8001c76:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001c7a:	7ffb      	ldrb	r3, [r7, #31]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	77fb      	strb	r3, [r7, #31]
 8001c80:	7ffb      	ldrb	r3, [r7, #31]
 8001c82:	2b07      	cmp	r3, #7
 8001c84:	d9eb      	bls.n	8001c5e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cb6:	bf00      	nop
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f6      	beq.n	8001cb8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	77fb      	strb	r3, [r7, #31]
 8001ce6:	e00f      	b.n	8001d08 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ce8:	7ffb      	ldrb	r3, [r7, #31]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	7ffa      	ldrb	r2, [r7, #31]
 8001cf2:	0092      	lsls	r2, r2, #2
 8001cf4:	440a      	add	r2, r1
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	3320      	adds	r3, #32
 8001cfa:	443b      	add	r3, r7
 8001cfc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001d00:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	3301      	adds	r3, #1
 8001d06:	77fb      	strb	r3, [r7, #31]
 8001d08:	7ffb      	ldrb	r3, [r7, #31]
 8001d0a:	2b07      	cmp	r3, #7
 8001d0c:	d9ec      	bls.n	8001ce8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0208 	orr.w	r2, r2, #8
 8001d20:	b292      	uxth	r2, r2
 8001d22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d38:	b292      	uxth	r2, r2
 8001d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0204 	orr.w	r2, r2, #4
 8001d50:	b292      	uxth	r2, r2
 8001d52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f007 fa56 	bl	8009208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d5c:	e026      	b.n	8001dac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00f      	beq.n	8001d88 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f007 fa14 	bl	80091ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d86:	e011      	b.n	8001dac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da4:	b292      	uxth	r2, r2
 8001da6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001daa:	bf00      	nop
  }
}
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_PCD_SetAddress+0x1a>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e012      	b.n	8001df2 <HAL_PCD_SetAddress+0x40>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 fb38 	bl	8007458 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	4608      	mov	r0, r1
 8001e04:	4611      	mov	r1, r2
 8001e06:	461a      	mov	r2, r3
 8001e08:	4603      	mov	r3, r0
 8001e0a:	70fb      	strb	r3, [r7, #3]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	803b      	strh	r3, [r7, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da0e      	bge.n	8001e3e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 0207 	and.w	r2, r3, #7
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	3310      	adds	r3, #16
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4413      	add	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	705a      	strb	r2, [r3, #1]
 8001e3c:	e00e      	b.n	8001e5c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 0207 	and.w	r2, r3, #7
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e68:	883a      	ldrh	r2, [r7, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	78ba      	ldrb	r2, [r7, #2]
 8001e72:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e74:	78bb      	ldrb	r3, [r7, #2]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d102      	bne.n	8001e80 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_PCD_EP_Open+0x94>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e00e      	b.n	8001eac <HAL_PCD_EP_Open+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 f881 	bl	8004fa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da0e      	bge.n	8001ee6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 0207 	and.w	r2, r3, #7
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	3310      	adds	r3, #16
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	705a      	strb	r2, [r3, #1]
 8001ee4:	e00e      	b.n	8001f04 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 0207 	and.w	r2, r3, #7
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_PCD_EP_Close+0x6a>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e00e      	b.n	8001f3c <HAL_PCD_EP_Close+0x88>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68f9      	ldr	r1, [r7, #12]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 fbf9 	bl	8005724 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	460b      	mov	r3, r1
 8001f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f54:	7afb      	ldrb	r3, [r7, #11]
 8001f56:	f003 0207 	and.w	r2, r3, #7
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4413      	add	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2200      	movs	r2, #0
 8001f82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6979      	ldr	r1, [r7, #20]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fdb0 	bl	8005afc <USB_EPStartXfer>

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	f003 0207 	and.w	r2, r3, #7
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001fc8:	681b      	ldr	r3, [r3, #0]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
 8001fe6:	f003 0207 	and.w	r2, r3, #7
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	3310      	adds	r3, #16
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2201      	movs	r2, #1
 800201e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	b2da      	uxtb	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6979      	ldr	r1, [r7, #20]
 8002032:	4618      	mov	r0, r3
 8002034:	f003 fd62 	bl	8005afc <USB_EPStartXfer>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	7912      	ldrb	r2, [r2, #4]
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e04c      	b.n	80020fa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002064:	2b00      	cmp	r3, #0
 8002066:	da0e      	bge.n	8002086 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 0207 	and.w	r2, r3, #7
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	3310      	adds	r3, #16
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2201      	movs	r2, #1
 8002082:	705a      	strb	r2, [r3, #1]
 8002084:	e00c      	b.n	80020a0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_PCD_EP_SetStall+0x7e>
 80020bc:	2302      	movs	r3, #2
 80020be:	e01c      	b.n	80020fa <HAL_PCD_EP_SetStall+0xb8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 f8c5 	bl	800725e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d108      	bne.n	80020f0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80020e8:	4619      	mov	r1, r3
 80020ea:	4610      	mov	r0, r2
 80020ec:	f005 f9ea 	bl	80074c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	7912      	ldrb	r2, [r2, #4]
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e040      	b.n	80021a2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002124:	2b00      	cmp	r3, #0
 8002126:	da0e      	bge.n	8002146 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 0207 	and.w	r2, r3, #7
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	3310      	adds	r3, #16
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	705a      	strb	r2, [r3, #1]
 8002144:	e00e      	b.n	8002164 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 0207 	and.w	r2, r3, #7
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_PCD_EP_ClrStall+0x82>
 8002180:	2302      	movs	r3, #2
 8002182:	e00e      	b.n	80021a2 <HAL_PCD_EP_ClrStall+0xa0>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68f9      	ldr	r1, [r7, #12]
 8002192:	4618      	mov	r0, r3
 8002194:	f005 f8b3 	bl	80072fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b096      	sub	sp, #88	; 0x58
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021b2:	e3bc      	b.n	800292e <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80021ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 8176 	bne.w	80024c4 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d14f      	bne.n	8002284 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f4:	81fb      	strh	r3, [r7, #14]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	89fb      	ldrh	r3, [r7, #14]
 80021fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002204:	b29b      	uxth	r3, r3
 8002206:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3310      	adds	r3, #16
 800220c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002216:	b29b      	uxth	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	3302      	adds	r3, #2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	4413      	add	r3, r2
 800222c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002238:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800223a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	441a      	add	r2, r3
 8002244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002246:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002248:	2100      	movs	r1, #0
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f006 ff95 	bl	800917a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7b5b      	ldrb	r3, [r3, #13]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8369 	beq.w	800292e <PCD_EP_ISR_Handler+0x784>
 800225c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b00      	cmp	r3, #0
 8002262:	f040 8364 	bne.w	800292e <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7b5b      	ldrb	r3, [r3, #13]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002270:	b2da      	uxtb	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	b292      	uxth	r2, r2
 8002278:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	735a      	strb	r2, [r3, #13]
 8002282:	e354      	b.n	800292e <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800228a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002296:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800229a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d034      	beq.n	800230c <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	3306      	adds	r3, #6
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022cc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80022d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022da:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022de:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	f005 f93f 	bl	8007564 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022f2:	4013      	ands	r3, r2
 80022f4:	823b      	strh	r3, [r7, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	8a3a      	ldrh	r2, [r7, #16]
 80022fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002300:	b292      	uxth	r2, r2
 8002302:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f006 ff0b 	bl	8009120 <HAL_PCD_SetupStageCallback>
 800230a:	e310      	b.n	800292e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800230c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002310:	2b00      	cmp	r3, #0
 8002312:	f280 830c 	bge.w	800292e <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b29a      	uxth	r2, r3
 800231e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002322:	4013      	ands	r3, r2
 8002324:	83fb      	strh	r3, [r7, #30]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	8bfa      	ldrh	r2, [r7, #30]
 800232c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002330:	b292      	uxth	r2, r2
 8002332:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	3306      	adds	r3, #6
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800235c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d019      	beq.n	800239c <PCD_EP_ISR_Handler+0x1f2>
 8002368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d015      	beq.n	800239c <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002376:	6959      	ldr	r1, [r3, #20]
 8002378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800237c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002380:	b29b      	uxth	r3, r3
 8002382:	f005 f8ef 	bl	8007564 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	441a      	add	r2, r3
 8002390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002392:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002394:	2100      	movs	r1, #0
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f006 fed4 	bl	8009144 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80023a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 82bd 	bne.w	800292e <PCD_EP_ISR_Handler+0x784>
 80023b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80023bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023c0:	f000 82b5 	beq.w	800292e <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	4413      	add	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b3e      	cmp	r3, #62	; 0x3e
 80023fa:	d91d      	bls.n	8002438 <PCD_EP_ISR_Handler+0x28e>
 80023fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	647b      	str	r3, [r7, #68]	; 0x44
 8002404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <PCD_EP_ISR_Handler+0x26c>
 8002410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002412:	3b01      	subs	r3, #1
 8002414:	647b      	str	r3, [r7, #68]	; 0x44
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29a      	uxth	r2, r3
 800241c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241e:	b29b      	uxth	r3, r3
 8002420:	029b      	lsls	r3, r3, #10
 8002422:	b29b      	uxth	r3, r3
 8002424:	4313      	orrs	r3, r2
 8002426:	b29b      	uxth	r3, r3
 8002428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002430:	b29a      	uxth	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	e026      	b.n	8002486 <PCD_EP_ISR_Handler+0x2dc>
 8002438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <PCD_EP_ISR_Handler+0x2ac>
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244e:	b29a      	uxth	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	e017      	b.n	8002486 <PCD_EP_ISR_Handler+0x2dc>
 8002456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	085b      	lsrs	r3, r3, #1
 800245c:	647b      	str	r3, [r7, #68]	; 0x44
 800245e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <PCD_EP_ISR_Handler+0x2c6>
 800246a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246c:	3301      	adds	r3, #1
 800246e:	647b      	str	r3, [r7, #68]	; 0x44
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29a      	uxth	r2, r3
 8002476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002478:	b29b      	uxth	r3, r3
 800247a:	029b      	lsls	r3, r3, #10
 800247c:	b29b      	uxth	r3, r3
 800247e:	4313      	orrs	r3, r2
 8002480:	b29a      	uxth	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002496:	827b      	strh	r3, [r7, #18]
 8002498:	8a7b      	ldrh	r3, [r7, #18]
 800249a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800249e:	827b      	strh	r3, [r7, #18]
 80024a0:	8a7b      	ldrh	r3, [r7, #18]
 80024a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024a6:	827b      	strh	r3, [r7, #18]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	8a7b      	ldrh	r3, [r7, #18]
 80024ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024be:	b29b      	uxth	r3, r3
 80024c0:	8013      	strh	r3, [r2, #0]
 80024c2:	e234      	b.n	800292e <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024d8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f280 80fc 	bge.w	80026da <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024f8:	4013      	ands	r3, r2
 80024fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002510:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002514:	b292      	uxth	r2, r2
 8002516:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002518:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800252e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002530:	7b1b      	ldrb	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d125      	bne.n	8002582 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	3306      	adds	r3, #6
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	4413      	add	r3, r2
 8002554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002562:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8092 	beq.w	8002690 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002572:	6959      	ldr	r1, [r3, #20]
 8002574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002576:	88da      	ldrh	r2, [r3, #6]
 8002578:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800257c:	f004 fff2 	bl	8007564 <USB_ReadPMA>
 8002580:	e086      	b.n	8002690 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002584:	78db      	ldrb	r3, [r3, #3]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d10a      	bne.n	80025a0 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800258a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800258e:	461a      	mov	r2, r3
 8002590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f9d9 	bl	800294a <HAL_PCD_EP_DB_Receive>
 8002598:	4603      	mov	r3, r0
 800259a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800259e:	e077      	b.n	8002690 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	441a      	add	r2, r3
 80025cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d024      	beq.n	8002648 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002606:	b29b      	uxth	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	3302      	adds	r3, #2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002626:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800262a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800262e:	2b00      	cmp	r3, #0
 8002630:	d02e      	beq.n	8002690 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002638:	6959      	ldr	r1, [r3, #20]
 800263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263c:	891a      	ldrh	r2, [r3, #8]
 800263e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002642:	f004 ff8f 	bl	8007564 <USB_ReadPMA>
 8002646:	e023      	b.n	8002690 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002650:	b29b      	uxth	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	3306      	adds	r3, #6
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	4413      	add	r3, r2
 8002666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002670:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002674:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002682:	6959      	ldr	r1, [r3, #20]
 8002684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002686:	895a      	ldrh	r2, [r3, #10]
 8002688:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800268c:	f004 ff6a 	bl	8007564 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002698:	441a      	add	r2, r3
 800269a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800269e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026a6:	441a      	add	r2, r3
 80026a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <PCD_EP_ISR_Handler+0x516>
 80026b4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80026b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d206      	bcs.n	80026ce <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f006 fd3c 	bl	8009144 <HAL_PCD_DataOutStageCallback>
 80026cc:	e005      	b.n	80026da <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 fa11 	bl	8005afc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8123 	beq.w	800292e <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 80026e8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	3310      	adds	r3, #16
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	441a      	add	r2, r3
 8002728:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800272c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002734:	b29b      	uxth	r3, r3
 8002736:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273a:	78db      	ldrb	r3, [r3, #3]
 800273c:	2b01      	cmp	r3, #1
 800273e:	f040 80a2 	bne.w	8002886 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8002742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274a:	7b1b      	ldrb	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8093 	beq.w	8002878 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002752:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d046      	beq.n	80027ec <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800275e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002760:	785b      	ldrb	r3, [r3, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d126      	bne.n	80027b4 <PCD_EP_ISR_Handler+0x60a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	4413      	add	r3, r2
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	011a      	lsls	r2, r3, #4
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	4413      	add	r3, r2
 8002788:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002798:	b29a      	uxth	r2, r3
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	e061      	b.n	8002878 <PCD_EP_ISR_Handler+0x6ce>
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d15d      	bne.n	8002878 <PCD_EP_ISR_Handler+0x6ce>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	4413      	add	r3, r2
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	011a      	lsls	r2, r3, #4
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	4413      	add	r3, r2
 80027de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	2200      	movs	r2, #0
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	e045      	b.n	8002878 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f4:	785b      	ldrb	r3, [r3, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d126      	bne.n	8002848 <PCD_EP_ISR_Handler+0x69e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002808:	b29b      	uxth	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	4413      	add	r3, r2
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
 8002812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	011a      	lsls	r2, r3, #4
 8002818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281a:	4413      	add	r3, r2
 800281c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800282c:	b29a      	uxth	r2, r3
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002840:	b29a      	uxth	r2, r3
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	e017      	b.n	8002878 <PCD_EP_ISR_Handler+0x6ce>
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	785b      	ldrb	r3, [r3, #1]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d113      	bne.n	8002878 <PCD_EP_ISR_Handler+0x6ce>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285e:	4413      	add	r3, r2
 8002860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	011a      	lsls	r2, r3, #4
 8002868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286a:	4413      	add	r3, r2
 800286c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	2200      	movs	r2, #0
 8002876:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	4619      	mov	r1, r3
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f006 fc7b 	bl	800917a <HAL_PCD_DataInStageCallback>
 8002884:	e053      	b.n	800292e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002886:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d146      	bne.n	8002920 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	3302      	adds	r3, #2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80028be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d907      	bls.n	80028da <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 80028ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028d2:	1ad2      	subs	r2, r2, r3
 80028d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d6:	619a      	str	r2, [r3, #24]
 80028d8:	e002      	b.n	80028e0 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 80028da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80028e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d106      	bne.n	80028f6 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f006 fc43 	bl	800917a <HAL_PCD_DataInStageCallback>
 80028f4:	e01b      	b.n	800292e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80028f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028fe:	441a      	add	r2, r3
 8002900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002902:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800290c:	441a      	add	r2, r3
 800290e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002910:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002918:	4618      	mov	r0, r3
 800291a:	f003 f8ef 	bl	8005afc <USB_EPStartXfer>
 800291e:	e006      	b.n	800292e <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002920:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002924:	461a      	mov	r2, r3
 8002926:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f91b 	bl	8002b64 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002936:	b29b      	uxth	r3, r3
 8002938:	b21b      	sxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	f6ff ac3a 	blt.w	80021b4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3758      	adds	r7, #88	; 0x58
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b088      	sub	sp, #32
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	4613      	mov	r3, r2
 8002956:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d07e      	beq.n	8002a60 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	3302      	adds	r3, #2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	8b7b      	ldrh	r3, [r7, #26]
 8002992:	429a      	cmp	r2, r3
 8002994:	d306      	bcc.n	80029a4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	8b7b      	ldrh	r3, [r7, #26]
 800299c:	1ad2      	subs	r2, r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	619a      	str	r2, [r3, #24]
 80029a2:	e002      	b.n	80029aa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d123      	bne.n	80029fa <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029cc:	833b      	strh	r3, [r7, #24]
 80029ce:	8b3b      	ldrh	r3, [r7, #24]
 80029d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029d4:	833b      	strh	r3, [r7, #24]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	441a      	add	r2, r3
 80029e4:	8b3b      	ldrh	r3, [r7, #24]
 80029e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01f      	beq.n	8002a44 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	82fb      	strh	r3, [r7, #22]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	8afb      	ldrh	r3, [r7, #22]
 8002a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a44:	8b7b      	ldrh	r3, [r7, #26]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8087 	beq.w	8002b5a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6959      	ldr	r1, [r3, #20]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	891a      	ldrh	r2, [r3, #8]
 8002a58:	8b7b      	ldrh	r3, [r7, #26]
 8002a5a:	f004 fd83 	bl	8007564 <USB_ReadPMA>
 8002a5e:	e07c      	b.n	8002b5a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	3306      	adds	r3, #6
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a88:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	8b7b      	ldrh	r3, [r7, #26]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d306      	bcc.n	8002aa2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	8b7b      	ldrh	r3, [r7, #26]
 8002a9a:	1ad2      	subs	r2, r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	619a      	str	r2, [r3, #24]
 8002aa0:	e002      	b.n	8002aa8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d123      	bne.n	8002af8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	83fb      	strh	r3, [r7, #30]
 8002acc:	8bfb      	ldrh	r3, [r7, #30]
 8002ace:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ad2:	83fb      	strh	r3, [r7, #30]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	8bfb      	ldrh	r3, [r7, #30]
 8002ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11f      	bne.n	8002b42 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1c:	83bb      	strh	r3, [r7, #28]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	441a      	add	r2, r3
 8002b2c:	8bbb      	ldrh	r3, [r7, #28]
 8002b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b42:	8b7b      	ldrh	r3, [r7, #26]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6959      	ldr	r1, [r3, #20]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	895a      	ldrh	r2, [r3, #10]
 8002b54:	8b7b      	ldrh	r3, [r7, #26]
 8002b56:	f004 fd05 	bl	8007564 <USB_ReadPMA>
    }
  }

  return count;
 8002b5a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0a4      	sub	sp, #144	; 0x90
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 81dd 	beq.w	8002f38 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	3302      	adds	r3, #2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d907      	bls.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bbe:	1ad2      	subs	r2, r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	619a      	str	r2, [r3, #24]
 8002bc4:	e002      	b.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 80b9 	bne.w	8002d48 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	785b      	ldrb	r3, [r3, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d126      	bne.n	8002c2c <HAL_PCD_EP_DB_Transmit+0xc8>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	4413      	add	r3, r2
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	011a      	lsls	r2, r3, #4
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	4413      	add	r3, r2
 8002c00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	801a      	strh	r2, [r3, #0]
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	801a      	strh	r2, [r3, #0]
 8002c2a:	e01a      	b.n	8002c62 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	785b      	ldrb	r3, [r3, #1]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d116      	bne.n	8002c62 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c48:	4413      	add	r3, r2
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	011a      	lsls	r2, r3, #4
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	4413      	add	r3, r2
 8002c56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	2200      	movs	r2, #0
 8002c60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	785b      	ldrb	r3, [r3, #1]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d126      	bne.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x15a>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	4413      	add	r3, r2
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	011a      	lsls	r2, r3, #4
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4413      	add	r3, r2
 8002c92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	801a      	strh	r2, [r3, #0]
 8002cbc:	e017      	b.n	8002cee <HAL_PCD_EP_DB_Transmit+0x18a>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d113      	bne.n	8002cee <HAL_PCD_EP_DB_Transmit+0x18a>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	4413      	add	r3, r2
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	011a      	lsls	r2, r3, #4
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	2200      	movs	r2, #0
 8002cec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f006 fa40 	bl	800917a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 82fc 	beq.w	80032fe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d20:	82fb      	strh	r3, [r7, #22]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	441a      	add	r2, r3
 8002d30:	8afb      	ldrh	r3, [r7, #22]
 8002d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	8013      	strh	r3, [r2, #0]
 8002d46:	e2da      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d021      	beq.n	8002d96 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	441a      	add	r2, r3
 8002d7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f040 82ae 	bne.w	80032fe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002daa:	441a      	add	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002db8:	441a      	add	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	6a1a      	ldr	r2, [r3, #32]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d30b      	bcc.n	8002de2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6a1a      	ldr	r2, [r3, #32]
 8002dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dda:	1ad2      	subs	r2, r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	621a      	str	r2, [r3, #32]
 8002de0:	e017      	b.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d108      	bne.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002dea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002dfa:	e00a      	b.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d165      	bne.n	8002ee6 <HAL_PCD_EP_DB_Transmit+0x382>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2e:	4413      	add	r3, r2
 8002e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	011a      	lsls	r2, r3, #4
 8002e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	801a      	strh	r2, [r3, #0]
 8002e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e56:	2b3e      	cmp	r3, #62	; 0x3e
 8002e58:	d91d      	bls.n	8002e96 <HAL_PCD_EP_DB_Transmit+0x332>
 8002e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x310>
 8002e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e70:	3b01      	subs	r3, #1
 8002e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	029b      	lsls	r3, r3, #10
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4313      	orrs	r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e92:	801a      	strh	r2, [r3, #0]
 8002e94:	e044      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_PCD_EP_DB_Transmit+0x350>
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	801a      	strh	r2, [r3, #0]
 8002eb2:	e035      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <HAL_PCD_EP_DB_Transmit+0x36a>
 8002ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eca:	3301      	adds	r3, #1
 8002ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	029b      	lsls	r3, r3, #10
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4313      	orrs	r3, r2
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	801a      	strh	r2, [r3, #0]
 8002ee4:	e01c      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d118      	bne.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f02:	4413      	add	r3, r2
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	011a      	lsls	r2, r3, #4
 8002f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0e:	4413      	add	r3, r2
 8002f10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f14:	643b      	str	r3, [r7, #64]	; 0x40
 8002f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6959      	ldr	r1, [r3, #20]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	891a      	ldrh	r2, [r3, #8]
 8002f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f004 fad2 	bl	80074da <USB_WritePMA>
 8002f36:	e1e2      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3306      	adds	r3, #6
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f60:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d307      	bcc.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f78:	1ad2      	subs	r2, r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	619a      	str	r2, [r3, #24]
 8002f7e:	e002      	b.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2200      	movs	r2, #0
 8002f84:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 80c0 	bne.w	8003110 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	785b      	ldrb	r3, [r3, #1]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d126      	bne.n	8002fe6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fac:	4413      	add	r3, r2
 8002fae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	011a      	lsls	r2, r3, #4
 8002fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fb8:	4413      	add	r3, r2
 8002fba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fce:	801a      	strh	r2, [r3, #0]
 8002fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fe2:	801a      	strh	r2, [r3, #0]
 8002fe4:	e01a      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	785b      	ldrb	r3, [r3, #1]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d116      	bne.n	800301c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003002:	4413      	add	r3, r2
 8003004:	667b      	str	r3, [r7, #100]	; 0x64
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	011a      	lsls	r2, r3, #4
 800300c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300e:	4413      	add	r3, r2
 8003010:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003014:	663b      	str	r3, [r7, #96]	; 0x60
 8003016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003018:	2200      	movs	r2, #0
 800301a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	677b      	str	r3, [r7, #116]	; 0x74
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	785b      	ldrb	r3, [r3, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d12b      	bne.n	8003082 <HAL_PCD_EP_DB_Transmit+0x51e>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003038:	b29b      	uxth	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303e:	4413      	add	r3, r2
 8003040:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	011a      	lsls	r2, r3, #4
 8003048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304a:	4413      	add	r3, r2
 800304c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003054:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003060:	b29a      	uxth	r2, r3
 8003062:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003066:	801a      	strh	r2, [r3, #0]
 8003068:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003078:	b29a      	uxth	r2, r3
 800307a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800307e:	801a      	strh	r2, [r3, #0]
 8003080:	e017      	b.n	80030b2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	785b      	ldrb	r3, [r3, #1]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d113      	bne.n	80030b2 <HAL_PCD_EP_DB_Transmit+0x54e>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003098:	4413      	add	r3, r2
 800309a:	677b      	str	r3, [r7, #116]	; 0x74
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	011a      	lsls	r2, r3, #4
 80030a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a4:	4413      	add	r3, r2
 80030a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030aa:	673b      	str	r3, [r7, #112]	; 0x70
 80030ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ae:	2200      	movs	r2, #0
 80030b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	4619      	mov	r1, r3
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f006 f85e 	bl	800917a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 811a 	bne.w	80032fe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80030fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310a:	b29b      	uxth	r3, r3
 800310c:	8013      	strh	r3, [r2, #0]
 800310e:	e0f6      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d121      	bne.n	800315e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003134:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	441a      	add	r2, r3
 8003146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800314a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800314e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315a:	b29b      	uxth	r3, r3
 800315c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003164:	2b01      	cmp	r3, #1
 8003166:	f040 80ca 	bne.w	80032fe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003172:	441a      	add	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003180:	441a      	add	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	429a      	cmp	r2, r3
 8003190:	d30b      	bcc.n	80031aa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6a1a      	ldr	r2, [r3, #32]
 800319e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a2:	1ad2      	subs	r2, r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	621a      	str	r2, [r3, #32]
 80031a8:	e017      	b.n	80031da <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d108      	bne.n	80031c4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80031b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031c2:	e00a      	b.n	80031da <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	657b      	str	r3, [r7, #84]	; 0x54
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	785b      	ldrb	r3, [r3, #1]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d165      	bne.n	80032b4 <HAL_PCD_EP_DB_Transmit+0x750>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fc:	4413      	add	r3, r2
 80031fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	011a      	lsls	r2, r3, #4
 8003206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003208:	4413      	add	r3, r2
 800320a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800320e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800321a:	b29a      	uxth	r2, r3
 800321c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800321e:	801a      	strh	r2, [r3, #0]
 8003220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003224:	2b3e      	cmp	r3, #62	; 0x3e
 8003226:	d91d      	bls.n	8003264 <HAL_PCD_EP_DB_Transmit+0x700>
 8003228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <HAL_PCD_EP_DB_Transmit+0x6de>
 800323c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323e:	3b01      	subs	r3, #1
 8003240:	66bb      	str	r3, [r7, #104]	; 0x68
 8003242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29a      	uxth	r2, r3
 8003248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800324a:	b29b      	uxth	r3, r3
 800324c:	029b      	lsls	r3, r3, #10
 800324e:	b29b      	uxth	r3, r3
 8003250:	4313      	orrs	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800325c:	b29a      	uxth	r2, r3
 800325e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003260:	801a      	strh	r2, [r3, #0]
 8003262:	e041      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003264:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <HAL_PCD_EP_DB_Transmit+0x71e>
 800326c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800327a:	b29a      	uxth	r2, r3
 800327c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800327e:	801a      	strh	r2, [r3, #0]
 8003280:	e032      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	66bb      	str	r3, [r7, #104]	; 0x68
 800328a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_PCD_EP_DB_Transmit+0x738>
 8003296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003298:	3301      	adds	r3, #1
 800329a:	66bb      	str	r3, [r7, #104]	; 0x68
 800329c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	029b      	lsls	r3, r3, #10
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	4313      	orrs	r3, r2
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b0:	801a      	strh	r2, [r3, #0]
 80032b2:	e019      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x784>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d115      	bne.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x784>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ca:	4413      	add	r3, r2
 80032cc:	657b      	str	r3, [r7, #84]	; 0x54
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	011a      	lsls	r2, r3, #4
 80032d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d6:	4413      	add	r3, r2
 80032d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032dc:	653b      	str	r3, [r7, #80]	; 0x50
 80032de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	6959      	ldr	r1, [r3, #20]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	895a      	ldrh	r2, [r3, #10]
 80032f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f004 f8ee 	bl	80074da <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003318:	82bb      	strh	r3, [r7, #20]
 800331a:	8abb      	ldrh	r3, [r7, #20]
 800331c:	f083 0310 	eor.w	r3, r3, #16
 8003320:	82bb      	strh	r3, [r7, #20]
 8003322:	8abb      	ldrh	r3, [r7, #20]
 8003324:	f083 0320 	eor.w	r3, r3, #32
 8003328:	82bb      	strh	r3, [r7, #20]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	441a      	add	r2, r3
 8003338:	8abb      	ldrh	r3, [r7, #20]
 800333a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334a:	b29b      	uxth	r3, r3
 800334c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3790      	adds	r7, #144	; 0x90
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	4613      	mov	r3, r2
 8003368:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	f003 0207 	and.w	r2, r3, #7
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	3310      	adds	r3, #16
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e009      	b.n	80033a2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800338e:	897a      	ldrh	r2, [r7, #10]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033a2:	893b      	ldrh	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2200      	movs	r2, #0
 80033ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	80da      	strh	r2, [r3, #6]
 80033b6:	e00b      	b.n	80033d0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2201      	movs	r2, #1
 80033bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e272      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8087 	beq.w	800350a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033fc:	4b92      	ldr	r3, [pc, #584]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b04      	cmp	r3, #4
 8003406:	d00c      	beq.n	8003422 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003408:	4b8f      	ldr	r3, [pc, #572]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b08      	cmp	r3, #8
 8003412:	d112      	bne.n	800343a <HAL_RCC_OscConfig+0x5e>
 8003414:	4b8c      	ldr	r3, [pc, #560]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d10b      	bne.n	800343a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003422:	4b89      	ldr	r3, [pc, #548]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d06c      	beq.n	8003508 <HAL_RCC_OscConfig+0x12c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d168      	bne.n	8003508 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e24c      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003442:	d106      	bne.n	8003452 <HAL_RCC_OscConfig+0x76>
 8003444:	4b80      	ldr	r3, [pc, #512]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a7f      	ldr	r2, [pc, #508]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	e02e      	b.n	80034b0 <HAL_RCC_OscConfig+0xd4>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0x98>
 800345a:	4b7b      	ldr	r3, [pc, #492]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a7a      	ldr	r2, [pc, #488]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b78      	ldr	r3, [pc, #480]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a77      	ldr	r2, [pc, #476]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 800346c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e01d      	b.n	80034b0 <HAL_RCC_OscConfig+0xd4>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0xbc>
 800347e:	4b72      	ldr	r3, [pc, #456]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a71      	ldr	r2, [pc, #452]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b6f      	ldr	r3, [pc, #444]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a6e      	ldr	r2, [pc, #440]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0xd4>
 8003498:	4b6b      	ldr	r3, [pc, #428]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a6a      	ldr	r2, [pc, #424]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 800349e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b68      	ldr	r3, [pc, #416]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a67      	ldr	r2, [pc, #412]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 80034aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fd ff7c 	bl	80013b4 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fd ff78 	bl	80013b4 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e200      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	4b5d      	ldr	r3, [pc, #372]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0xe4>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fd ff68 	bl	80013b4 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fd ff64 	bl	80013b4 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1ec      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x10c>
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d063      	beq.n	80035de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003516:	4b4c      	ldr	r3, [pc, #304]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003522:	4b49      	ldr	r3, [pc, #292]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b08      	cmp	r3, #8
 800352c:	d11c      	bne.n	8003568 <HAL_RCC_OscConfig+0x18c>
 800352e:	4b46      	ldr	r3, [pc, #280]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x176>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d001      	beq.n	8003552 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e1c0      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4939      	ldr	r1, [pc, #228]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	e03a      	b.n	80035de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003570:	4b36      	ldr	r3, [pc, #216]	; (800364c <HAL_RCC_OscConfig+0x270>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fd ff1d 	bl	80013b4 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357e:	f7fd ff19 	bl	80013b4 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1a1      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003590:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4927      	ldr	r1, [pc, #156]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b2:	4b26      	ldr	r3, [pc, #152]	; (800364c <HAL_RCC_OscConfig+0x270>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd fefc 	bl	80013b4 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c0:	f7fd fef8 	bl	80013b4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e180      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d03a      	beq.n	8003660 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d019      	beq.n	8003626 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f8:	f7fd fedc 	bl	80013b4 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003600:	f7fd fed8 	bl	80013b4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e160      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <HAL_RCC_OscConfig+0x26c>)
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800361e:	2001      	movs	r0, #1
 8003620:	f000 face 	bl	8003bc0 <RCC_Delay>
 8003624:	e01c      	b.n	8003660 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362c:	f7fd fec2 	bl	80013b4 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003632:	e00f      	b.n	8003654 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003634:	f7fd febe 	bl	80013b4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d908      	bls.n	8003654 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e146      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	42420000 	.word	0x42420000
 8003650:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	4b92      	ldr	r3, [pc, #584]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e9      	bne.n	8003634 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80a6 	beq.w	80037ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003672:	4b8b      	ldr	r3, [pc, #556]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10d      	bne.n	800369a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	4b88      	ldr	r3, [pc, #544]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	4a87      	ldr	r2, [pc, #540]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003688:	61d3      	str	r3, [r2, #28]
 800368a:	4b85      	ldr	r3, [pc, #532]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003696:	2301      	movs	r3, #1
 8003698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x4c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d118      	bne.n	80036d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a6:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <HAL_RCC_OscConfig+0x4c8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7e      	ldr	r2, [pc, #504]	; (80038a4 <HAL_RCC_OscConfig+0x4c8>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b2:	f7fd fe7f 	bl	80013b4 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ba:	f7fd fe7b 	bl	80013b4 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b64      	cmp	r3, #100	; 0x64
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e103      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	4b75      	ldr	r3, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x4c8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x312>
 80036e0:	4b6f      	ldr	r3, [pc, #444]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4a6e      	ldr	r2, [pc, #440]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6213      	str	r3, [r2, #32]
 80036ec:	e02d      	b.n	800374a <HAL_RCC_OscConfig+0x36e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x334>
 80036f6:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	4a69      	ldr	r2, [pc, #420]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6213      	str	r3, [r2, #32]
 8003702:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4a66      	ldr	r2, [pc, #408]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	f023 0304 	bic.w	r3, r3, #4
 800370c:	6213      	str	r3, [r2, #32]
 800370e:	e01c      	b.n	800374a <HAL_RCC_OscConfig+0x36e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d10c      	bne.n	8003732 <HAL_RCC_OscConfig+0x356>
 8003718:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4a60      	ldr	r2, [pc, #384]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	6213      	str	r3, [r2, #32]
 8003724:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6213      	str	r3, [r2, #32]
 8003730:	e00b      	b.n	800374a <HAL_RCC_OscConfig+0x36e>
 8003732:	4b5b      	ldr	r3, [pc, #364]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a5a      	ldr	r2, [pc, #360]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6213      	str	r3, [r2, #32]
 800373e:	4b58      	ldr	r3, [pc, #352]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4a57      	ldr	r2, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d015      	beq.n	800377e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fd fe2f 	bl	80013b4 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fd fe2b 	bl	80013b4 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0b1      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003770:	4b4b      	ldr	r3, [pc, #300]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ee      	beq.n	800375a <HAL_RCC_OscConfig+0x37e>
 800377c:	e014      	b.n	80037a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7fd fe19 	bl	80013b4 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fe15 	bl	80013b4 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e09b      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379c:	4b40      	ldr	r3, [pc, #256]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ee      	bne.n	8003786 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d105      	bne.n	80037ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ae:	4b3c      	ldr	r3, [pc, #240]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8087 	beq.w	80038d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c4:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d061      	beq.n	8003894 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d146      	bne.n	8003866 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d8:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_RCC_OscConfig+0x4cc>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fd fde9 	bl	80013b4 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd fde5 	bl	80013b4 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e06d      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f8:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d108      	bne.n	8003820 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800380e:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	4921      	ldr	r1, [pc, #132]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003820:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a19      	ldr	r1, [r3, #32]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	430b      	orrs	r3, r1
 8003832:	491b      	ldr	r1, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCC_OscConfig+0x4cc>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fd fdb9 	bl	80013b4 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003846:	f7fd fdb5 	bl	80013b4 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e03d      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x46a>
 8003864:	e035      	b.n	80038d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_RCC_OscConfig+0x4cc>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fd fda2 	bl	80013b4 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003874:	f7fd fd9e 	bl	80013b4 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e026      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x498>
 8003892:	e01e      	b.n	80038d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e019      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40007000 	.word	0x40007000
 80038a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_OscConfig+0x500>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d106      	bne.n	80038ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0d0      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f4:	4b6a      	ldr	r3, [pc, #424]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d910      	bls.n	8003924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b67      	ldr	r3, [pc, #412]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4965      	ldr	r1, [pc, #404]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b63      	ldr	r3, [pc, #396]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b8      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800393c:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003946:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003954:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a52      	ldr	r2, [pc, #328]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800395e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	494d      	ldr	r1, [pc, #308]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d040      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d115      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e07f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e073      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06b      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039be:	4b39      	ldr	r3, [pc, #228]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4936      	ldr	r1, [pc, #216]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d0:	f7fd fcf0 	bl	80013b4 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d8:	f7fd fcec 	bl	80013b4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e053      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 020c 	and.w	r2, r3, #12
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d1eb      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d210      	bcs.n	8003a30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	4922      	ldr	r1, [pc, #136]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e032      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4916      	ldr	r1, [pc, #88]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	490e      	ldr	r1, [pc, #56]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a6e:	f000 f821 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a72:	4602      	mov	r2, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	490a      	ldr	r1, [pc, #40]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	5ccb      	ldrb	r3, [r1, r3]
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x1cc>)
 8003a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fd fc4e 	bl	8001330 <HAL_InitTick>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40022000 	.word	0x40022000
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	080098e0 	.word	0x080098e0
 8003aac:	2000000c 	.word	0x2000000c
 8003ab0:	20000010 	.word	0x20000010

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d002      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x30>
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d003      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x36>
 8003ae2:	e027      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ae4:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ae6:	613b      	str	r3, [r7, #16]
      break;
 8003ae8:	e027      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	0c9b      	lsrs	r3, r3, #18
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003af4:	5cd3      	ldrb	r3, [r2, r3]
 8003af6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d010      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	0c5b      	lsrs	r3, r3, #17
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b16:	fb03 f202 	mul.w	r2, r3, r2
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e004      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a0c      	ldr	r2, [pc, #48]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b28:	fb02 f303 	mul.w	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	613b      	str	r3, [r7, #16]
      break;
 8003b32:	e002      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b36:	613b      	str	r3, [r7, #16]
      break;
 8003b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b3a:	693b      	ldr	r3, [r7, #16]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	007a1200 	.word	0x007a1200
 8003b50:	080098f8 	.word	0x080098f8
 8003b54:	08009908 	.word	0x08009908
 8003b58:	003d0900 	.word	0x003d0900

08003b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b60:	4b02      	ldr	r3, [pc, #8]	; (8003b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	2000000c 	.word	0x2000000c

08003b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b74:	f7ff fff2 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	4903      	ldr	r1, [pc, #12]	; (8003b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b86:	5ccb      	ldrb	r3, [r1, r3]
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	080098f0 	.word	0x080098f0

08003b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b9c:	f7ff ffde 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	0adb      	lsrs	r3, r3, #11
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	4903      	ldr	r1, [pc, #12]	; (8003bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	080098f0 	.word	0x080098f0

08003bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <RCC_Delay+0x34>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <RCC_Delay+0x38>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	0a5b      	lsrs	r3, r3, #9
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bdc:	bf00      	nop
  }
  while (Delay --);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1e5a      	subs	r2, r3, #1
 8003be2:	60fa      	str	r2, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f9      	bne.n	8003bdc <RCC_Delay+0x1c>
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	2000000c 	.word	0x2000000c
 8003bf8:	10624dd3 	.word	0x10624dd3

08003bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d07d      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1c:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10d      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c28:	4b4c      	ldr	r3, [pc, #304]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c32:	61d3      	str	r3, [r2, #28]
 8003c34:	4b49      	ldr	r3, [pc, #292]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d118      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c50:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a42      	ldr	r2, [pc, #264]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5c:	f7fd fbaa 	bl	80013b4 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c62:	e008      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c64:	f7fd fba6 	bl	80013b4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e06d      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c76:	4b3a      	ldr	r3, [pc, #232]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d02e      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d027      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003caa:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb0:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cb6:	4a29      	ldr	r2, [pc, #164]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d014      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fd fb75 	bl	80013b4 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fd fb71 	bl	80013b4 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e036      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ee      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4917      	ldr	r1, [pc, #92]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d08:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d20:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	490b      	ldr	r1, [pc, #44]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4904      	ldr	r1, [pc, #16]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40007000 	.word	0x40007000
 8003d64:	42420440 	.word	0x42420440

08003d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e041      	b.n	8003dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fd f98a 	bl	80010a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f000 fb76 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d001      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e03a      	b.n	8003e96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <HAL_TIM_Base_Start_IT+0x98>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00e      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x58>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d009      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x58>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x58>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d111      	bne.n	8003e84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d010      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e82:	e007      	b.n	8003e94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800

08003eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e041      	b.n	8003f42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd f90e 	bl	80010f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f000 fad4 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01b      	beq.n	8003fae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f06f 0202 	mvn.w	r2, #2
 8003f7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fa64 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8003f9a:	e005      	b.n	8003fa8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fa57 	bl	8004450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fa66 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d020      	beq.n	8003ffa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01b      	beq.n	8003ffa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f06f 0204 	mvn.w	r2, #4
 8003fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fa3e 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8003fe6:	e005      	b.n	8003ff4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fa31 	bl	8004450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa40 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d020      	beq.n	8004046 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01b      	beq.n	8004046 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f06f 0208 	mvn.w	r2, #8
 8004016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2204      	movs	r2, #4
 800401c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fa18 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8004032:	e005      	b.n	8004040 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fa0b 	bl	8004450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fa1a 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d020      	beq.n	8004092 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01b      	beq.n	8004092 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f06f 0210 	mvn.w	r2, #16
 8004062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2208      	movs	r2, #8
 8004068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f9f2 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 800407e:	e005      	b.n	800408c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f9e5 	bl	8004450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f9f4 	bl	8004474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0201 	mvn.w	r2, #1
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f9c4 	bl	800443e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00c      	beq.n	80040da <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fcd2 	bl	8004a7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00c      	beq.n	80040fe <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f9c4 	bl	8004486 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f06f 0220 	mvn.w	r2, #32
 800411a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fca5 	bl	8004a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004146:	2302      	movs	r3, #2
 8004148:	e0ae      	b.n	80042a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	f200 809f 	bhi.w	8004298 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004195 	.word	0x08004195
 8004164:	08004299 	.word	0x08004299
 8004168:	08004299 	.word	0x08004299
 800416c:	08004299 	.word	0x08004299
 8004170:	080041d5 	.word	0x080041d5
 8004174:	08004299 	.word	0x08004299
 8004178:	08004299 	.word	0x08004299
 800417c:	08004299 	.word	0x08004299
 8004180:	08004217 	.word	0x08004217
 8004184:	08004299 	.word	0x08004299
 8004188:	08004299 	.word	0x08004299
 800418c:	08004299 	.word	0x08004299
 8004190:	08004257 	.word	0x08004257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f9ea 	bl	8004574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0208 	orr.w	r2, r2, #8
 80041ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6999      	ldr	r1, [r3, #24]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	619a      	str	r2, [r3, #24]
      break;
 80041d2:	e064      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fa30 	bl	8004640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6999      	ldr	r1, [r3, #24]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	619a      	str	r2, [r3, #24]
      break;
 8004214:	e043      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fa79 	bl	8004714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0208 	orr.w	r2, r2, #8
 8004230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0204 	bic.w	r2, r2, #4
 8004240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69d9      	ldr	r1, [r3, #28]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	61da      	str	r2, [r3, #28]
      break;
 8004254:	e023      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fac3 	bl	80047e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69d9      	ldr	r1, [r3, #28]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	021a      	lsls	r2, r3, #8
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	61da      	str	r2, [r3, #28]
      break;
 8004296:	e002      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	75fb      	strb	r3, [r7, #23]
      break;
 800429c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_ConfigClockSource+0x1c>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0b4      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x186>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004304:	d03e      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0xd4>
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430a:	f200 8087 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	f000 8086 	beq.w	8004422 <HAL_TIM_ConfigClockSource+0x172>
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431a:	d87f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800431c:	2b70      	cmp	r3, #112	; 0x70
 800431e:	d01a      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xa6>
 8004320:	2b70      	cmp	r3, #112	; 0x70
 8004322:	d87b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b60      	cmp	r3, #96	; 0x60
 8004326:	d050      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x11a>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d877      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b50      	cmp	r3, #80	; 0x50
 800432e:	d03c      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0xfa>
 8004330:	2b50      	cmp	r3, #80	; 0x50
 8004332:	d873      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d058      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x13a>
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d86f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b30      	cmp	r3, #48	; 0x30
 800433e:	d064      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004340:	2b30      	cmp	r3, #48	; 0x30
 8004342:	d86b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d060      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d867      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d05c      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	2b10      	cmp	r3, #16
 8004352:	d05a      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x15a>
 8004354:	e062      	b.n	800441c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	f000 fb04 	bl	8004972 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	609a      	str	r2, [r3, #8]
      break;
 8004382:	e04f      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004394:	f000 faed 	bl	8004972 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043a6:	609a      	str	r2, [r3, #8]
      break;
 80043a8:	e03c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 fa64 	bl	8004884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2150      	movs	r1, #80	; 0x50
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fabb 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80043c8:	e02c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 fa82 	bl	80048e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2160      	movs	r1, #96	; 0x60
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 faab 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80043e8:	e01c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 fa44 	bl	8004884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2140      	movs	r1, #64	; 0x40
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fa9b 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004408:	e00c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f000 fa92 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 800441a:	e003      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e000      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a2f      	ldr	r2, [pc, #188]	; (8004568 <TIM_Base_SetConfig+0xd0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00b      	beq.n	80044c8 <TIM_Base_SetConfig+0x30>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d007      	beq.n	80044c8 <TIM_Base_SetConfig+0x30>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a2c      	ldr	r2, [pc, #176]	; (800456c <TIM_Base_SetConfig+0xd4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_Base_SetConfig+0x30>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a2b      	ldr	r2, [pc, #172]	; (8004570 <TIM_Base_SetConfig+0xd8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d108      	bne.n	80044da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a22      	ldr	r2, [pc, #136]	; (8004568 <TIM_Base_SetConfig+0xd0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00b      	beq.n	80044fa <TIM_Base_SetConfig+0x62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e8:	d007      	beq.n	80044fa <TIM_Base_SetConfig+0x62>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1f      	ldr	r2, [pc, #124]	; (800456c <TIM_Base_SetConfig+0xd4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <TIM_Base_SetConfig+0x62>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <TIM_Base_SetConfig+0xd8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d108      	bne.n	800450c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a0d      	ldr	r2, [pc, #52]	; (8004568 <TIM_Base_SetConfig+0xd0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d103      	bne.n	8004540 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f023 0201 	bic.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]
  }
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800

08004574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f023 0201 	bic.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f023 0302 	bic.w	r3, r3, #2
 80045bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a1c      	ldr	r2, [pc, #112]	; (800463c <TIM_OC1_SetConfig+0xc8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d10c      	bne.n	80045ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 0308 	bic.w	r3, r3, #8
 80045d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f023 0304 	bic.w	r3, r3, #4
 80045e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a13      	ldr	r2, [pc, #76]	; (800463c <TIM_OC1_SetConfig+0xc8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d111      	bne.n	8004616 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	621a      	str	r2, [r3, #32]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40012c00 	.word	0x40012c00

08004640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f023 0210 	bic.w	r2, r3, #16
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 0320 	bic.w	r3, r3, #32
 800468a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <TIM_OC2_SetConfig+0xd0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10d      	bne.n	80046bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a14      	ldr	r2, [pc, #80]	; (8004710 <TIM_OC2_SetConfig+0xd0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d113      	bne.n	80046ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	621a      	str	r2, [r3, #32]
}
 8004706:	bf00      	nop
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	40012c00 	.word	0x40012c00

08004714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <TIM_OC3_SetConfig+0xd0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10d      	bne.n	800478e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800478c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a14      	ldr	r2, [pc, #80]	; (80047e4 <TIM_OC3_SetConfig+0xd0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d113      	bne.n	80047be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800479c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	621a      	str	r2, [r3, #32]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40012c00 	.word	0x40012c00

080047e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	031b      	lsls	r3, r3, #12
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a0f      	ldr	r2, [pc, #60]	; (8004880 <TIM_OC4_SetConfig+0x98>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d109      	bne.n	800485c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800484e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	019b      	lsls	r3, r3, #6
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	40012c00 	.word	0x40012c00

08004884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0201 	bic.w	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f023 030a 	bic.w	r3, r3, #10
 80048c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0210 	bic.w	r2, r3, #16
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	031b      	lsls	r3, r3, #12
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	621a      	str	r2, [r3, #32]
}
 8004934:	bf00      	nop
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr

0800493e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr

08004972 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004972:	b480      	push	{r7}
 8004974:	b087      	sub	sp, #28
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	021a      	lsls	r2, r3, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	431a      	orrs	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4313      	orrs	r3, r2
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	609a      	str	r2, [r3, #8]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e046      	b.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00e      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a14:	d009      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d004      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d10c      	bne.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800

08004a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e042      	b.n	8004b28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc fb6e 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	; 0x24
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f971 	bl	8004dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d175      	bne.n	8004c3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_UART_Transmit+0x2c>
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e06e      	b.n	8004c3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2221      	movs	r2, #33	; 0x21
 8004b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b6e:	f7fc fc21 	bl	80013b4 <HAL_GetTick>
 8004b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b88:	d108      	bne.n	8004b9c <HAL_UART_Transmit+0x6c>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e003      	b.n	8004ba4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ba4:	e02e      	b.n	8004c04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f848 	bl	8004c46 <UART_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e03a      	b.n	8004c3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	3302      	adds	r3, #2
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e007      	b.n	8004bf6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1cb      	bne.n	8004ba6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2140      	movs	r1, #64	; 0x40
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f814 	bl	8004c46 <UART_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e006      	b.n	8004c3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e000      	b.n	8004c3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
  }
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b086      	sub	sp, #24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	603b      	str	r3, [r7, #0]
 8004c52:	4613      	mov	r3, r2
 8004c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c56:	e03b      	b.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d037      	beq.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c60:	f7fc fba8 	bl	80013b4 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	6a3a      	ldr	r2, [r7, #32]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d302      	bcc.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e03a      	b.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d023      	beq.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d020      	beq.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d01d      	beq.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d116      	bne.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f81d 	bl	8004cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e00f      	b.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d0b4      	beq.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b095      	sub	sp, #84	; 0x54
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d20:	643a      	str	r2, [r7, #64]	; 0x40
 8004d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e5      	bne.n	8004d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3314      	adds	r3, #20
 8004d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3314      	adds	r3, #20
 8004d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d119      	bne.n	8004da4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f023 0310 	bic.w	r3, r3, #16
 8004d86:	647b      	str	r3, [r7, #68]	; 0x44
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d90:	61ba      	str	r2, [r7, #24]
 8004d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6979      	ldr	r1, [r7, #20]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e5      	bne.n	8004d70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004db2:	bf00      	nop
 8004db4:	3754      	adds	r7, #84	; 0x54
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr

08004dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004df6:	f023 030c 	bic.w	r3, r3, #12
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	430b      	orrs	r3, r1
 8004e02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a2c      	ldr	r2, [pc, #176]	; (8004ed0 <UART_SetConfig+0x114>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d103      	bne.n	8004e2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e24:	f7fe feb8 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	e002      	b.n	8004e32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fe fea0 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 8004e30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009a      	lsls	r2, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	4a22      	ldr	r2, [pc, #136]	; (8004ed4 <UART_SetConfig+0x118>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	0119      	lsls	r1, r3, #4
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009a      	lsls	r2, r3, #2
 8004e5c:	441a      	add	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e68:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <UART_SetConfig+0x118>)
 8004e6a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	2064      	movs	r0, #100	; 0x64
 8004e72:	fb00 f303 	mul.w	r3, r0, r3
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	3332      	adds	r3, #50	; 0x32
 8004e7c:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <UART_SetConfig+0x118>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e88:	4419      	add	r1, r3
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009a      	lsls	r2, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <UART_SetConfig+0x118>)
 8004ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2064      	movs	r0, #100	; 0x64
 8004eaa:	fb00 f303 	mul.w	r3, r0, r3
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	3332      	adds	r3, #50	; 0x32
 8004eb4:	4a07      	ldr	r2, [pc, #28]	; (8004ed4 <UART_SetConfig+0x118>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	f003 020f 	and.w	r2, r3, #15
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40013800 	.word	0x40013800
 8004ed4:	51eb851f 	.word	0x51eb851f

08004ed8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr

08004ef2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f02:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f06:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bc80      	pop	{r7}
 8004f1c:	4770      	bx	lr

08004f1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f26:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	4638      	mov	r0, r7
 8004f74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b09d      	sub	sp, #116	; 0x74
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	78db      	ldrb	r3, [r3, #3]
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d81f      	bhi.n	8005016 <USB_ActivateEndpoint+0x72>
 8004fd6:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <USB_ActivateEndpoint+0x38>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	08005009 	.word	0x08005009
 8004fe4:	0800501f 	.word	0x0800501f
 8004fe8:	08004ffb 	.word	0x08004ffb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004fec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ff0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004ff8:	e012      	b.n	8005020 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ffa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ffe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005002:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005006:	e00b      	b.n	8005020 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005008:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800500c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005010:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005014:	e004      	b.n	8005020 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800501c:	e000      	b.n	8005020 <USB_ActivateEndpoint+0x7c>
      break;
 800501e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	441a      	add	r2, r3
 800502a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800502e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503e:	b29b      	uxth	r3, r3
 8005040:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	b29a      	uxth	r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	4313      	orrs	r3, r2
 8005062:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	441a      	add	r2, r3
 8005070:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005084:	b29b      	uxth	r3, r3
 8005086:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	7b1b      	ldrb	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 8178 	bne.w	8005382 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8084 	beq.w	80051a4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	4413      	add	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	011a      	lsls	r2, r3, #4
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	88db      	ldrh	r3, [r3, #6]
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	827b      	strh	r3, [r7, #18]
 80050de:	8a7b      	ldrh	r3, [r7, #18]
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01b      	beq.n	8005120 <USB_ActivateEndpoint+0x17c>
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	823b      	strh	r3, [r7, #16]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	441a      	add	r2, r3
 800510a:	8a3b      	ldrh	r3, [r7, #16]
 800510c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005118:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800511c:	b29b      	uxth	r3, r3
 800511e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d020      	beq.n	800516a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29b      	uxth	r3, r3
 8005136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513e:	81bb      	strh	r3, [r7, #12]
 8005140:	89bb      	ldrh	r3, [r7, #12]
 8005142:	f083 0320 	eor.w	r3, r3, #32
 8005146:	81bb      	strh	r3, [r7, #12]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	89bb      	ldrh	r3, [r7, #12]
 8005154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005164:	b29b      	uxth	r3, r3
 8005166:	8013      	strh	r3, [r2, #0]
 8005168:	e2d5      	b.n	8005716 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005180:	81fb      	strh	r3, [r7, #14]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	89fb      	ldrh	r3, [r7, #14]
 800518e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519e:	b29b      	uxth	r3, r3
 80051a0:	8013      	strh	r3, [r2, #0]
 80051a2:	e2b8      	b.n	8005716 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	633b      	str	r3, [r7, #48]	; 0x30
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	4413      	add	r3, r2
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	011a      	lsls	r2, r3, #4
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	88db      	ldrh	r3, [r3, #6]
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	4413      	add	r3, r2
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	011a      	lsls	r2, r3, #4
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	4413      	add	r3, r2
 80051f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005206:	b29a      	uxth	r2, r3
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2b3e      	cmp	r3, #62	; 0x3e
 8005212:	d91d      	bls.n	8005250 <USB_ActivateEndpoint+0x2ac>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	66bb      	str	r3, [r7, #104]	; 0x68
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <USB_ActivateEndpoint+0x28a>
 8005228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800522a:	3b01      	subs	r3, #1
 800522c:	66bb      	str	r3, [r7, #104]	; 0x68
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29a      	uxth	r2, r3
 8005234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005236:	b29b      	uxth	r3, r3
 8005238:	029b      	lsls	r3, r3, #10
 800523a:	b29b      	uxth	r3, r3
 800523c:	4313      	orrs	r3, r2
 800523e:	b29b      	uxth	r3, r3
 8005240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005248:	b29a      	uxth	r2, r3
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	e026      	b.n	800529e <USB_ActivateEndpoint+0x2fa>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <USB_ActivateEndpoint+0x2ca>
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005266:	b29a      	uxth	r2, r3
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	801a      	strh	r2, [r3, #0]
 800526c:	e017      	b.n	800529e <USB_ActivateEndpoint+0x2fa>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	66bb      	str	r3, [r7, #104]	; 0x68
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <USB_ActivateEndpoint+0x2e4>
 8005282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005284:	3301      	adds	r3, #1
 8005286:	66bb      	str	r3, [r7, #104]	; 0x68
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005290:	b29b      	uxth	r3, r3
 8005292:	029b      	lsls	r3, r3, #10
 8005294:	b29b      	uxth	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	b29a      	uxth	r2, r3
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80052ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01b      	beq.n	80052ee <USB_ActivateEndpoint+0x34a>
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	843b      	strh	r3, [r7, #32]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	441a      	add	r2, r3
 80052d8:	8c3b      	ldrh	r3, [r7, #32]
 80052da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d124      	bne.n	8005340 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530c:	83bb      	strh	r3, [r7, #28]
 800530e:	8bbb      	ldrh	r3, [r7, #28]
 8005310:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005314:	83bb      	strh	r3, [r7, #28]
 8005316:	8bbb      	ldrh	r3, [r7, #28]
 8005318:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800531c:	83bb      	strh	r3, [r7, #28]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	441a      	add	r2, r3
 8005328:	8bbb      	ldrh	r3, [r7, #28]
 800532a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533a:	b29b      	uxth	r3, r3
 800533c:	8013      	strh	r3, [r2, #0]
 800533e:	e1ea      	b.n	8005716 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	83fb      	strh	r3, [r7, #30]
 8005358:	8bfb      	ldrh	r3, [r7, #30]
 800535a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800535e:	83fb      	strh	r3, [r7, #30]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	8bfb      	ldrh	r3, [r7, #30]
 800536c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537c:	b29b      	uxth	r3, r3
 800537e:	8013      	strh	r3, [r2, #0]
 8005380:	e1c9      	b.n	8005716 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	78db      	ldrb	r3, [r3, #3]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d11e      	bne.n	80053c8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	441a      	add	r2, r3
 80053ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80053b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80053be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	8013      	strh	r3, [r2, #0]
 80053c6:	e01d      	b.n	8005404 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	441a      	add	r2, r3
 80053ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80053f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005400:	b29b      	uxth	r3, r3
 8005402:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540e:	b29b      	uxth	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005414:	4413      	add	r3, r2
 8005416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	011a      	lsls	r2, r3, #4
 800541e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005420:	4413      	add	r3, r2
 8005422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005426:	65bb      	str	r3, [r7, #88]	; 0x58
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	891b      	ldrh	r3, [r3, #8]
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	b29b      	uxth	r3, r3
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	657b      	str	r3, [r7, #84]	; 0x54
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005448:	4413      	add	r3, r2
 800544a:	657b      	str	r3, [r7, #84]	; 0x54
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	011a      	lsls	r2, r3, #4
 8005452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005454:	4413      	add	r3, r2
 8005456:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800545a:	653b      	str	r3, [r7, #80]	; 0x50
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	895b      	ldrh	r3, [r3, #10]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	b29b      	uxth	r3, r3
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f040 8093 	bne.w	800559c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005486:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800548a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01b      	beq.n	80054ca <USB_ActivateEndpoint+0x526>
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	441a      	add	r2, r3
 80054b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80054d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01b      	beq.n	800551a <USB_ActivateEndpoint+0x576>
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005512:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	873b      	strh	r3, [r7, #56]	; 0x38
 8005532:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005534:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005538:	873b      	strh	r3, [r7, #56]	; 0x38
 800553a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800553c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005540:	873b      	strh	r3, [r7, #56]	; 0x38
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800554e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555e:	b29b      	uxth	r3, r3
 8005560:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005578:	86fb      	strh	r3, [r7, #54]	; 0x36
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]
 800559a:	e0bc      	b.n	8005716 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80055ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01d      	beq.n	80055f4 <USB_ActivateEndpoint+0x650>
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80055e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005604:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01d      	beq.n	800564c <USB_ActivateEndpoint+0x6a8>
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	441a      	add	r2, r3
 8005634:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005644:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005648:	b29b      	uxth	r3, r3
 800564a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	78db      	ldrb	r3, [r3, #3]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d024      	beq.n	800569e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800566a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800566e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005672:	f083 0320 	eor.w	r3, r3, #32
 8005676:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	441a      	add	r2, r3
 8005684:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005698:	b29b      	uxth	r3, r3
 800569a:	8013      	strh	r3, [r2, #0]
 800569c:	e01d      	b.n	80056da <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	441a      	add	r2, r3
 80056c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80056c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005716:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800571a:	4618      	mov	r0, r3
 800571c:	3774      	adds	r7, #116	; 0x74
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005724:	b480      	push	{r7}
 8005726:	b08d      	sub	sp, #52	; 0x34
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	7b1b      	ldrb	r3, [r3, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f040 808e 	bne.w	8005854 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d044      	beq.n	80057ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	81bb      	strh	r3, [r7, #12]
 800574e:	89bb      	ldrh	r3, [r7, #12]
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01b      	beq.n	8005790 <USB_DeactivateEndpoint+0x6c>
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	817b      	strh	r3, [r7, #10]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	897b      	ldrh	r3, [r7, #10]
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005788:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a6:	813b      	strh	r3, [r7, #8]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	441a      	add	r2, r3
 80057b2:	893b      	ldrh	r3, [r7, #8]
 80057b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	8013      	strh	r3, [r2, #0]
 80057c8:	e192      	b.n	8005af0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	827b      	strh	r3, [r7, #18]
 80057d8:	8a7b      	ldrh	r3, [r7, #18]
 80057da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01b      	beq.n	800581a <USB_DeactivateEndpoint+0xf6>
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f8:	823b      	strh	r3, [r7, #16]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	8a3b      	ldrh	r3, [r7, #16]
 8005806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005816:	b29b      	uxth	r3, r3
 8005818:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800582c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005830:	81fb      	strh	r3, [r7, #14]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	441a      	add	r2, r3
 800583c:	89fb      	ldrh	r3, [r7, #14]
 800583e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584e:	b29b      	uxth	r3, r3
 8005850:	8013      	strh	r3, [r2, #0]
 8005852:	e14d      	b.n	8005af0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	785b      	ldrb	r3, [r3, #1]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f040 80a5 	bne.w	80059a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	843b      	strh	r3, [r7, #32]
 800586c:	8c3b      	ldrh	r3, [r7, #32]
 800586e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01b      	beq.n	80058ae <USB_DeactivateEndpoint+0x18a>
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588c:	83fb      	strh	r3, [r7, #30]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	441a      	add	r2, r3
 8005898:	8bfb      	ldrh	r3, [r7, #30]
 800589a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	83bb      	strh	r3, [r7, #28]
 80058bc:	8bbb      	ldrh	r3, [r7, #28]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01b      	beq.n	80058fe <USB_DeactivateEndpoint+0x1da>
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058dc:	837b      	strh	r3, [r7, #26]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	441a      	add	r2, r3
 80058e8:	8b7b      	ldrh	r3, [r7, #26]
 80058ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29b      	uxth	r3, r3
 800590c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005914:	833b      	strh	r3, [r7, #24]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	441a      	add	r2, r3
 8005920:	8b3b      	ldrh	r3, [r7, #24]
 8005922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005932:	b29b      	uxth	r3, r3
 8005934:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594c:	82fb      	strh	r3, [r7, #22]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	441a      	add	r2, r3
 8005958:	8afb      	ldrh	r3, [r7, #22]
 800595a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800596a:	b29b      	uxth	r3, r3
 800596c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005984:	82bb      	strh	r3, [r7, #20]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	441a      	add	r2, r3
 8005990:	8abb      	ldrh	r3, [r7, #20]
 8005992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	8013      	strh	r3, [r2, #0]
 80059a6:	e0a3      	b.n	8005af0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80059b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <USB_DeactivateEndpoint+0x2d4>
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80059e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005a06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01b      	beq.n	8005a48 <USB_DeactivateEndpoint+0x324>
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	441a      	add	r2, r3
 8005a32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	441a      	add	r2, r3
 8005a6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	441a      	add	r2, r3
 8005aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	441a      	add	r2, r3
 8005ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3734      	adds	r7, #52	; 0x34
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b0c2      	sub	sp, #264	; 0x108
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b0a:	6018      	str	r0, [r3, #0]
 8005b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b14:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	f040 86b7 	bne.w	8006896 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d908      	bls.n	8005b56 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b54:	e007      	b.n	8005b66 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	7b1b      	ldrb	r3, [r3, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d13a      	bne.n	8005bec <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6959      	ldr	r1, [r3, #20]
 8005b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	88da      	ldrh	r2, [r3, #6]
 8005b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b9c:	6800      	ldr	r0, [r0, #0]
 8005b9e:	f001 fc9c 	bl	80074da <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	011a      	lsls	r2, r3, #4
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	f000 be1f 	b.w	800682a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	78db      	ldrb	r3, [r3, #3]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	f040 8462 	bne.w	80064c2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a1a      	ldr	r2, [r3, #32]
 8005c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	f240 83df 	bls.w	80063da <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	441a      	add	r2, r3
 8005c60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6a1a      	ldr	r2, [r3, #32]
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c88:	1ad2      	subs	r2, r2, r3
 8005c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 81c7 	beq.w	800604c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d177      	bne.n	8005dca <USB_EPStartXfer+0x2ce>
 8005cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	4413      	add	r3, r2
 8005cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	011a      	lsls	r2, r3, #4
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	4413      	add	r3, r2
 8005d10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d2c:	d921      	bls.n	8005d72 <USB_EPStartXfer+0x276>
 8005d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d3c:	f003 031f 	and.w	r3, r3, #31
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d104      	bne.n	8005d4e <USB_EPStartXfer+0x252>
 8005d44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	029b      	lsls	r3, r3, #10
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	801a      	strh	r2, [r3, #0]
 8005d70:	e050      	b.n	8005e14 <USB_EPStartXfer+0x318>
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <USB_EPStartXfer+0x294>
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	e041      	b.n	8005e14 <USB_EPStartXfer+0x318>
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <USB_EPStartXfer+0x2b4>
 8005da6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005daa:	3301      	adds	r3, #1
 8005dac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	e024      	b.n	8005e14 <USB_EPStartXfer+0x318>
 8005dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d11c      	bne.n	8005e14 <USB_EPStartXfer+0x318>
 8005dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	4413      	add	r3, r2
 8005df0:	633b      	str	r3, [r7, #48]	; 0x30
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	011a      	lsls	r2, r3, #4
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	4413      	add	r3, r2
 8005e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	895b      	ldrh	r3, [r3, #10]
 8005e20:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6959      	ldr	r1, [r3, #20]
 8005e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e42:	6800      	ldr	r0, [r0, #0]
 8005e44:	f001 fb49 	bl	80074da <USB_WritePMA>
            ep->xfer_buff += len;
 8005e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e58:	441a      	add	r2, r3
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6a1a      	ldr	r2, [r3, #32]
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d90f      	bls.n	8005ea2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a1a      	ldr	r2, [r3, #32]
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e92:	1ad2      	subs	r2, r2, r3
 8005e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	621a      	str	r2, [r3, #32]
 8005ea0:	e00e      	b.n	8005ec0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d177      	bne.n	8005fc0 <USB_EPStartXfer+0x4c4>
 8005ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	011a      	lsls	r2, r3, #4
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	4413      	add	r3, r2
 8005f06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f20:	2b3e      	cmp	r3, #62	; 0x3e
 8005f22:	d921      	bls.n	8005f68 <USB_EPStartXfer+0x46c>
 8005f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d104      	bne.n	8005f44 <USB_EPStartXfer+0x448>
 8005f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	029b      	lsls	r3, r3, #10
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	4313      	orrs	r3, r2
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	e056      	b.n	8006016 <USB_EPStartXfer+0x51a>
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <USB_EPStartXfer+0x48a>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e047      	b.n	8006016 <USB_EPStartXfer+0x51a>
 8005f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <USB_EPStartXfer+0x4aa>
 8005f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	029b      	lsls	r3, r3, #10
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	801a      	strh	r2, [r3, #0]
 8005fbe:	e02a      	b.n	8006016 <USB_EPStartXfer+0x51a>
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d122      	bne.n	8006016 <USB_EPStartXfer+0x51a>
 8005fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	623b      	str	r3, [r7, #32]
 8005fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	623b      	str	r3, [r7, #32]
 8005ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	011a      	lsls	r2, r3, #4
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	4413      	add	r3, r2
 8006006:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006010:	b29a      	uxth	r2, r3
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	891b      	ldrh	r3, [r3, #8]
 8006022:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6959      	ldr	r1, [r3, #20]
 8006032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006036:	b29b      	uxth	r3, r3
 8006038:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800603c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006040:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006044:	6800      	ldr	r0, [r0, #0]
 8006046:	f001 fa48 	bl	80074da <USB_WritePMA>
 800604a:	e3ee      	b.n	800682a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800604c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d177      	bne.n	800614c <USB_EPStartXfer+0x650>
 800605c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	64bb      	str	r3, [r7, #72]	; 0x48
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006076:	b29b      	uxth	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800607c:	4413      	add	r3, r2
 800607e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	011a      	lsls	r2, r3, #4
 800608e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006090:	4413      	add	r3, r2
 8006092:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006096:	647b      	str	r3, [r7, #68]	; 0x44
 8006098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ac:	2b3e      	cmp	r3, #62	; 0x3e
 80060ae:	d921      	bls.n	80060f4 <USB_EPStartXfer+0x5f8>
 80060b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d104      	bne.n	80060d0 <USB_EPStartXfer+0x5d4>
 80060c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060ca:	3b01      	subs	r3, #1
 80060cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80060d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060da:	b29b      	uxth	r3, r3
 80060dc:	029b      	lsls	r3, r3, #10
 80060de:	b29b      	uxth	r3, r3
 80060e0:	4313      	orrs	r3, r2
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	e056      	b.n	80061a2 <USB_EPStartXfer+0x6a6>
 80060f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <USB_EPStartXfer+0x616>
 80060fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610a:	b29a      	uxth	r2, r3
 800610c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	e047      	b.n	80061a2 <USB_EPStartXfer+0x6a6>
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006116:	085b      	lsrs	r3, r3, #1
 8006118:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <USB_EPStartXfer+0x636>
 8006128:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800612c:	3301      	adds	r3, #1
 800612e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29a      	uxth	r2, r3
 8006138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800613c:	b29b      	uxth	r3, r3
 800613e:	029b      	lsls	r3, r3, #10
 8006140:	b29b      	uxth	r3, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	b29a      	uxth	r2, r3
 8006146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e02a      	b.n	80061a2 <USB_EPStartXfer+0x6a6>
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d122      	bne.n	80061a2 <USB_EPStartXfer+0x6a6>
 800615c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	653b      	str	r3, [r7, #80]	; 0x50
 8006168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006176:	b29b      	uxth	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617c:	4413      	add	r3, r2
 800617e:	653b      	str	r3, [r7, #80]	; 0x50
 8006180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	011a      	lsls	r2, r3, #4
 800618e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006190:	4413      	add	r3, r2
 8006192:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619c:	b29a      	uxth	r2, r3
 800619e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	891b      	ldrh	r3, [r3, #8]
 80061ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6959      	ldr	r1, [r3, #20]
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061d0:	6800      	ldr	r0, [r0, #0]
 80061d2:	f001 f982 	bl	80074da <USB_WritePMA>
            ep->xfer_buff += len;
 80061d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695a      	ldr	r2, [r3, #20]
 80061e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e6:	441a      	add	r2, r3
 80061e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6a1a      	ldr	r2, [r3, #32]
 8006200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	429a      	cmp	r2, r3
 800620e:	d90f      	bls.n	8006230 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006220:	1ad2      	subs	r2, r2, r3
 8006222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	621a      	str	r2, [r3, #32]
 800622e:	e00e      	b.n	800624e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2200      	movs	r2, #0
 800624c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800624e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	643b      	str	r3, [r7, #64]	; 0x40
 800625a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d177      	bne.n	800635a <USB_EPStartXfer+0x85e>
 800626a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	63bb      	str	r3, [r7, #56]	; 0x38
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006284:	b29b      	uxth	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	4413      	add	r3, r2
 800628c:	63bb      	str	r3, [r7, #56]	; 0x38
 800628e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	011a      	lsls	r2, r3, #4
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	4413      	add	r3, r2
 80062a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a4:	637b      	str	r3, [r7, #52]	; 0x34
 80062a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ba:	2b3e      	cmp	r3, #62	; 0x3e
 80062bc:	d921      	bls.n	8006302 <USB_EPStartXfer+0x806>
 80062be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <USB_EPStartXfer+0x7e2>
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	3b01      	subs	r3, #1
 80062da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	029b      	lsls	r3, r3, #10
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	4313      	orrs	r3, r2
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	e050      	b.n	80063a4 <USB_EPStartXfer+0x8a8>
 8006302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <USB_EPStartXfer+0x824>
 800630a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006318:	b29a      	uxth	r2, r3
 800631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e041      	b.n	80063a4 <USB_EPStartXfer+0x8a8>
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006324:	085b      	lsrs	r3, r3, #1
 8006326:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800632a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <USB_EPStartXfer+0x844>
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633a:	3301      	adds	r3, #1
 800633c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	b29a      	uxth	r2, r3
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	b29b      	uxth	r3, r3
 800634c:	029b      	lsls	r3, r3, #10
 800634e:	b29b      	uxth	r3, r3
 8006350:	4313      	orrs	r3, r2
 8006352:	b29a      	uxth	r2, r3
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	e024      	b.n	80063a4 <USB_EPStartXfer+0x8a8>
 800635a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d11c      	bne.n	80063a4 <USB_EPStartXfer+0x8a8>
 800636a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006378:	b29b      	uxth	r3, r3
 800637a:	461a      	mov	r2, r3
 800637c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637e:	4413      	add	r3, r2
 8006380:	643b      	str	r3, [r7, #64]	; 0x40
 8006382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	011a      	lsls	r2, r3, #4
 8006390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006392:	4413      	add	r3, r2
 8006394:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639e:	b29a      	uxth	r2, r3
 80063a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	895b      	ldrh	r3, [r3, #10]
 80063b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6959      	ldr	r1, [r3, #20]
 80063c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063d2:	6800      	ldr	r0, [r0, #0]
 80063d4:	f001 f881 	bl	80074da <USB_WritePMA>
 80063d8:	e227      	b.n	800682a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80063da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80063ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800640c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006410:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006442:	b29b      	uxth	r3, r3
 8006444:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006460:	b29b      	uxth	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006466:	4413      	add	r3, r2
 8006468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800646a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	011a      	lsls	r2, r3, #4
 8006478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647a:	4413      	add	r3, r2
 800647c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006480:	65bb      	str	r3, [r7, #88]	; 0x58
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006486:	b29a      	uxth	r2, r3
 8006488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800648a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	891b      	ldrh	r3, [r3, #8]
 8006498:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800649c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6959      	ldr	r1, [r3, #20]
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	f001 f80d 	bl	80074da <USB_WritePMA>
 80064c0:	e1b3      	b.n	800682a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80c6 	beq.w	8006694 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	673b      	str	r3, [r7, #112]	; 0x70
 8006514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d177      	bne.n	8006614 <USB_EPStartXfer+0xb18>
 8006524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653e:	b29b      	uxth	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006544:	4413      	add	r3, r2
 8006546:	66bb      	str	r3, [r7, #104]	; 0x68
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	011a      	lsls	r2, r3, #4
 8006556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006558:	4413      	add	r3, r2
 800655a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800655e:	667b      	str	r3, [r7, #100]	; 0x64
 8006560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800656a:	b29a      	uxth	r2, r3
 800656c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006574:	2b3e      	cmp	r3, #62	; 0x3e
 8006576:	d921      	bls.n	80065bc <USB_EPStartXfer+0xac0>
 8006578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006586:	f003 031f 	and.w	r3, r3, #31
 800658a:	2b00      	cmp	r3, #0
 800658c:	d104      	bne.n	8006598 <USB_EPStartXfer+0xa9c>
 800658e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006592:	3b01      	subs	r3, #1
 8006594:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29a      	uxth	r2, r3
 800659e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	029b      	lsls	r3, r3, #10
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	e050      	b.n	800665e <USB_EPStartXfer+0xb62>
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <USB_EPStartXfer+0xade>
 80065c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	e041      	b.n	800665e <USB_EPStartXfer+0xb62>
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d004      	beq.n	80065fa <USB_EPStartXfer+0xafe>
 80065f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065f4:	3301      	adds	r3, #1
 80065f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29a      	uxth	r2, r3
 8006600:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006604:	b29b      	uxth	r3, r3
 8006606:	029b      	lsls	r3, r3, #10
 8006608:	b29b      	uxth	r3, r3
 800660a:	4313      	orrs	r3, r2
 800660c:	b29a      	uxth	r2, r3
 800660e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e024      	b.n	800665e <USB_EPStartXfer+0xb62>
 8006614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d11c      	bne.n	800665e <USB_EPStartXfer+0xb62>
 8006624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006632:	b29b      	uxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006638:	4413      	add	r3, r2
 800663a:	673b      	str	r3, [r7, #112]	; 0x70
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	011a      	lsls	r2, r3, #4
 800664a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800664c:	4413      	add	r3, r2
 800664e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006658:	b29a      	uxth	r2, r3
 800665a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800665e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	895b      	ldrh	r3, [r3, #10]
 800666a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800666e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6959      	ldr	r1, [r3, #20]
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667e:	b29b      	uxth	r3, r3
 8006680:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006684:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006688:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800668c:	6800      	ldr	r0, [r0, #0]
 800668e:	f000 ff24 	bl	80074da <USB_WritePMA>
 8006692:	e0ca      	b.n	800682a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d177      	bne.n	8006794 <USB_EPStartXfer+0xc98>
 80066a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066be:	b29b      	uxth	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066c4:	4413      	add	r3, r2
 80066c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	011a      	lsls	r2, r3, #4
 80066d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066d8:	4413      	add	r3, r2
 80066da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066de:	67bb      	str	r3, [r7, #120]	; 0x78
 80066e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f4:	2b3e      	cmp	r3, #62	; 0x3e
 80066f6:	d921      	bls.n	800673c <USB_EPStartXfer+0xc40>
 80066f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	2b00      	cmp	r3, #0
 800670c:	d104      	bne.n	8006718 <USB_EPStartXfer+0xc1c>
 800670e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006712:	3b01      	subs	r3, #1
 8006714:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29a      	uxth	r2, r3
 800671e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006722:	b29b      	uxth	r3, r3
 8006724:	029b      	lsls	r3, r3, #10
 8006726:	b29b      	uxth	r3, r3
 8006728:	4313      	orrs	r3, r2
 800672a:	b29b      	uxth	r3, r3
 800672c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006734:	b29a      	uxth	r2, r3
 8006736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006738:	801a      	strh	r2, [r3, #0]
 800673a:	e05c      	b.n	80067f6 <USB_EPStartXfer+0xcfa>
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <USB_EPStartXfer+0xc5e>
 8006744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800674e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006752:	b29a      	uxth	r2, r3
 8006754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e04d      	b.n	80067f6 <USB_EPStartXfer+0xcfa>
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <USB_EPStartXfer+0xc7e>
 8006770:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006774:	3301      	adds	r3, #1
 8006776:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800677a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29a      	uxth	r2, r3
 8006780:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006784:	b29b      	uxth	r3, r3
 8006786:	029b      	lsls	r3, r3, #10
 8006788:	b29b      	uxth	r3, r3
 800678a:	4313      	orrs	r3, r2
 800678c:	b29a      	uxth	r2, r3
 800678e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	e030      	b.n	80067f6 <USB_EPStartXfer+0xcfa>
 8006794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	785b      	ldrb	r3, [r3, #1]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d128      	bne.n	80067f6 <USB_EPStartXfer+0xcfa>
 80067a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067c8:	4413      	add	r3, r2
 80067ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	011a      	lsls	r2, r3, #4
 80067dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067e0:	4413      	add	r3, r2
 80067e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	891b      	ldrh	r3, [r3, #8]
 8006802:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6959      	ldr	r1, [r3, #20]
 8006812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006816:	b29b      	uxth	r3, r3
 8006818:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800681c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006820:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006824:	6800      	ldr	r0, [r0, #0]
 8006826:	f000 fe58 	bl	80074da <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800682a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800682e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006850:	817b      	strh	r3, [r7, #10]
 8006852:	897b      	ldrh	r3, [r7, #10]
 8006854:	f083 0310 	eor.w	r3, r3, #16
 8006858:	817b      	strh	r3, [r7, #10]
 800685a:	897b      	ldrh	r3, [r7, #10]
 800685c:	f083 0320 	eor.w	r3, r3, #32
 8006860:	817b      	strh	r3, [r7, #10]
 8006862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	897b      	ldrh	r3, [r7, #10]
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]
 8006892:	f000 bcde 	b.w	8007252 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	7b1b      	ldrb	r3, [r3, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 80bb 	bne.w	8006a1e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d917      	bls.n	80068f4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80068c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80068d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e4:	1ad2      	subs	r2, r2, r3
 80068e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	619a      	str	r2, [r3, #24]
 80068f2:	e00e      	b.n	8006912 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80068f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2200      	movs	r2, #0
 8006910:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800692e:	b29b      	uxth	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006936:	4413      	add	r3, r2
 8006938:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800693c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	011a      	lsls	r2, r3, #4
 800694a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800694e:	4413      	add	r3, r2
 8006950:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006954:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006964:	b29a      	uxth	r2, r3
 8006966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800696a:	801a      	strh	r2, [r3, #0]
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006970:	2b3e      	cmp	r3, #62	; 0x3e
 8006972:	d924      	bls.n	80069be <USB_EPStartXfer+0xec2>
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800697e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2b00      	cmp	r3, #0
 8006988:	d104      	bne.n	8006994 <USB_EPStartXfer+0xe98>
 800698a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800698e:	3b01      	subs	r3, #1
 8006990:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29a      	uxth	r2, r3
 800699c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	029b      	lsls	r3, r3, #10
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	4313      	orrs	r3, r2
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069b8:	801a      	strh	r2, [r3, #0]
 80069ba:	f000 bc10 	b.w	80071de <USB_EPStartXfer+0x16e2>
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10c      	bne.n	80069e0 <USB_EPStartXfer+0xee4>
 80069c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	e3fe      	b.n	80071de <USB_EPStartXfer+0x16e2>
 80069e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d004      	beq.n	8006a00 <USB_EPStartXfer+0xf04>
 80069f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069fa:	3301      	adds	r3, #1
 80069fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	029b      	lsls	r3, r3, #10
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	4313      	orrs	r3, r2
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	e3df      	b.n	80071de <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	78db      	ldrb	r3, [r3, #3]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	f040 8218 	bne.w	8006e60 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f040 809d 	bne.w	8006b7c <USB_EPStartXfer+0x1080>
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a66:	4413      	add	r3, r2
 8006a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	011a      	lsls	r2, r3, #4
 8006a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a7e:	4413      	add	r3, r2
 8006a80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b3e      	cmp	r3, #62	; 0x3e
 8006aaa:	d92b      	bls.n	8006b04 <USB_EPStartXfer+0x1008>
 8006aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <USB_EPStartXfer+0xfe0>
 8006ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006adc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	029b      	lsls	r3, r3, #10
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	4313      	orrs	r3, r2
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e070      	b.n	8006be6 <USB_EPStartXfer+0x10ea>
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10c      	bne.n	8006b2e <USB_EPStartXfer+0x1032>
 8006b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e05b      	b.n	8006be6 <USB_EPStartXfer+0x10ea>
 8006b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <USB_EPStartXfer+0x1062>
 8006b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b58:	3301      	adds	r3, #1
 8006b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	4313      	orrs	r3, r2
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b78:	801a      	strh	r2, [r3, #0]
 8006b7a:	e034      	b.n	8006be6 <USB_EPStartXfer+0x10ea>
 8006b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	785b      	ldrb	r3, [r3, #1]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d12c      	bne.n	8006be6 <USB_EPStartXfer+0x10ea>
 8006b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	461a      	mov	r2, r3
 8006bac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	011a      	lsls	r2, r3, #4
 8006bc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bc8:	4413      	add	r3, r2
 8006bca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006be4:	801a      	strh	r2, [r3, #0]
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f040 809d 	bne.w	8006d40 <USB_EPStartXfer+0x1244>
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	011a      	lsls	r2, r3, #4
 8006c3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c42:	4413      	add	r3, r2
 8006c44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006c6e:	d92b      	bls.n	8006cc8 <USB_EPStartXfer+0x11cc>
 8006c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d104      	bne.n	8006ca0 <USB_EPStartXfer+0x11a4>
 8006c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	029b      	lsls	r3, r3, #10
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cc4:	801a      	strh	r2, [r3, #0]
 8006cc6:	e069      	b.n	8006d9c <USB_EPStartXfer+0x12a0>
 8006cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10c      	bne.n	8006cf2 <USB_EPStartXfer+0x11f6>
 8006cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	e054      	b.n	8006d9c <USB_EPStartXfer+0x12a0>
 8006cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	085b      	lsrs	r3, r3, #1
 8006d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <USB_EPStartXfer+0x1226>
 8006d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	029b      	lsls	r3, r3, #10
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d3c:	801a      	strh	r2, [r3, #0]
 8006d3e:	e02d      	b.n	8006d9c <USB_EPStartXfer+0x12a0>
 8006d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d125      	bne.n	8006d9c <USB_EPStartXfer+0x12a0>
 8006d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d66:	4413      	add	r3, r2
 8006d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	011a      	lsls	r2, r3, #4
 8006d7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d7e:	4413      	add	r3, r2
 8006d80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d9a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8218 	beq.w	80071de <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006dce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <USB_EPStartXfer+0x12ea>
 8006dda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10d      	bne.n	8006e02 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006de6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f040 81f5 	bne.w	80071de <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006df4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f040 81ee 	bne.w	80071de <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e28:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	441a      	add	r2, r3
 8006e46:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	8013      	strh	r3, [r2, #0]
 8006e5e:	e1be      	b.n	80071de <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	78db      	ldrb	r3, [r3, #3]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	f040 81b4 	bne.w	80071da <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d917      	bls.n	8006ebe <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eae:	1ad2      	subs	r2, r2, r3
 8006eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	619a      	str	r2, [r3, #24]
 8006ebc:	e00e      	b.n	8006edc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f040 8085 	bne.w	8006ff8 <USB_EPStartXfer+0x14fc>
 8006eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f12:	4413      	add	r3, r2
 8006f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	011a      	lsls	r2, r3, #4
 8006f26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f4e:	d923      	bls.n	8006f98 <USB_EPStartXfer+0x149c>
 8006f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d104      	bne.n	8006f70 <USB_EPStartXfer+0x1474>
 8006f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	029b      	lsls	r3, r3, #10
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	4313      	orrs	r3, r2
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	e060      	b.n	800705a <USB_EPStartXfer+0x155e>
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10c      	bne.n	8006fba <USB_EPStartXfer+0x14be>
 8006fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	e04f      	b.n	800705a <USB_EPStartXfer+0x155e>
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <USB_EPStartXfer+0x14de>
 8006fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	029b      	lsls	r3, r3, #10
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e030      	b.n	800705a <USB_EPStartXfer+0x155e>
 8006ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d128      	bne.n	800705a <USB_EPStartXfer+0x155e>
 8007008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007024:	b29b      	uxth	r3, r3
 8007026:	461a      	mov	r2, r3
 8007028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800702c:	4413      	add	r3, r2
 800702e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	011a      	lsls	r2, r3, #4
 8007040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007044:	4413      	add	r3, r2
 8007046:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800704a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800704e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007052:	b29a      	uxth	r2, r3
 8007054:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007058:	801a      	strh	r2, [r3, #0]
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	785b      	ldrb	r3, [r3, #1]
 8007074:	2b00      	cmp	r3, #0
 8007076:	f040 8085 	bne.w	8007184 <USB_EPStartXfer+0x1688>
 800707a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007096:	b29b      	uxth	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800709e:	4413      	add	r3, r2
 80070a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80070a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	011a      	lsls	r2, r3, #4
 80070b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070b6:	4413      	add	r3, r2
 80070b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d8:	2b3e      	cmp	r3, #62	; 0x3e
 80070da:	d923      	bls.n	8007124 <USB_EPStartXfer+0x1628>
 80070dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <USB_EPStartXfer+0x1600>
 80070f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070f6:	3b01      	subs	r3, #1
 80070f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	b29a      	uxth	r2, r3
 8007104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007108:	b29b      	uxth	r3, r3
 800710a:	029b      	lsls	r3, r3, #10
 800710c:	b29b      	uxth	r3, r3
 800710e:	4313      	orrs	r3, r2
 8007110:	b29b      	uxth	r3, r3
 8007112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711a:	b29a      	uxth	r2, r3
 800711c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007120:	801a      	strh	r2, [r3, #0]
 8007122:	e05c      	b.n	80071de <USB_EPStartXfer+0x16e2>
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10c      	bne.n	8007146 <USB_EPStartXfer+0x164a>
 800712c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713c:	b29a      	uxth	r2, r3
 800713e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	e04b      	b.n	80071de <USB_EPStartXfer+0x16e2>
 8007146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714a:	085b      	lsrs	r3, r3, #1
 800714c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <USB_EPStartXfer+0x166a>
 800715c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007160:	3301      	adds	r3, #1
 8007162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29a      	uxth	r2, r3
 800716e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007172:	b29b      	uxth	r3, r3
 8007174:	029b      	lsls	r3, r3, #10
 8007176:	b29b      	uxth	r3, r3
 8007178:	4313      	orrs	r3, r2
 800717a:	b29a      	uxth	r2, r3
 800717c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	e02c      	b.n	80071de <USB_EPStartXfer+0x16e2>
 8007184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d124      	bne.n	80071de <USB_EPStartXfer+0x16e2>
 8007194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	461a      	mov	r2, r3
 80071a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071aa:	4413      	add	r3, r2
 80071ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	011a      	lsls	r2, r3, #4
 80071be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071c2:	4413      	add	r3, r2
 80071c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	e001      	b.n	80071de <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e03a      	b.n	8007254 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007204:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007208:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800720c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007210:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007214:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007218:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800721c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800723e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800724a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800724e:	b29b      	uxth	r3, r3
 8007250:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d020      	beq.n	80072b2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007286:	81bb      	strh	r3, [r7, #12]
 8007288:	89bb      	ldrh	r3, [r7, #12]
 800728a:	f083 0310 	eor.w	r3, r3, #16
 800728e:	81bb      	strh	r3, [r7, #12]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	441a      	add	r2, r3
 800729a:	89bb      	ldrh	r3, [r7, #12]
 800729c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	8013      	strh	r3, [r2, #0]
 80072b0:	e01f      	b.n	80072f2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	81fb      	strh	r3, [r7, #14]
 80072ca:	89fb      	ldrh	r3, [r7, #14]
 80072cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072d0:	81fb      	strh	r3, [r7, #14]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	441a      	add	r2, r3
 80072dc:	89fb      	ldrh	r3, [r7, #14]
 80072de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr

080072fe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072fe:	b480      	push	{r7}
 8007300:	b087      	sub	sp, #28
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	7b1b      	ldrb	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f040 809d 	bne.w	800744c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	785b      	ldrb	r3, [r3, #1]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d04c      	beq.n	80073b4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	823b      	strh	r3, [r7, #16]
 8007328:	8a3b      	ldrh	r3, [r7, #16]
 800732a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01b      	beq.n	800736a <USB_EPClearStall+0x6c>
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	b29b      	uxth	r3, r3
 8007340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007348:	81fb      	strh	r3, [r7, #14]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	441a      	add	r2, r3
 8007354:	89fb      	ldrh	r3, [r7, #14]
 8007356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800735a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007362:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007366:	b29b      	uxth	r3, r3
 8007368:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	78db      	ldrb	r3, [r3, #3]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d06c      	beq.n	800744c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	b29b      	uxth	r3, r3
 8007380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007388:	81bb      	strh	r3, [r7, #12]
 800738a:	89bb      	ldrh	r3, [r7, #12]
 800738c:	f083 0320 	eor.w	r3, r3, #32
 8007390:	81bb      	strh	r3, [r7, #12]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	441a      	add	r2, r3
 800739c:	89bb      	ldrh	r3, [r7, #12]
 800739e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	8013      	strh	r3, [r2, #0]
 80073b2:	e04b      	b.n	800744c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	82fb      	strh	r3, [r7, #22]
 80073c2:	8afb      	ldrh	r3, [r7, #22]
 80073c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01b      	beq.n	8007404 <USB_EPClearStall+0x106>
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	82bb      	strh	r3, [r7, #20]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	8abb      	ldrh	r3, [r7, #20]
 80073f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007400:	b29b      	uxth	r3, r3
 8007402:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741a:	827b      	strh	r3, [r7, #18]
 800741c:	8a7b      	ldrh	r3, [r7, #18]
 800741e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007422:	827b      	strh	r3, [r7, #18]
 8007424:	8a7b      	ldrh	r3, [r7, #18]
 8007426:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800742a:	827b      	strh	r3, [r7, #18]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	441a      	add	r2, r3
 8007436:	8a7b      	ldrh	r3, [r7, #18]
 8007438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007448:	b29b      	uxth	r3, r3
 800744a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr

08007458 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d103      	bne.n	8007472 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2280      	movs	r2, #128	; 0x80
 800746e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr

0800747e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr

080074a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80074b8:	68fb      	ldr	r3, [r7, #12]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bc80      	pop	{r7}
 80074d8:	4770      	bx	lr

080074da <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074da:	b480      	push	{r7}
 80074dc:	b08b      	sub	sp, #44	; 0x2c
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	4611      	mov	r1, r2
 80074e6:	461a      	mov	r2, r3
 80074e8:	460b      	mov	r3, r1
 80074ea:	80fb      	strh	r3, [r7, #6]
 80074ec:	4613      	mov	r3, r2
 80074ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80074f0:	88bb      	ldrh	r3, [r7, #4]
 80074f2:	3301      	adds	r3, #1
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007500:	88fb      	ldrh	r3, [r7, #6]
 8007502:	005a      	lsls	r2, r3, #1
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800750c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
 8007512:	e01e      	b.n	8007552 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	3301      	adds	r3, #1
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	b21a      	sxth	r2, r3
 8007524:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007528:	4313      	orrs	r3, r2
 800752a:	b21b      	sxth	r3, r3
 800752c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	8a7a      	ldrh	r2, [r7, #18]
 8007532:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	3302      	adds	r3, #2
 8007538:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	3302      	adds	r3, #2
 800753e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	3301      	adds	r3, #1
 8007544:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	3301      	adds	r3, #1
 800754a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	3b01      	subs	r3, #1
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1dd      	bne.n	8007514 <USB_WritePMA+0x3a>
  }
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	372c      	adds	r7, #44	; 0x2c
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr

08007564 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007564:	b480      	push	{r7}
 8007566:	b08b      	sub	sp, #44	; 0x2c
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4611      	mov	r1, r2
 8007570:	461a      	mov	r2, r3
 8007572:	460b      	mov	r3, r1
 8007574:	80fb      	strh	r3, [r7, #6]
 8007576:	4613      	mov	r3, r2
 8007578:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800757a:	88bb      	ldrh	r3, [r7, #4]
 800757c:	085b      	lsrs	r3, r3, #1
 800757e:	b29b      	uxth	r3, r3
 8007580:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800758a:	88fb      	ldrh	r3, [r7, #6]
 800758c:	005a      	lsls	r2, r3, #1
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007596:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
 800759c:	e01b      	b.n	80075d6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	3302      	adds	r3, #2
 80075aa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3301      	adds	r3, #1
 80075b8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	0a1b      	lsrs	r3, r3, #8
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	3301      	adds	r3, #1
 80075c8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	3302      	adds	r3, #2
 80075ce:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	3b01      	subs	r3, #1
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e0      	bne.n	800759e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80075dc:	88bb      	ldrh	r3, [r7, #4]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d007      	beq.n	80075f8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	701a      	strb	r2, [r3, #0]
  }
}
 80075f8:	bf00      	nop
 80075fa:	372c      	adds	r7, #44	; 0x2c
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr

08007602 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	7c1b      	ldrb	r3, [r3, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d115      	bne.n	8007646 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800761a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800761e:	2202      	movs	r2, #2
 8007620:	2181      	movs	r1, #129	; 0x81
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 fe8d 	bl	8009342 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800762e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007632:	2202      	movs	r2, #2
 8007634:	2101      	movs	r1, #1
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fe83 	bl	8009342 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007644:	e012      	b.n	800766c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007646:	2340      	movs	r3, #64	; 0x40
 8007648:	2202      	movs	r2, #2
 800764a:	2181      	movs	r1, #129	; 0x81
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 fe78 	bl	8009342 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007658:	2340      	movs	r3, #64	; 0x40
 800765a:	2202      	movs	r2, #2
 800765c:	2101      	movs	r1, #1
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fe6f 	bl	8009342 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800766c:	2308      	movs	r3, #8
 800766e:	2203      	movs	r2, #3
 8007670:	2182      	movs	r1, #130	; 0x82
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 fe65 	bl	8009342 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800767e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007682:	f001 ff85 	bl	8009590 <USBD_static_malloc>
 8007686:	4602      	mov	r2, r0
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
 800769c:	e026      	b.n	80076ec <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7c1b      	ldrb	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d109      	bne.n	80076dc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076d2:	2101      	movs	r1, #1
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 ff24 	bl	8009522 <USBD_LL_PrepareReceive>
 80076da:	e007      	b.n	80076ec <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076e2:	2340      	movs	r3, #64	; 0x40
 80076e4:	2101      	movs	r1, #1
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f001 ff1b 	bl	8009522 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007706:	2181      	movs	r1, #129	; 0x81
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fe40 	bl	800938e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007714:	2101      	movs	r1, #1
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 fe39 	bl	800938e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007724:	2182      	movs	r1, #130	; 0x82
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 fe31 	bl	800938e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00e      	beq.n	800775a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774c:	4618      	mov	r0, r3
 800774e:	f001 ff2b 	bl	80095a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800775a:	7bfb      	ldrb	r3, [r7, #15]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007774:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800778a:	2b00      	cmp	r3, #0
 800778c:	d039      	beq.n	8007802 <USBD_CDC_Setup+0x9e>
 800778e:	2b20      	cmp	r3, #32
 8007790:	d17f      	bne.n	8007892 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	88db      	ldrh	r3, [r3, #6]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d029      	beq.n	80077ee <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	b25b      	sxtb	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	da11      	bge.n	80077c8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80077b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	88d2      	ldrh	r2, [r2, #6]
 80077b6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077b8:	6939      	ldr	r1, [r7, #16]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	88db      	ldrh	r3, [r3, #6]
 80077be:	461a      	mov	r2, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 fa0a 	bl	8008bda <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80077c6:	e06b      	b.n	80078a0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	785a      	ldrb	r2, [r3, #1]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	88db      	ldrh	r3, [r3, #6]
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077de:	6939      	ldr	r1, [r7, #16]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	88db      	ldrh	r3, [r3, #6]
 80077e4:	461a      	mov	r2, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 fa25 	bl	8008c36 <USBD_CtlPrepareRx>
      break;
 80077ec:	e058      	b.n	80078a0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	7850      	ldrb	r0, [r2, #1]
 80077fa:	2200      	movs	r2, #0
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	4798      	blx	r3
      break;
 8007800:	e04e      	b.n	80078a0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	785b      	ldrb	r3, [r3, #1]
 8007806:	2b0b      	cmp	r3, #11
 8007808:	d02e      	beq.n	8007868 <USBD_CDC_Setup+0x104>
 800780a:	2b0b      	cmp	r3, #11
 800780c:	dc38      	bgt.n	8007880 <USBD_CDC_Setup+0x11c>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <USBD_CDC_Setup+0xb4>
 8007812:	2b0a      	cmp	r3, #10
 8007814:	d014      	beq.n	8007840 <USBD_CDC_Setup+0xdc>
 8007816:	e033      	b.n	8007880 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800781e:	2b03      	cmp	r3, #3
 8007820:	d107      	bne.n	8007832 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007822:	f107 030c 	add.w	r3, r7, #12
 8007826:	2202      	movs	r2, #2
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 f9d5 	bl	8008bda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007830:	e02e      	b.n	8007890 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 f966 	bl	8008b06 <USBD_CtlError>
            ret = USBD_FAIL;
 800783a:	2302      	movs	r3, #2
 800783c:	75fb      	strb	r3, [r7, #23]
          break;
 800783e:	e027      	b.n	8007890 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007846:	2b03      	cmp	r3, #3
 8007848:	d107      	bne.n	800785a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800784a:	f107 030f 	add.w	r3, r7, #15
 800784e:	2201      	movs	r2, #1
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f9c1 	bl	8008bda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007858:	e01a      	b.n	8007890 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 f952 	bl	8008b06 <USBD_CtlError>
            ret = USBD_FAIL;
 8007862:	2302      	movs	r3, #2
 8007864:	75fb      	strb	r3, [r7, #23]
          break;
 8007866:	e013      	b.n	8007890 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786e:	2b03      	cmp	r3, #3
 8007870:	d00d      	beq.n	800788e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 f946 	bl	8008b06 <USBD_CtlError>
            ret = USBD_FAIL;
 800787a:	2302      	movs	r3, #2
 800787c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800787e:	e006      	b.n	800788e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f93f 	bl	8008b06 <USBD_CtlError>
          ret = USBD_FAIL;
 8007888:	2302      	movs	r3, #2
 800788a:	75fb      	strb	r3, [r7, #23]
          break;
 800788c:	e000      	b.n	8007890 <USBD_CDC_Setup+0x12c>
          break;
 800788e:	bf00      	nop
      }
      break;
 8007890:	e006      	b.n	80078a0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 f936 	bl	8008b06 <USBD_CtlError>
      ret = USBD_FAIL;
 800789a:	2302      	movs	r3, #2
 800789c:	75fb      	strb	r3, [r7, #23]
      break;
 800789e:	bf00      	nop
  }

  return ret;
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078c4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d03a      	beq.n	8007946 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80078d0:	78fa      	ldrb	r2, [r7, #3]
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	440b      	add	r3, r1
 80078de:	331c      	adds	r3, #28
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d029      	beq.n	800793a <USBD_CDC_DataIn+0x90>
 80078e6:	78fa      	ldrb	r2, [r7, #3]
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	440b      	add	r3, r1
 80078f4:	331c      	adds	r3, #28
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	78f9      	ldrb	r1, [r7, #3]
 80078fa:	68b8      	ldr	r0, [r7, #8]
 80078fc:	460b      	mov	r3, r1
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	440b      	add	r3, r1
 8007902:	00db      	lsls	r3, r3, #3
 8007904:	4403      	add	r3, r0
 8007906:	3320      	adds	r3, #32
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	fbb2 f1f3 	udiv	r1, r2, r3
 800790e:	fb01 f303 	mul.w	r3, r1, r3
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d110      	bne.n	800793a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007918:	78fa      	ldrb	r2, [r7, #3]
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	331c      	adds	r3, #28
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800792c:	78f9      	ldrb	r1, [r7, #3]
 800792e:	2300      	movs	r3, #0
 8007930:	2200      	movs	r2, #0
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fdd2 	bl	80094dc <USBD_LL_Transmit>
 8007938:	e003      	b.n	8007942 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	e000      	b.n	8007948 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007946:	2302      	movs	r3, #2
  }
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007962:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fdfd 	bl	8009568 <USBD_LL_GetRxDataSize>
 800796e:	4602      	mov	r2, r0
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007994:	4611      	mov	r1, r2
 8007996:	4798      	blx	r3

    return USBD_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	e000      	b.n	800799e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800799c:	2302      	movs	r3, #2
  }
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d015      	beq.n	80079ec <USBD_CDC_EP0_RxReady+0x46>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079c6:	2bff      	cmp	r3, #255	; 0xff
 80079c8:	d010      	beq.n	80079ec <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80079d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079e0:	b292      	uxth	r2, r2
 80079e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	22ff      	movs	r2, #255	; 0xff
 80079e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2243      	movs	r2, #67	; 0x43
 8007a04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007a06:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bc80      	pop	{r7}
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	200000a0 	.word	0x200000a0

08007a18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2243      	movs	r2, #67	; 0x43
 8007a24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a26:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	2000005c 	.word	0x2000005c

08007a38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2243      	movs	r2, #67	; 0x43
 8007a44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a46:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	200000e4 	.word	0x200000e4

08007a58 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	220a      	movs	r2, #10
 8007a64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007a66:	4b03      	ldr	r3, [pc, #12]	; (8007a74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc80      	pop	{r7}
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20000018 	.word	0x20000018

08007a78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007a82:	2302      	movs	r3, #2
 8007a84:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr

08007aa4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ac2:	88fa      	ldrh	r2, [r7, #6]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	371c      	adds	r7, #28
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bc80      	pop	{r7}
 8007ad4:	4770      	bx	lr

08007ad6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr

08007afc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01c      	beq.n	8007b50 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d115      	bne.n	8007b4c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2181      	movs	r1, #129	; 0x81
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 fcca 	bl	80094dc <USBD_LL_Transmit>

      return USBD_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	e002      	b.n	8007b52 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e000      	b.n	8007b52 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007b50:	2302      	movs	r3, #2
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d017      	beq.n	8007ba4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7c1b      	ldrb	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b86:	2101      	movs	r1, #1
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fcca 	bl	8009522 <USBD_LL_PrepareReceive>
 8007b8e:	e007      	b.n	8007ba0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	2101      	movs	r1, #1
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 fcc1 	bl	8009522 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e000      	b.n	8007ba6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007ba4:	2302      	movs	r3, #2
  }
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e01a      	b.n	8007bfc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	79fa      	ldrb	r2, [r7, #7]
 8007bf2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f001 fb2f 	bl	8009258 <USBD_LL_Init>

  return USBD_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d006      	beq.n	8007c26 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
 8007c24:	e001      	b.n	8007c2a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c26:	2302      	movs	r3, #2
 8007c28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr

08007c36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fb64 	bl	800930c <USBD_LL_Start>

  return USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr

08007c62 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c6e:	2302      	movs	r3, #2
 8007c70:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00c      	beq.n	8007c96 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	4611      	mov	r1, r2
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	78fa      	ldrb	r2, [r7, #3]
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	4798      	blx	r3

  return USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fed8 	bl	8008a8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cec:	461a      	mov	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007cfa:	f003 031f 	and.w	r3, r3, #31
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d016      	beq.n	8007d30 <USBD_LL_SetupStage+0x6a>
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d81c      	bhi.n	8007d40 <USBD_LL_SetupStage+0x7a>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <USBD_LL_SetupStage+0x4a>
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d008      	beq.n	8007d20 <USBD_LL_SetupStage+0x5a>
 8007d0e:	e017      	b.n	8007d40 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f9cb 	bl	80080b4 <USBD_StdDevReq>
      break;
 8007d1e:	e01a      	b.n	8007d56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fa2d 	bl	8008188 <USBD_StdItfReq>
      break;
 8007d2e:	e012      	b.n	8007d56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fa6d 	bl	8008218 <USBD_StdEPReq>
      break;
 8007d3e:	e00a      	b.n	8007d56 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 fb3c 	bl	80093cc <USBD_LL_StallEP>
      break;
 8007d54:	bf00      	nop
  }

  return USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d14b      	bne.n	8007e0c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d134      	bne.n	8007df0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d919      	bls.n	8007dc6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	1ad2      	subs	r2, r2, r3
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d203      	bcs.n	8007db4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	e002      	b.n	8007dba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 ff57 	bl	8008c72 <USBD_CtlContinueRx>
 8007dc4:	e038      	b.n	8007e38 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d105      	bne.n	8007de8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 ff54 	bl	8008c96 <USBD_CtlSendStatus>
 8007dee:	e023      	b.n	8007e38 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007df6:	2b05      	cmp	r3, #5
 8007df8:	d11e      	bne.n	8007e38 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e02:	2100      	movs	r1, #0
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f001 fae1 	bl	80093cc <USBD_LL_StallEP>
 8007e0a:	e015      	b.n	8007e38 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00d      	beq.n	8007e34 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d108      	bne.n	8007e34 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	7afa      	ldrb	r2, [r7, #11]
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	4798      	blx	r3
 8007e32:	e001      	b.n	8007e38 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e34:	2302      	movs	r3, #2
 8007e36:	e000      	b.n	8007e3a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b086      	sub	sp, #24
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	607a      	str	r2, [r7, #4]
 8007e4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e50:	7afb      	ldrb	r3, [r7, #11]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d17f      	bne.n	8007f56 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3314      	adds	r3, #20
 8007e5a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d15c      	bne.n	8007f20 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d915      	bls.n	8007e9e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	1ad2      	subs	r2, r2, r3
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	461a      	mov	r2, r3
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 fec1 	bl	8008c12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e90:	2300      	movs	r3, #0
 8007e92:	2200      	movs	r2, #0
 8007e94:	2100      	movs	r1, #0
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f001 fb43 	bl	8009522 <USBD_LL_PrepareReceive>
 8007e9c:	e04e      	b.n	8007f3c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	6912      	ldr	r2, [r2, #16]
 8007ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eaa:	fb01 f202 	mul.w	r2, r1, r2
 8007eae:	1a9b      	subs	r3, r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d11c      	bne.n	8007eee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d316      	bcc.n	8007eee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d20f      	bcs.n	8007eee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 fe9d 	bl	8008c12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f001 fb1b 	bl	8009522 <USBD_LL_PrepareReceive>
 8007eec:	e026      	b.n	8007f3c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d105      	bne.n	8007f10 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f10:	2180      	movs	r1, #128	; 0x80
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f001 fa5a 	bl	80093cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 fecf 	bl	8008cbc <USBD_CtlReceiveStatus>
 8007f1e:	e00d      	b.n	8007f3c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d004      	beq.n	8007f34 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d103      	bne.n	8007f3c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f34:	2180      	movs	r1, #128	; 0x80
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f001 fa48 	bl	80093cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d11d      	bne.n	8007f82 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7ff fe81 	bl	8007c4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f54:	e015      	b.n	8007f82 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00d      	beq.n	8007f7e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d108      	bne.n	8007f7e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	7afa      	ldrb	r2, [r7, #11]
 8007f76:	4611      	mov	r1, r2
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	4798      	blx	r3
 8007f7c:	e001      	b.n	8007f82 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e000      	b.n	8007f84 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f94:	2340      	movs	r3, #64	; 0x40
 8007f96:	2200      	movs	r2, #0
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 f9d1 	bl	8009342 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2240      	movs	r2, #64	; 0x40
 8007fac:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fb0:	2340      	movs	r3, #64	; 0x40
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2180      	movs	r1, #128	; 0x80
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 f9c3 	bl	8009342 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2240      	movs	r2, #64	; 0x40
 8007fc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d009      	beq.n	8008004 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6852      	ldr	r2, [r2, #4]
 8007ffc:	b2d2      	uxtb	r2, r2
 8007ffe:	4611      	mov	r1, r2
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	4798      	blx	r3
  }

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	78fa      	ldrb	r2, [r7, #3]
 800801e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr

0800802c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2204      	movs	r2, #4
 8008044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	bc80      	pop	{r7}
 8008052:	4770      	bx	lr

08008054 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008062:	2b04      	cmp	r3, #4
 8008064:	d105      	bne.n	8008072 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr

0800807e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808c:	2b03      	cmp	r3, #3
 800808e:	d10b      	bne.n	80080a8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ca:	2b40      	cmp	r3, #64	; 0x40
 80080cc:	d005      	beq.n	80080da <USBD_StdDevReq+0x26>
 80080ce:	2b40      	cmp	r3, #64	; 0x40
 80080d0:	d84f      	bhi.n	8008172 <USBD_StdDevReq+0xbe>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <USBD_StdDevReq+0x36>
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d14b      	bne.n	8008172 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
      break;
 80080e8:	e048      	b.n	800817c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d839      	bhi.n	8008166 <USBD_StdDevReq+0xb2>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <USBD_StdDevReq+0x44>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008149 	.word	0x08008149
 80080fc:	0800815d 	.word	0x0800815d
 8008100:	08008167 	.word	0x08008167
 8008104:	08008153 	.word	0x08008153
 8008108:	08008167 	.word	0x08008167
 800810c:	0800812b 	.word	0x0800812b
 8008110:	08008121 	.word	0x08008121
 8008114:	08008167 	.word	0x08008167
 8008118:	0800813f 	.word	0x0800813f
 800811c:	08008135 	.word	0x08008135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f9dc 	bl	80084e0 <USBD_GetDescriptor>
          break;
 8008128:	e022      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fb3f 	bl	80087b0 <USBD_SetAddress>
          break;
 8008132:	e01d      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fb7e 	bl	8008838 <USBD_SetConfig>
          break;
 800813c:	e018      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fc07 	bl	8008954 <USBD_GetConfig>
          break;
 8008146:	e013      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fc37 	bl	80089be <USBD_GetStatus>
          break;
 8008150:	e00e      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fc65 	bl	8008a24 <USBD_SetFeature>
          break;
 800815a:	e009      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fc74 	bl	8008a4c <USBD_ClrFeature>
          break;
 8008164:	e004      	b.n	8008170 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fccc 	bl	8008b06 <USBD_CtlError>
          break;
 800816e:	bf00      	nop
      }
      break;
 8008170:	e004      	b.n	800817c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fcc6 	bl	8008b06 <USBD_CtlError>
      break;
 800817a:	bf00      	nop
  }

  return ret;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop

08008188 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800819e:	2b40      	cmp	r3, #64	; 0x40
 80081a0:	d005      	beq.n	80081ae <USBD_StdItfReq+0x26>
 80081a2:	2b40      	cmp	r3, #64	; 0x40
 80081a4:	d82e      	bhi.n	8008204 <USBD_StdItfReq+0x7c>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <USBD_StdItfReq+0x26>
 80081aa:	2b20      	cmp	r3, #32
 80081ac:	d12a      	bne.n	8008204 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b4:	3b01      	subs	r3, #1
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d81d      	bhi.n	80081f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	889b      	ldrh	r3, [r3, #4]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d813      	bhi.n	80081ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	88db      	ldrh	r3, [r3, #6]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d110      	bne.n	8008200 <USBD_StdItfReq+0x78>
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10d      	bne.n	8008200 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fd56 	bl	8008c96 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081ea:	e009      	b.n	8008200 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fc89 	bl	8008b06 <USBD_CtlError>
          break;
 80081f4:	e004      	b.n	8008200 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fc84 	bl	8008b06 <USBD_CtlError>
          break;
 80081fe:	e000      	b.n	8008202 <USBD_StdItfReq+0x7a>
          break;
 8008200:	bf00      	nop
      }
      break;
 8008202:	e004      	b.n	800820e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fc7d 	bl	8008b06 <USBD_CtlError>
      break;
 800820c:	bf00      	nop
  }

  return USBD_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	889b      	ldrh	r3, [r3, #4]
 800822a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008234:	2b40      	cmp	r3, #64	; 0x40
 8008236:	d007      	beq.n	8008248 <USBD_StdEPReq+0x30>
 8008238:	2b40      	cmp	r3, #64	; 0x40
 800823a:	f200 8146 	bhi.w	80084ca <USBD_StdEPReq+0x2b2>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <USBD_StdEPReq+0x40>
 8008242:	2b20      	cmp	r3, #32
 8008244:	f040 8141 	bne.w	80084ca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
      break;
 8008256:	e13d      	b.n	80084d4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008260:	2b20      	cmp	r3, #32
 8008262:	d10a      	bne.n	800827a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	e12d      	b.n	80084d6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	2b03      	cmp	r3, #3
 8008280:	d007      	beq.n	8008292 <USBD_StdEPReq+0x7a>
 8008282:	2b03      	cmp	r3, #3
 8008284:	f300 811b 	bgt.w	80084be <USBD_StdEPReq+0x2a6>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d072      	beq.n	8008372 <USBD_StdEPReq+0x15a>
 800828c:	2b01      	cmp	r3, #1
 800828e:	d03a      	beq.n	8008306 <USBD_StdEPReq+0xee>
 8008290:	e115      	b.n	80084be <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008298:	2b02      	cmp	r3, #2
 800829a:	d002      	beq.n	80082a2 <USBD_StdEPReq+0x8a>
 800829c:	2b03      	cmp	r3, #3
 800829e:	d015      	beq.n	80082cc <USBD_StdEPReq+0xb4>
 80082a0:	e02b      	b.n	80082fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00c      	beq.n	80082c2 <USBD_StdEPReq+0xaa>
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	2b80      	cmp	r3, #128	; 0x80
 80082ac:	d009      	beq.n	80082c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 f88a 	bl	80093cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082b8:	2180      	movs	r1, #128	; 0x80
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 f886 	bl	80093cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082c0:	e020      	b.n	8008304 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fc1e 	bl	8008b06 <USBD_CtlError>
              break;
 80082ca:	e01b      	b.n	8008304 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	885b      	ldrh	r3, [r3, #2]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10e      	bne.n	80082f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <USBD_StdEPReq+0xda>
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b80      	cmp	r3, #128	; 0x80
 80082de:	d008      	beq.n	80082f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	88db      	ldrh	r3, [r3, #6]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f86d 	bl	80093cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fccf 	bl	8008c96 <USBD_CtlSendStatus>

              break;
 80082f8:	e004      	b.n	8008304 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fc02 	bl	8008b06 <USBD_CtlError>
              break;
 8008302:	bf00      	nop
          }
          break;
 8008304:	e0e0      	b.n	80084c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830c:	2b02      	cmp	r3, #2
 800830e:	d002      	beq.n	8008316 <USBD_StdEPReq+0xfe>
 8008310:	2b03      	cmp	r3, #3
 8008312:	d015      	beq.n	8008340 <USBD_StdEPReq+0x128>
 8008314:	e026      	b.n	8008364 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00c      	beq.n	8008336 <USBD_StdEPReq+0x11e>
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b80      	cmp	r3, #128	; 0x80
 8008320:	d009      	beq.n	8008336 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 f850 	bl	80093cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800832c:	2180      	movs	r1, #128	; 0x80
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 f84c 	bl	80093cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008334:	e01c      	b.n	8008370 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fbe4 	bl	8008b06 <USBD_CtlError>
              break;
 800833e:	e017      	b.n	8008370 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	885b      	ldrh	r3, [r3, #2]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d112      	bne.n	800836e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 f857 	bl	800940a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fc9a 	bl	8008c96 <USBD_CtlSendStatus>
              }
              break;
 8008362:	e004      	b.n	800836e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fbcd 	bl	8008b06 <USBD_CtlError>
              break;
 800836c:	e000      	b.n	8008370 <USBD_StdEPReq+0x158>
              break;
 800836e:	bf00      	nop
          }
          break;
 8008370:	e0aa      	b.n	80084c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008378:	2b02      	cmp	r3, #2
 800837a:	d002      	beq.n	8008382 <USBD_StdEPReq+0x16a>
 800837c:	2b03      	cmp	r3, #3
 800837e:	d032      	beq.n	80083e6 <USBD_StdEPReq+0x1ce>
 8008380:	e097      	b.n	80084b2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d007      	beq.n	8008398 <USBD_StdEPReq+0x180>
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	2b80      	cmp	r3, #128	; 0x80
 800838c:	d004      	beq.n	8008398 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fbb8 	bl	8008b06 <USBD_CtlError>
                break;
 8008396:	e091      	b.n	80084bc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800839c:	2b00      	cmp	r3, #0
 800839e:	da0b      	bge.n	80083b8 <USBD_StdEPReq+0x1a0>
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	3310      	adds	r3, #16
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	4413      	add	r3, r2
 80083b4:	3304      	adds	r3, #4
 80083b6:	e00b      	b.n	80083d0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	3304      	adds	r3, #4
 80083d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2202      	movs	r2, #2
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fbfb 	bl	8008bda <USBD_CtlSendData>
              break;
 80083e4:	e06a      	b.n	80084bc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da11      	bge.n	8008412 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	f003 020f 	and.w	r2, r3, #15
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	3318      	adds	r3, #24
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d117      	bne.n	8008438 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fb7b 	bl	8008b06 <USBD_CtlError>
                  break;
 8008410:	e054      	b.n	80084bc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	f003 020f 	and.w	r2, r3, #15
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fb68 	bl	8008b06 <USBD_CtlError>
                  break;
 8008436:	e041      	b.n	80084bc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800843c:	2b00      	cmp	r3, #0
 800843e:	da0b      	bge.n	8008458 <USBD_StdEPReq+0x240>
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	3310      	adds	r3, #16
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	4413      	add	r3, r2
 8008454:	3304      	adds	r3, #4
 8008456:	e00b      	b.n	8008470 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	4413      	add	r3, r2
 800846e:	3304      	adds	r3, #4
 8008470:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <USBD_StdEPReq+0x266>
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	2b80      	cmp	r3, #128	; 0x80
 800847c:	d103      	bne.n	8008486 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	e00e      	b.n	80084a4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 ffdc 	bl	8009448 <USBD_LL_IsStallEP>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2201      	movs	r2, #1
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	e002      	b.n	80084a4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2202      	movs	r2, #2
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fb95 	bl	8008bda <USBD_CtlSendData>
              break;
 80084b0:	e004      	b.n	80084bc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fb26 	bl	8008b06 <USBD_CtlError>
              break;
 80084ba:	bf00      	nop
          }
          break;
 80084bc:	e004      	b.n	80084c8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fb20 	bl	8008b06 <USBD_CtlError>
          break;
 80084c6:	bf00      	nop
      }
      break;
 80084c8:	e004      	b.n	80084d4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fb1a 	bl	8008b06 <USBD_CtlError>
      break;
 80084d2:	bf00      	nop
  }

  return ret;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	885b      	ldrh	r3, [r3, #2]
 80084fa:	0a1b      	lsrs	r3, r3, #8
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	2b06      	cmp	r3, #6
 8008502:	f200 8128 	bhi.w	8008756 <USBD_GetDescriptor+0x276>
 8008506:	a201      	add	r2, pc, #4	; (adr r2, 800850c <USBD_GetDescriptor+0x2c>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	08008529 	.word	0x08008529
 8008510:	08008541 	.word	0x08008541
 8008514:	08008581 	.word	0x08008581
 8008518:	08008757 	.word	0x08008757
 800851c:	08008757 	.word	0x08008757
 8008520:	080086f7 	.word	0x080086f7
 8008524:	08008723 	.word	0x08008723
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	7c12      	ldrb	r2, [r2, #16]
 8008534:	f107 0108 	add.w	r1, r7, #8
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
      break;
 800853e:	e112      	b.n	8008766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7c1b      	ldrb	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10d      	bne.n	8008564 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008550:	f107 0208 	add.w	r2, r7, #8
 8008554:	4610      	mov	r0, r2
 8008556:	4798      	blx	r3
 8008558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3301      	adds	r3, #1
 800855e:	2202      	movs	r2, #2
 8008560:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008562:	e100      	b.n	8008766 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856c:	f107 0208 	add.w	r2, r7, #8
 8008570:	4610      	mov	r0, r2
 8008572:	4798      	blx	r3
 8008574:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	2202      	movs	r2, #2
 800857c:	701a      	strb	r2, [r3, #0]
      break;
 800857e:	e0f2      	b.n	8008766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	885b      	ldrh	r3, [r3, #2]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b05      	cmp	r3, #5
 8008588:	f200 80ac 	bhi.w	80086e4 <USBD_GetDescriptor+0x204>
 800858c:	a201      	add	r2, pc, #4	; (adr r2, 8008594 <USBD_GetDescriptor+0xb4>)
 800858e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008592:	bf00      	nop
 8008594:	080085ad 	.word	0x080085ad
 8008598:	080085e1 	.word	0x080085e1
 800859c:	08008615 	.word	0x08008615
 80085a0:	08008649 	.word	0x08008649
 80085a4:	0800867d 	.word	0x0800867d
 80085a8:	080086b1 	.word	0x080086b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00b      	beq.n	80085d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	7c12      	ldrb	r2, [r2, #16]
 80085c4:	f107 0108 	add.w	r1, r7, #8
 80085c8:	4610      	mov	r0, r2
 80085ca:	4798      	blx	r3
 80085cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ce:	e091      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa97 	bl	8008b06 <USBD_CtlError>
            err++;
 80085d8:	7afb      	ldrb	r3, [r7, #11]
 80085da:	3301      	adds	r3, #1
 80085dc:	72fb      	strb	r3, [r7, #11]
          break;
 80085de:	e089      	b.n	80086f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	7c12      	ldrb	r2, [r2, #16]
 80085f8:	f107 0108 	add.w	r1, r7, #8
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
 8008600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008602:	e077      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa7d 	bl	8008b06 <USBD_CtlError>
            err++;
 800860c:	7afb      	ldrb	r3, [r7, #11]
 800860e:	3301      	adds	r3, #1
 8008610:	72fb      	strb	r3, [r7, #11]
          break;
 8008612:	e06f      	b.n	80086f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	7c12      	ldrb	r2, [r2, #16]
 800862c:	f107 0108 	add.w	r1, r7, #8
 8008630:	4610      	mov	r0, r2
 8008632:	4798      	blx	r3
 8008634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008636:	e05d      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fa63 	bl	8008b06 <USBD_CtlError>
            err++;
 8008640:	7afb      	ldrb	r3, [r7, #11]
 8008642:	3301      	adds	r3, #1
 8008644:	72fb      	strb	r3, [r7, #11]
          break;
 8008646:	e055      	b.n	80086f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00b      	beq.n	800866c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	7c12      	ldrb	r2, [r2, #16]
 8008660:	f107 0108 	add.w	r1, r7, #8
 8008664:	4610      	mov	r0, r2
 8008666:	4798      	blx	r3
 8008668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800866a:	e043      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fa49 	bl	8008b06 <USBD_CtlError>
            err++;
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	3301      	adds	r3, #1
 8008678:	72fb      	strb	r3, [r7, #11]
          break;
 800867a:	e03b      	b.n	80086f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00b      	beq.n	80086a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	7c12      	ldrb	r2, [r2, #16]
 8008694:	f107 0108 	add.w	r1, r7, #8
 8008698:	4610      	mov	r0, r2
 800869a:	4798      	blx	r3
 800869c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800869e:	e029      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fa2f 	bl	8008b06 <USBD_CtlError>
            err++;
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	3301      	adds	r3, #1
 80086ac:	72fb      	strb	r3, [r7, #11]
          break;
 80086ae:	e021      	b.n	80086f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00b      	beq.n	80086d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	7c12      	ldrb	r2, [r2, #16]
 80086c8:	f107 0108 	add.w	r1, r7, #8
 80086cc:	4610      	mov	r0, r2
 80086ce:	4798      	blx	r3
 80086d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086d2:	e00f      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fa15 	bl	8008b06 <USBD_CtlError>
            err++;
 80086dc:	7afb      	ldrb	r3, [r7, #11]
 80086de:	3301      	adds	r3, #1
 80086e0:	72fb      	strb	r3, [r7, #11]
          break;
 80086e2:	e007      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa0d 	bl	8008b06 <USBD_CtlError>
          err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80086f2:	e038      	b.n	8008766 <USBD_GetDescriptor+0x286>
 80086f4:	e037      	b.n	8008766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7c1b      	ldrb	r3, [r3, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d109      	bne.n	8008712 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008706:	f107 0208 	add.w	r2, r7, #8
 800870a:	4610      	mov	r0, r2
 800870c:	4798      	blx	r3
 800870e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008710:	e029      	b.n	8008766 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f9f6 	bl	8008b06 <USBD_CtlError>
        err++;
 800871a:	7afb      	ldrb	r3, [r7, #11]
 800871c:	3301      	adds	r3, #1
 800871e:	72fb      	strb	r3, [r7, #11]
      break;
 8008720:	e021      	b.n	8008766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	7c1b      	ldrb	r3, [r3, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10d      	bne.n	8008746 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008732:	f107 0208 	add.w	r2, r7, #8
 8008736:	4610      	mov	r0, r2
 8008738:	4798      	blx	r3
 800873a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3301      	adds	r3, #1
 8008740:	2207      	movs	r2, #7
 8008742:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008744:	e00f      	b.n	8008766 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f9dc 	bl	8008b06 <USBD_CtlError>
        err++;
 800874e:	7afb      	ldrb	r3, [r7, #11]
 8008750:	3301      	adds	r3, #1
 8008752:	72fb      	strb	r3, [r7, #11]
      break;
 8008754:	e007      	b.n	8008766 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f9d4 	bl	8008b06 <USBD_CtlError>
      err++;
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	3301      	adds	r3, #1
 8008762:	72fb      	strb	r3, [r7, #11]
      break;
 8008764:	bf00      	nop
  }

  if (err != 0U)
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d11c      	bne.n	80087a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800876c:	893b      	ldrh	r3, [r7, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d011      	beq.n	8008796 <USBD_GetDescriptor+0x2b6>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	88db      	ldrh	r3, [r3, #6]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00d      	beq.n	8008796 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	88da      	ldrh	r2, [r3, #6]
 800877e:	893b      	ldrh	r3, [r7, #8]
 8008780:	4293      	cmp	r3, r2
 8008782:	bf28      	it	cs
 8008784:	4613      	movcs	r3, r2
 8008786:	b29b      	uxth	r3, r3
 8008788:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800878a:	893b      	ldrh	r3, [r7, #8]
 800878c:	461a      	mov	r2, r3
 800878e:	68f9      	ldr	r1, [r7, #12]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fa22 	bl	8008bda <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	88db      	ldrh	r3, [r3, #6]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d104      	bne.n	80087a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa79 	bl	8008c96 <USBD_CtlSendStatus>
 80087a4:	e000      	b.n	80087a8 <USBD_GetDescriptor+0x2c8>
    return;
 80087a6:	bf00      	nop
    }
  }
}
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop

080087b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	889b      	ldrh	r3, [r3, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d130      	bne.n	8008824 <USBD_SetAddress+0x74>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	88db      	ldrh	r3, [r3, #6]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d12c      	bne.n	8008824 <USBD_SetAddress+0x74>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	2b7f      	cmp	r3, #127	; 0x7f
 80087d0:	d828      	bhi.n	8008824 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d104      	bne.n	80087f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f98b 	bl	8008b06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f0:	e01d      	b.n	800882e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	7bfa      	ldrb	r2, [r7, #15]
 80087f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fe4d 	bl	800949e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fa46 	bl	8008c96 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008818:	e009      	b.n	800882e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	e004      	b.n	800882e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f96d 	bl	8008b06 <USBD_CtlError>
  }
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	885b      	ldrh	r3, [r3, #2]
 8008846:	b2da      	uxtb	r2, r3
 8008848:	4b41      	ldr	r3, [pc, #260]	; (8008950 <USBD_SetConfig+0x118>)
 800884a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800884c:	4b40      	ldr	r3, [pc, #256]	; (8008950 <USBD_SetConfig+0x118>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d904      	bls.n	800885e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f955 	bl	8008b06 <USBD_CtlError>
 800885c:	e075      	b.n	800894a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008864:	2b02      	cmp	r3, #2
 8008866:	d002      	beq.n	800886e <USBD_SetConfig+0x36>
 8008868:	2b03      	cmp	r3, #3
 800886a:	d023      	beq.n	80088b4 <USBD_SetConfig+0x7c>
 800886c:	e062      	b.n	8008934 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800886e:	4b38      	ldr	r3, [pc, #224]	; (8008950 <USBD_SetConfig+0x118>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d01a      	beq.n	80088ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008876:	4b36      	ldr	r3, [pc, #216]	; (8008950 <USBD_SetConfig+0x118>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2203      	movs	r2, #3
 8008884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008888:	4b31      	ldr	r3, [pc, #196]	; (8008950 <USBD_SetConfig+0x118>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff f9e7 	bl	8007c62 <USBD_SetClassConfig>
 8008894:	4603      	mov	r3, r0
 8008896:	2b02      	cmp	r3, #2
 8008898:	d104      	bne.n	80088a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f932 	bl	8008b06 <USBD_CtlError>
            return;
 80088a2:	e052      	b.n	800894a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f9f6 	bl	8008c96 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088aa:	e04e      	b.n	800894a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f9f2 	bl	8008c96 <USBD_CtlSendStatus>
        break;
 80088b2:	e04a      	b.n	800894a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80088b4:	4b26      	ldr	r3, [pc, #152]	; (8008950 <USBD_SetConfig+0x118>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d112      	bne.n	80088e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2202      	movs	r2, #2
 80088c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80088c4:	4b22      	ldr	r3, [pc, #136]	; (8008950 <USBD_SetConfig+0x118>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	461a      	mov	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80088ce:	4b20      	ldr	r3, [pc, #128]	; (8008950 <USBD_SetConfig+0x118>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff f9e3 	bl	8007ca0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f9db 	bl	8008c96 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088e0:	e033      	b.n	800894a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80088e2:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <USBD_SetConfig+0x118>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d01d      	beq.n	800892c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff f9d1 	bl	8007ca0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <USBD_SetConfig+0x118>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008908:	4b11      	ldr	r3, [pc, #68]	; (8008950 <USBD_SetConfig+0x118>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff f9a7 	bl	8007c62 <USBD_SetClassConfig>
 8008914:	4603      	mov	r3, r0
 8008916:	2b02      	cmp	r3, #2
 8008918:	d104      	bne.n	8008924 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f8f2 	bl	8008b06 <USBD_CtlError>
            return;
 8008922:	e012      	b.n	800894a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f9b6 	bl	8008c96 <USBD_CtlSendStatus>
        break;
 800892a:	e00e      	b.n	800894a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f9b2 	bl	8008c96 <USBD_CtlSendStatus>
        break;
 8008932:	e00a      	b.n	800894a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f8e5 	bl	8008b06 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800893c:	4b04      	ldr	r3, [pc, #16]	; (8008950 <USBD_SetConfig+0x118>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff f9ac 	bl	8007ca0 <USBD_ClrClassConfig>
        break;
 8008948:	bf00      	nop
    }
  }
}
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	200011ac 	.word	0x200011ac

08008954 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	88db      	ldrh	r3, [r3, #6]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d004      	beq.n	8008970 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f8cc 	bl	8008b06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800896e:	e022      	b.n	80089b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008976:	2b02      	cmp	r3, #2
 8008978:	dc02      	bgt.n	8008980 <USBD_GetConfig+0x2c>
 800897a:	2b00      	cmp	r3, #0
 800897c:	dc03      	bgt.n	8008986 <USBD_GetConfig+0x32>
 800897e:	e015      	b.n	80089ac <USBD_GetConfig+0x58>
 8008980:	2b03      	cmp	r3, #3
 8008982:	d00b      	beq.n	800899c <USBD_GetConfig+0x48>
 8008984:	e012      	b.n	80089ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3308      	adds	r3, #8
 8008990:	2201      	movs	r2, #1
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f920 	bl	8008bda <USBD_CtlSendData>
        break;
 800899a:	e00c      	b.n	80089b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3304      	adds	r3, #4
 80089a0:	2201      	movs	r2, #1
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f918 	bl	8008bda <USBD_CtlSendData>
        break;
 80089aa:	e004      	b.n	80089b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f8a9 	bl	8008b06 <USBD_CtlError>
        break;
 80089b4:	bf00      	nop
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ce:	3b01      	subs	r3, #1
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d81e      	bhi.n	8008a12 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	88db      	ldrh	r3, [r3, #6]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d004      	beq.n	80089e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f891 	bl	8008b06 <USBD_CtlError>
        break;
 80089e4:	e01a      	b.n	8008a1c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f043 0202 	orr.w	r2, r3, #2
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	330c      	adds	r3, #12
 8008a06:	2202      	movs	r2, #2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f8e5 	bl	8008bda <USBD_CtlSendData>
      break;
 8008a10:	e004      	b.n	8008a1c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f876 	bl	8008b06 <USBD_CtlError>
      break;
 8008a1a:	bf00      	nop
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d106      	bne.n	8008a44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f929 	bl	8008c96 <USBD_CtlSendStatus>
  }
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d80b      	bhi.n	8008a7a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	885b      	ldrh	r3, [r3, #2]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d10c      	bne.n	8008a84 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f90f 	bl	8008c96 <USBD_CtlSendStatus>
      }
      break;
 8008a78:	e004      	b.n	8008a84 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f842 	bl	8008b06 <USBD_CtlError>
      break;
 8008a82:	e000      	b.n	8008a86 <USBD_ClrFeature+0x3a>
      break;
 8008a84:	bf00      	nop
  }
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781a      	ldrb	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	785a      	ldrb	r2, [r3, #1]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	3302      	adds	r3, #2
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	3303      	adds	r3, #3
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	4413      	add	r3, r2
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	3305      	adds	r3, #5
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	021b      	lsls	r3, r3, #8
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	3306      	adds	r3, #6
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	3307      	adds	r3, #7
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	4413      	add	r3, r2
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	80da      	strh	r2, [r3, #6]

}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bc80      	pop	{r7}
 8008b04:	4770      	bx	lr

08008b06 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b10:	2180      	movs	r1, #128	; 0x80
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fc5a 	bl	80093cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b18:	2100      	movs	r1, #0
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fc56 	bl	80093cc <USBD_LL_StallEP>
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d032      	beq.n	8008ba4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 f834 	bl	8008bac <USBD_GetLen>
 8008b44:	4603      	mov	r3, r0
 8008b46:	3301      	adds	r3, #1
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	005b      	lsls	r3, r3, #1
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	75fa      	strb	r2, [r7, #23]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	7812      	ldrb	r2, [r2, #0]
 8008b62:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	75fa      	strb	r2, [r7, #23]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	4413      	add	r3, r2
 8008b70:	2203      	movs	r2, #3
 8008b72:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008b74:	e012      	b.n	8008b9c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	60fa      	str	r2, [r7, #12]
 8008b7c:	7dfa      	ldrb	r2, [r7, #23]
 8008b7e:	1c51      	adds	r1, r2, #1
 8008b80:	75f9      	strb	r1, [r7, #23]
 8008b82:	4611      	mov	r1, r2
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	440a      	add	r2, r1
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	75fa      	strb	r2, [r7, #23]
 8008b92:	461a      	mov	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4413      	add	r3, r2
 8008b98:	2200      	movs	r2, #0
 8008b9a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e8      	bne.n	8008b76 <USBD_GetString+0x4e>
    }
  }
}
 8008ba4:	bf00      	nop
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008bb8:	e005      	b.n	8008bc6 <USBD_GetLen+0x1a>
  {
    len++;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f5      	bne.n	8008bba <USBD_GetLen+0xe>
  }

  return len;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bc80      	pop	{r7}
 8008bd8:	4770      	bx	lr

08008bda <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	4613      	mov	r3, r2
 8008be6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bf0:	88fa      	ldrh	r2, [r7, #6]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008bf6:	88fa      	ldrh	r2, [r7, #6]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bfc:	88fb      	ldrh	r3, [r7, #6]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	2100      	movs	r1, #0
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 fc6a 	bl	80094dc <USBD_LL_Transmit>

  return USBD_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	2100      	movs	r1, #0
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 fc58 	bl	80094dc <USBD_LL_Transmit>

  return USBD_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	4613      	mov	r3, r2
 8008c42:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2203      	movs	r2, #3
 8008c48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c4c:	88fa      	ldrh	r2, [r7, #6]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008c54:	88fa      	ldrh	r2, [r7, #6]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	2100      	movs	r1, #0
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 fc5d 	bl	8009522 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c80:	88fb      	ldrh	r3, [r7, #6]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	2100      	movs	r1, #0
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 fc4b 	bl	8009522 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b082      	sub	sp, #8
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2204      	movs	r2, #4
 8008ca2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2100      	movs	r1, #0
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fc15 	bl	80094dc <USBD_LL_Transmit>

  return USBD_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2205      	movs	r2, #5
 8008cc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ccc:	2300      	movs	r3, #0
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fc25 	bl	8009522 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	4912      	ldr	r1, [pc, #72]	; (8008d34 <MX_USB_DEVICE_Init+0x50>)
 8008cec:	4812      	ldr	r0, [pc, #72]	; (8008d38 <MX_USB_DEVICE_Init+0x54>)
 8008cee:	f7fe ff5e 	bl	8007bae <USBD_Init>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cf8:	f7f8 f99e 	bl	8001038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cfc:	490f      	ldr	r1, [pc, #60]	; (8008d3c <MX_USB_DEVICE_Init+0x58>)
 8008cfe:	480e      	ldr	r0, [pc, #56]	; (8008d38 <MX_USB_DEVICE_Init+0x54>)
 8008d00:	f7fe ff80 	bl	8007c04 <USBD_RegisterClass>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d0a:	f7f8 f995 	bl	8001038 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d0e:	490c      	ldr	r1, [pc, #48]	; (8008d40 <MX_USB_DEVICE_Init+0x5c>)
 8008d10:	4809      	ldr	r0, [pc, #36]	; (8008d38 <MX_USB_DEVICE_Init+0x54>)
 8008d12:	f7fe feb1 	bl	8007a78 <USBD_CDC_RegisterInterface>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d1c:	f7f8 f98c 	bl	8001038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d20:	4805      	ldr	r0, [pc, #20]	; (8008d38 <MX_USB_DEVICE_Init+0x54>)
 8008d22:	f7fe ff88 	bl	8007c36 <USBD_Start>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d2c:	f7f8 f984 	bl	8001038 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d30:	bf00      	nop
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	20000138 	.word	0x20000138
 8008d38:	200011b0 	.word	0x200011b0
 8008d3c:	20000024 	.word	0x20000024
 8008d40:	20000128 	.word	0x20000128

08008d44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4905      	ldr	r1, [pc, #20]	; (8008d60 <CDC_Init_FS+0x1c>)
 8008d4c:	4805      	ldr	r0, [pc, #20]	; (8008d64 <CDC_Init_FS+0x20>)
 8008d4e:	f7fe fea9 	bl	8007aa4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d52:	4905      	ldr	r1, [pc, #20]	; (8008d68 <CDC_Init_FS+0x24>)
 8008d54:	4803      	ldr	r0, [pc, #12]	; (8008d64 <CDC_Init_FS+0x20>)
 8008d56:	f7fe febe 	bl	8007ad6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20001874 	.word	0x20001874
 8008d64:	200011b0 	.word	0x200011b0
 8008d68:	20001474 	.word	0x20001474

08008d6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr
	...

08008d7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	71fb      	strb	r3, [r7, #7]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	2b23      	cmp	r3, #35	; 0x23
 8008d90:	d84a      	bhi.n	8008e28 <CDC_Control_FS+0xac>
 8008d92:	a201      	add	r2, pc, #4	; (adr r2, 8008d98 <CDC_Control_FS+0x1c>)
 8008d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d98:	08008e29 	.word	0x08008e29
 8008d9c:	08008e29 	.word	0x08008e29
 8008da0:	08008e29 	.word	0x08008e29
 8008da4:	08008e29 	.word	0x08008e29
 8008da8:	08008e29 	.word	0x08008e29
 8008dac:	08008e29 	.word	0x08008e29
 8008db0:	08008e29 	.word	0x08008e29
 8008db4:	08008e29 	.word	0x08008e29
 8008db8:	08008e29 	.word	0x08008e29
 8008dbc:	08008e29 	.word	0x08008e29
 8008dc0:	08008e29 	.word	0x08008e29
 8008dc4:	08008e29 	.word	0x08008e29
 8008dc8:	08008e29 	.word	0x08008e29
 8008dcc:	08008e29 	.word	0x08008e29
 8008dd0:	08008e29 	.word	0x08008e29
 8008dd4:	08008e29 	.word	0x08008e29
 8008dd8:	08008e29 	.word	0x08008e29
 8008ddc:	08008e29 	.word	0x08008e29
 8008de0:	08008e29 	.word	0x08008e29
 8008de4:	08008e29 	.word	0x08008e29
 8008de8:	08008e29 	.word	0x08008e29
 8008dec:	08008e29 	.word	0x08008e29
 8008df0:	08008e29 	.word	0x08008e29
 8008df4:	08008e29 	.word	0x08008e29
 8008df8:	08008e29 	.word	0x08008e29
 8008dfc:	08008e29 	.word	0x08008e29
 8008e00:	08008e29 	.word	0x08008e29
 8008e04:	08008e29 	.word	0x08008e29
 8008e08:	08008e29 	.word	0x08008e29
 8008e0c:	08008e29 	.word	0x08008e29
 8008e10:	08008e29 	.word	0x08008e29
 8008e14:	08008e29 	.word	0x08008e29
 8008e18:	08008e29 	.word	0x08008e29
 8008e1c:	08008e29 	.word	0x08008e29
 8008e20:	08008e29 	.word	0x08008e29
 8008e24:	08008e29 	.word	0x08008e29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e28:	bf00      	nop
  }

  return (USBD_OK);
 8008e2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc80      	pop	{r7}
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop

08008e38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4808      	ldr	r0, [pc, #32]	; (8008e68 <CDC_Receive_FS+0x30>)
 8008e46:	f7fe fe46 	bl	8007ad6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e4a:	4807      	ldr	r0, [pc, #28]	; (8008e68 <CDC_Receive_FS+0x30>)
 8008e4c:	f7fe fe85 	bl	8007b5a <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7f7 f9a4 	bl	80001a4 <CDC_ReceiveCallback>
  return (USBD_OK);
 8008e5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	200011b0 	.word	0x200011b0

08008e6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <CDC_Transmit_FS+0x48>)
 8008e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e00b      	b.n	8008eaa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e92:	887b      	ldrh	r3, [r7, #2]
 8008e94:	461a      	mov	r2, r3
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	4806      	ldr	r0, [pc, #24]	; (8008eb4 <CDC_Transmit_FS+0x48>)
 8008e9a:	f7fe fe03 	bl	8007aa4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e9e:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <CDC_Transmit_FS+0x48>)
 8008ea0:	f7fe fe2c 	bl	8007afc <USBD_CDC_TransmitPacket>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200011b0 	.word	0x200011b0

08008eb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2212      	movs	r2, #18
 8008ec8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008eca:	4b03      	ldr	r3, [pc, #12]	; (8008ed8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	20000154 	.word	0x20000154

08008edc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2204      	movs	r2, #4
 8008eec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008eee:	4b03      	ldr	r3, [pc, #12]	; (8008efc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bc80      	pop	{r7}
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20000168 	.word	0x20000168

08008f00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	6039      	str	r1, [r7, #0]
 8008f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d105      	bne.n	8008f1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	4907      	ldr	r1, [pc, #28]	; (8008f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f16:	4808      	ldr	r0, [pc, #32]	; (8008f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f18:	f7ff fe06 	bl	8008b28 <USBD_GetString>
 8008f1c:	e004      	b.n	8008f28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	4904      	ldr	r1, [pc, #16]	; (8008f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f22:	4805      	ldr	r0, [pc, #20]	; (8008f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f24:	f7ff fe00 	bl	8008b28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20001c74 	.word	0x20001c74
 8008f38:	08009698 	.word	0x08009698

08008f3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	6039      	str	r1, [r7, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	4904      	ldr	r1, [pc, #16]	; (8008f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f4c:	4804      	ldr	r0, [pc, #16]	; (8008f60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f4e:	f7ff fdeb 	bl	8008b28 <USBD_GetString>
  return USBD_StrDesc;
 8008f52:	4b02      	ldr	r3, [pc, #8]	; (8008f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20001c74 	.word	0x20001c74
 8008f60:	080096b0 	.word	0x080096b0

08008f64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	221a      	movs	r2, #26
 8008f74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f76:	f000 f843 	bl	8009000 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f7a:	4b02      	ldr	r3, [pc, #8]	; (8008f84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	2000016c 	.word	0x2000016c

08008f88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	6039      	str	r1, [r7, #0]
 8008f92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	4907      	ldr	r1, [pc, #28]	; (8008fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f9e:	4808      	ldr	r0, [pc, #32]	; (8008fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fa0:	f7ff fdc2 	bl	8008b28 <USBD_GetString>
 8008fa4:	e004      	b.n	8008fb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	4904      	ldr	r1, [pc, #16]	; (8008fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008faa:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fac:	f7ff fdbc 	bl	8008b28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fb0:	4b02      	ldr	r3, [pc, #8]	; (8008fbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20001c74 	.word	0x20001c74
 8008fc0:	080096c4 	.word	0x080096c4

08008fc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6039      	str	r1, [r7, #0]
 8008fce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fd0:	79fb      	ldrb	r3, [r7, #7]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d105      	bne.n	8008fe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4907      	ldr	r1, [pc, #28]	; (8008ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fda:	4808      	ldr	r0, [pc, #32]	; (8008ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fdc:	f7ff fda4 	bl	8008b28 <USBD_GetString>
 8008fe0:	e004      	b.n	8008fec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	4904      	ldr	r1, [pc, #16]	; (8008ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fe6:	4805      	ldr	r0, [pc, #20]	; (8008ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fe8:	f7ff fd9e 	bl	8008b28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fec:	4b02      	ldr	r3, [pc, #8]	; (8008ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20001c74 	.word	0x20001c74
 8008ffc:	080096d0 	.word	0x080096d0

08009000 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009006:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <Get_SerialNum+0x44>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <Get_SerialNum+0x48>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009012:	4b0e      	ldr	r3, [pc, #56]	; (800904c <Get_SerialNum+0x4c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4413      	add	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009026:	2208      	movs	r2, #8
 8009028:	4909      	ldr	r1, [pc, #36]	; (8009050 <Get_SerialNum+0x50>)
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f814 	bl	8009058 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009030:	2204      	movs	r2, #4
 8009032:	4908      	ldr	r1, [pc, #32]	; (8009054 <Get_SerialNum+0x54>)
 8009034:	68b8      	ldr	r0, [r7, #8]
 8009036:	f000 f80f 	bl	8009058 <IntToUnicode>
  }
}
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	1ffff7e8 	.word	0x1ffff7e8
 8009048:	1ffff7ec 	.word	0x1ffff7ec
 800904c:	1ffff7f0 	.word	0x1ffff7f0
 8009050:	2000016e 	.word	0x2000016e
 8009054:	2000017e 	.word	0x2000017e

08009058 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	4613      	mov	r3, r2
 8009064:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800906a:	2300      	movs	r3, #0
 800906c:	75fb      	strb	r3, [r7, #23]
 800906e:	e027      	b.n	80090c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	0f1b      	lsrs	r3, r3, #28
 8009074:	2b09      	cmp	r3, #9
 8009076:	d80b      	bhi.n	8009090 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	0f1b      	lsrs	r3, r3, #28
 800907c:	b2da      	uxtb	r2, r3
 800907e:	7dfb      	ldrb	r3, [r7, #23]
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	4619      	mov	r1, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	440b      	add	r3, r1
 8009088:	3230      	adds	r2, #48	; 0x30
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e00a      	b.n	80090a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	0f1b      	lsrs	r3, r3, #28
 8009094:	b2da      	uxtb	r2, r3
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	4619      	mov	r1, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	440b      	add	r3, r1
 80090a0:	3237      	adds	r2, #55	; 0x37
 80090a2:	b2d2      	uxtb	r2, r2
 80090a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	011b      	lsls	r3, r3, #4
 80090aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	005b      	lsls	r3, r3, #1
 80090b0:	3301      	adds	r3, #1
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	4413      	add	r3, r2
 80090b6:	2200      	movs	r2, #0
 80090b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	3301      	adds	r3, #1
 80090be:	75fb      	strb	r3, [r7, #23]
 80090c0:	7dfa      	ldrb	r2, [r7, #23]
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d3d3      	bcc.n	8009070 <IntToUnicode+0x18>
  }
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bc80      	pop	{r7}
 80090d2:	4770      	bx	lr

080090d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a0d      	ldr	r2, [pc, #52]	; (8009118 <HAL_PCD_MspInit+0x44>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d113      	bne.n	800910e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090e6:	4b0d      	ldr	r3, [pc, #52]	; (800911c <HAL_PCD_MspInit+0x48>)
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	4a0c      	ldr	r2, [pc, #48]	; (800911c <HAL_PCD_MspInit+0x48>)
 80090ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090f0:	61d3      	str	r3, [r2, #28]
 80090f2:	4b0a      	ldr	r3, [pc, #40]	; (800911c <HAL_PCD_MspInit+0x48>)
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80090fe:	2200      	movs	r2, #0
 8009100:	2100      	movs	r1, #0
 8009102:	2014      	movs	r0, #20
 8009104:	f7f8 fa37 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009108:	2014      	movs	r0, #20
 800910a:	f7f8 fa50 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800910e:	bf00      	nop
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	40005c00 	.word	0x40005c00
 800911c:	40021000 	.word	0x40021000

08009120 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009134:	4619      	mov	r1, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f7fe fdc5 	bl	8007cc6 <USBD_LL_SetupStage>
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 8009156:	78fa      	ldrb	r2, [r7, #3]
 8009158:	6879      	ldr	r1, [r7, #4]
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	00db      	lsls	r3, r3, #3
 8009162:	440b      	add	r3, r1
 8009164:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	4619      	mov	r1, r3
 800916e:	f7fe fdf7 	bl	8007d60 <USBD_LL_DataOutStage>
}
 8009172:	bf00      	nop
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800918c:	78fa      	ldrb	r2, [r7, #3]
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	440b      	add	r3, r1
 800919a:	3324      	adds	r3, #36	; 0x24
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	78fb      	ldrb	r3, [r7, #3]
 80091a0:	4619      	mov	r1, r3
 80091a2:	f7fe fe4e 	bl	8007e42 <USBD_LL_DataInStage>
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe ff5e 	bl	800807e <USBD_LL_SOF>
}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091d2:	2301      	movs	r3, #1
 80091d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	799b      	ldrb	r3, [r3, #6]
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d001      	beq.n	80091e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091de:	f7f7 ff2b 	bl	8001038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091e8:	7bfa      	ldrb	r2, [r7, #15]
 80091ea:	4611      	mov	r1, r2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fe ff0e 	bl	800800e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe fec7 	bl	8007f8c <USBD_LL_Reset>
}
 80091fe:	bf00      	nop
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe ff08 	bl	800802c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	7a9b      	ldrb	r3, [r3, #10]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <HAL_PCD_SuspendCallback+0x30>)
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	4a03      	ldr	r2, [pc, #12]	; (8009238 <HAL_PCD_SuspendCallback+0x30>)
 800922a:	f043 0306 	orr.w	r3, r3, #6
 800922e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	e000ed00 	.word	0xe000ed00

0800923c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe ff02 	bl	8008054 <USBD_LL_Resume>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009260:	4a28      	ldr	r2, [pc, #160]	; (8009304 <USBD_LL_Init+0xac>)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a26      	ldr	r2, [pc, #152]	; (8009304 <USBD_LL_Init+0xac>)
 800926c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009270:	4b24      	ldr	r3, [pc, #144]	; (8009304 <USBD_LL_Init+0xac>)
 8009272:	4a25      	ldr	r2, [pc, #148]	; (8009308 <USBD_LL_Init+0xb0>)
 8009274:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009276:	4b23      	ldr	r3, [pc, #140]	; (8009304 <USBD_LL_Init+0xac>)
 8009278:	2208      	movs	r2, #8
 800927a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800927c:	4b21      	ldr	r3, [pc, #132]	; (8009304 <USBD_LL_Init+0xac>)
 800927e:	2202      	movs	r2, #2
 8009280:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009282:	4b20      	ldr	r3, [pc, #128]	; (8009304 <USBD_LL_Init+0xac>)
 8009284:	2200      	movs	r2, #0
 8009286:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009288:	4b1e      	ldr	r3, [pc, #120]	; (8009304 <USBD_LL_Init+0xac>)
 800928a:	2200      	movs	r2, #0
 800928c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800928e:	4b1d      	ldr	r3, [pc, #116]	; (8009304 <USBD_LL_Init+0xac>)
 8009290:	2200      	movs	r2, #0
 8009292:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009294:	481b      	ldr	r0, [pc, #108]	; (8009304 <USBD_LL_Init+0xac>)
 8009296:	f7f8 fb40 	bl	800191a <HAL_PCD_Init>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80092a0:	f7f7 feca 	bl	8001038 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092aa:	2318      	movs	r3, #24
 80092ac:	2200      	movs	r2, #0
 80092ae:	2100      	movs	r1, #0
 80092b0:	f7fa f852 	bl	8003358 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ba:	2358      	movs	r3, #88	; 0x58
 80092bc:	2200      	movs	r2, #0
 80092be:	2180      	movs	r1, #128	; 0x80
 80092c0:	f7fa f84a 	bl	8003358 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ca:	23c0      	movs	r3, #192	; 0xc0
 80092cc:	2200      	movs	r2, #0
 80092ce:	2181      	movs	r1, #129	; 0x81
 80092d0:	f7fa f842 	bl	8003358 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80092de:	2200      	movs	r2, #0
 80092e0:	2101      	movs	r1, #1
 80092e2:	f7fa f839 	bl	8003358 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f0:	2200      	movs	r2, #0
 80092f2:	2182      	movs	r1, #130	; 0x82
 80092f4:	f7fa f830 	bl	8003358 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20001e74 	.word	0x20001e74
 8009308:	40005c00 	.word	0x40005c00

0800930c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009322:	4618      	mov	r0, r3
 8009324:	f7f8 fbef 	bl	8001b06 <HAL_PCD_Start>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f94e 	bl	80095d0 <USBD_Get_USB_Status>
 8009334:	4603      	mov	r3, r0
 8009336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009338:	7bbb      	ldrb	r3, [r7, #14]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	4608      	mov	r0, r1
 800934c:	4611      	mov	r1, r2
 800934e:	461a      	mov	r2, r3
 8009350:	4603      	mov	r3, r0
 8009352:	70fb      	strb	r3, [r7, #3]
 8009354:	460b      	mov	r3, r1
 8009356:	70bb      	strb	r3, [r7, #2]
 8009358:	4613      	mov	r3, r2
 800935a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800936a:	78bb      	ldrb	r3, [r7, #2]
 800936c:	883a      	ldrh	r2, [r7, #0]
 800936e:	78f9      	ldrb	r1, [r7, #3]
 8009370:	f7f8 fd43 	bl	8001dfa <HAL_PCD_EP_Open>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f928 	bl	80095d0 <USBD_Get_USB_Status>
 8009380:	4603      	mov	r3, r0
 8009382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009384:	7bbb      	ldrb	r3, [r7, #14]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7f8 fd81 	bl	8001eb4 <HAL_PCD_EP_Close>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f909 	bl	80095d0 <USBD_Get_USB_Status>
 80093be:	4603      	mov	r3, r0
 80093c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7f8 fe29 	bl	8002042 <HAL_PCD_EP_SetStall>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 f8ea 	bl	80095d0 <USBD_Get_USB_Status>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009400:	7bbb      	ldrb	r3, [r7, #14]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009424:	78fa      	ldrb	r2, [r7, #3]
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f7f8 fe6a 	bl	8002102 <HAL_PCD_EP_ClrStall>
 800942e:	4603      	mov	r3, r0
 8009430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	4618      	mov	r0, r3
 8009436:	f000 f8cb 	bl	80095d0 <USBD_Get_USB_Status>
 800943a:	4603      	mov	r3, r0
 800943c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800943e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800945a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800945c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009460:	2b00      	cmp	r3, #0
 8009462:	da0b      	bge.n	800947c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800946a:	68f9      	ldr	r1, [r7, #12]
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	00db      	lsls	r3, r3, #3
 8009474:	440b      	add	r3, r1
 8009476:	3312      	adds	r3, #18
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	e00b      	b.n	8009494 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009482:	68f9      	ldr	r1, [r7, #12]
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	440b      	add	r3, r1
 800948e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8009492:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	bc80      	pop	{r7}
 800949c:	4770      	bx	lr

0800949e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f7f8 fc78 	bl	8001db2 <HAL_PCD_SetAddress>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 f881 	bl	80095d0 <USBD_Get_USB_Status>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	607a      	str	r2, [r7, #4]
 80094e6:	461a      	mov	r2, r3
 80094e8:	460b      	mov	r3, r1
 80094ea:	72fb      	strb	r3, [r7, #11]
 80094ec:	4613      	mov	r3, r2
 80094ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094fe:	893b      	ldrh	r3, [r7, #8]
 8009500:	7af9      	ldrb	r1, [r7, #11]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	f7f8 fd66 	bl	8001fd4 <HAL_PCD_EP_Transmit>
 8009508:	4603      	mov	r3, r0
 800950a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800950c:	7dfb      	ldrb	r3, [r7, #23]
 800950e:	4618      	mov	r0, r3
 8009510:	f000 f85e 	bl	80095d0 <USBD_Get_USB_Status>
 8009514:	4603      	mov	r3, r0
 8009516:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009518:	7dbb      	ldrb	r3, [r7, #22]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b086      	sub	sp, #24
 8009526:	af00      	add	r7, sp, #0
 8009528:	60f8      	str	r0, [r7, #12]
 800952a:	607a      	str	r2, [r7, #4]
 800952c:	461a      	mov	r2, r3
 800952e:	460b      	mov	r3, r1
 8009530:	72fb      	strb	r3, [r7, #11]
 8009532:	4613      	mov	r3, r2
 8009534:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009544:	893b      	ldrh	r3, [r7, #8]
 8009546:	7af9      	ldrb	r1, [r7, #11]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	f7f8 fcfb 	bl	8001f44 <HAL_PCD_EP_Receive>
 800954e:	4603      	mov	r3, r0
 8009550:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 f83b 	bl	80095d0 <USBD_Get_USB_Status>
 800955a:	4603      	mov	r3, r0
 800955c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800955e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800957a:	78fa      	ldrb	r2, [r7, #3]
 800957c:	4611      	mov	r1, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f7f8 fd11 	bl	8001fa6 <HAL_PCD_EP_GetRxCount>
 8009584:	4603      	mov	r3, r0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009598:	4b02      	ldr	r3, [pc, #8]	; (80095a4 <USBD_static_malloc+0x14>)
}
 800959a:	4618      	mov	r0, r3
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc80      	pop	{r7}
 80095a2:	4770      	bx	lr
 80095a4:	2000214c 	.word	0x2000214c

080095a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]

}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bc80      	pop	{r7}
 80095b8:	4770      	bx	lr

080095ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bc80      	pop	{r7}
 80095ce:	4770      	bx	lr

080095d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d817      	bhi.n	8009614 <USBD_Get_USB_Status+0x44>
 80095e4:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <USBD_Get_USB_Status+0x1c>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	080095fd 	.word	0x080095fd
 80095f0:	08009603 	.word	0x08009603
 80095f4:	08009609 	.word	0x08009609
 80095f8:	0800960f 	.word	0x0800960f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009600:	e00b      	b.n	800961a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009602:	2302      	movs	r3, #2
 8009604:	73fb      	strb	r3, [r7, #15]
    break;
 8009606:	e008      	b.n	800961a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009608:	2301      	movs	r3, #1
 800960a:	73fb      	strb	r3, [r7, #15]
    break;
 800960c:	e005      	b.n	800961a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800960e:	2302      	movs	r3, #2
 8009610:	73fb      	strb	r3, [r7, #15]
    break;
 8009612:	e002      	b.n	800961a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009614:	2302      	movs	r3, #2
 8009616:	73fb      	strb	r3, [r7, #15]
    break;
 8009618:	bf00      	nop
  }
  return usb_status;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	bc80      	pop	{r7}
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop

08009628 <memset>:
 8009628:	4603      	mov	r3, r0
 800962a:	4402      	add	r2, r0
 800962c:	4293      	cmp	r3, r2
 800962e:	d100      	bne.n	8009632 <memset+0xa>
 8009630:	4770      	bx	lr
 8009632:	f803 1b01 	strb.w	r1, [r3], #1
 8009636:	e7f9      	b.n	800962c <memset+0x4>

08009638 <__libc_init_array>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	2600      	movs	r6, #0
 800963c:	4d0c      	ldr	r5, [pc, #48]	; (8009670 <__libc_init_array+0x38>)
 800963e:	4c0d      	ldr	r4, [pc, #52]	; (8009674 <__libc_init_array+0x3c>)
 8009640:	1b64      	subs	r4, r4, r5
 8009642:	10a4      	asrs	r4, r4, #2
 8009644:	42a6      	cmp	r6, r4
 8009646:	d109      	bne.n	800965c <__libc_init_array+0x24>
 8009648:	f000 f81a 	bl	8009680 <_init>
 800964c:	2600      	movs	r6, #0
 800964e:	4d0a      	ldr	r5, [pc, #40]	; (8009678 <__libc_init_array+0x40>)
 8009650:	4c0a      	ldr	r4, [pc, #40]	; (800967c <__libc_init_array+0x44>)
 8009652:	1b64      	subs	r4, r4, r5
 8009654:	10a4      	asrs	r4, r4, #2
 8009656:	42a6      	cmp	r6, r4
 8009658:	d105      	bne.n	8009666 <__libc_init_array+0x2e>
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009660:	4798      	blx	r3
 8009662:	3601      	adds	r6, #1
 8009664:	e7ee      	b.n	8009644 <__libc_init_array+0xc>
 8009666:	f855 3b04 	ldr.w	r3, [r5], #4
 800966a:	4798      	blx	r3
 800966c:	3601      	adds	r6, #1
 800966e:	e7f2      	b.n	8009656 <__libc_init_array+0x1e>
 8009670:	0800990c 	.word	0x0800990c
 8009674:	0800990c 	.word	0x0800990c
 8009678:	0800990c 	.word	0x0800990c
 800967c:	08009910 	.word	0x08009910

08009680 <_init>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr

0800968c <_fini>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr
